<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2024/04/25/Docker/"/>
    <url>/2024/04/25/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><h3 id="重要概念："><a href="#重要概念：" class="headerlink" title="重要概念："></a>重要概念：</h3><ol><li><h4 id="Docker-客户端（Docker-Client）"><a href="#Docker-客户端（Docker-Client）" class="headerlink" title="Docker 客户端（Docker Client）"></a>Docker 客户端（Docker Client）</h4><ul><li>Docker 客户端是与用户交互的主要方式。用户可以通过 Docker 客户端执行命令来管理 Docker 容器、镜像、网络和数据卷等资源。</li></ul></li><li><h4 id="Docker-守护进程（Docker-Daemon）"><a href="#Docker-守护进程（Docker-Daemon）" class="headerlink" title="Docker 守护进程（Docker Daemon）"></a>Docker 守护进程（Docker Daemon）</h4><ul><li>Docker 守护进程是在主机上运行的后台服务，负责管理 Docker 对象（如容器、镜像、网络等），并响应来自 Docker 客户端的请求。守护进程监听来自客户端的 API 请求，并管理容器的生命周期、存储、网络和其他资源。</li></ul></li><li><h4 id="Docker-镜像（Docker-Images）"><a href="#Docker-镜像（Docker-Images）" class="headerlink" title="Docker 镜像（Docker Images）"></a>Docker 镜像（Docker Images）</h4><ul><li>Docker 镜像是容器的基础。镜像包含了运行容器所需的所有文件系统、库和配置等信息。用户可以通过 Dockerfile 来定义自定义镜像的构建过程，也可以从 Docker Hub 或其他镜像仓库中获取现有的镜像。</li></ul></li><li><h4 id="Docker-容器（Docker-Containers）"><a href="#Docker-容器（Docker-Containers）" class="headerlink" title="Docker 容器（Docker Containers）"></a>Docker 容器（Docker Containers）</h4><ul><li>Docker 容器是 Docker 镜像的运行实例。每个容器都是一个独立的、轻量级的运行环境，包含了一个完整的文件系统、运行时环境和用户定义的进程。容器可以在 Docker 守护进程的管理下启动、停止、暂停和删除。</li></ul></li><li><h4 id="Docker-Registry（Docker-Hub）"><a href="#Docker-Registry（Docker-Hub）" class="headerlink" title="Docker Registry（Docker Hub）"></a>Docker Registry（Docker Hub）</h4><ul><li>Docker Registry 是用于存储和分享 Docker 镜像的服务。Docker Hub 是 Docker 官方提供的公共 Registry，用户可以在其中找到大量的官方和社区维护的镜像。除了 Docker Hub 外，还可以搭建私有 Registry 来存储私有镜像。</li></ul></li><li><h4 id="Docker-网络（Docker-Networking）"><a href="#Docker-网络（Docker-Networking）" class="headerlink" title="Docker 网络（Docker Networking）"></a>Docker 网络（Docker Networking）</h4><ul><li>Docker 网络允许容器之间进行通信，并连接容器与外部网络。Docker 提供了多种网络模式，如桥接模式、主机模式、覆盖网络等，用户可以根据需求选择合适的网络配置。</li></ul></li><li><h4 id="Docker-数据卷（Docker-Volumes）"><a href="#Docker-数据卷（Docker-Volumes）" class="headerlink" title="Docker 数据卷（Docker Volumes）"></a>Docker 数据卷（Docker Volumes）</h4><ul><li>Docker 数据卷是用于持久化存储容器数据的机制。数据卷可以将宿主机的目录或文件挂载到容器中，使容器中的数据能够持久化保存，并且可以在容器之间共享数据。</li></ul></li></ol></blockquote><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><blockquote><p>Docker 是一种开源的容器化平台，旨在简化应用程序的部署、管理和运行。通过 Docker，开发者可以将应用程序及其依赖项打包到一个称为容器的可移植容器中。这些容器可以在任何支持 Docker 的系统上运行，无论是开发、测试还是生产环境。</p></blockquote><h3 id="1-1-什么是-Docker"><a href="#1-1-什么是-Docker" class="headerlink" title="1.1.什么是 Docker"></a>1.1.什么是 Docker</h3><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h4 id="1-1-1-应用部署的环境问题"><a href="#1-1-1-应用部署的环境问题" class="headerlink" title="1.1.1.应用部署的环境问题"></a>1.1.1.应用部署的环境问题</h4><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li><p>依赖关系复杂，容易出现兼容性问题</p></li><li><p>开发、测试、生产环境有差异</p></li></ul><p><img src="/images/docker-appEnv.png" alt="image-20210731141907366"></p><p>例如一个项目中，部署时需要依赖于 node.js、Redis、RabbitMQ、MySQL 等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h4 id="1-1-2-Docker-解决依赖兼容问题"><a href="#1-1-2-Docker-解决依赖兼容问题" class="headerlink" title="1.1.2.Docker 解决依赖兼容问题"></a>1.1.2.Docker 解决依赖兼容问题</h4><p>Docker 为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的 Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p><img src="/images/docker-depsProblem.png" alt="image-20210731142219735"></p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的 Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><h4 id="1-1-3-Docker-解决操作系统环境差异"><a href="#1-1-3-Docker-解决操作系统环境差异" class="headerlink" title="1.1.3.Docker 解决操作系统环境差异"></a>1.1.3.Docker 解决操作系统环境差异</h4><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个 Ubuntu 操作系统为例，结构如下：</p><p><img src="/images/docker-systemEnvProblem.png" alt="image-20210731143401460"></p><p>结构包括：</p><ul><li>计算机硬件：例如 CPU、内存、磁盘等</li><li>系统内核：所有 Linux 发行版的内核都是 Linux，例如 CentOS、Ubuntu、Fedora 等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><p>1）应用调用操作系统应用（函数库），实现各种功能</p><p>2）系统函数库是对内核指令集的封装，会调用内核指令</p><p>3）内核指令操作计算机硬件</p><p>Ubuntu 和 CentOSpringBoot 都是基于 Linux 内核，无非是系统应用不同，提供的函数库有差异：</p><p><img src="/images/docker-linuxLibDiffer.png" alt="image-20210731144304990"></p><p>此时，如果将一个 Ubuntu 版本的 MySQL 应用安装到 CentOS 系统，MySQL 在调用 Ubuntu 函数库时，会发现找不到或者不匹配，就会报错了：</p><p><img src="/images/docker-DifferSystem-Mysql.png" alt="image-20210731144458680"></p><p>Docker 如何解决不同系统环境的问题？</p><ul><li>Docker 将用户程序与所需要调用的系统(比如 Ubuntu)函数库一起打包</li><li>Docker 运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的 Linux 内核来运行</li></ul><p>如图：</p><p><img src="/images/docker-resolveDifferSystem.png" alt="image-20210731144820638"></p><h4 id="1-1-4-小结"><a href="#1-1-4-小结" class="headerlink" title="1.1.4.小结"></a>1.1.4.小结</h4><blockquote><ol><li>Docker 如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？<ul><li>Docker 允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker 应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul></li><li>Docker 如何解决开发、测试、生产环境有差异的问题？<ul><li>Docker 镜像中包含完整运行环境，包括系统函数库，仅依赖系统的 Linux 内核，因此可以在任意 Linux 操作系统上运行</li></ul></li><li>Docker 是一个快速交付应用、运行应用的技术，具备下列优势：<ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意 Linux 操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul></li></ol></blockquote><h3 id="1-2-Docker-和虚拟机的区别"><a href="#1-2-Docker-和虚拟机的区别" class="headerlink" title="1.2.Docker 和虚拟机的区别"></a>1.2.Docker 和虚拟机的区别</h3><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的 Ubuntu 应用了。</p><p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p><p><img src="/images/docker-dockerCompareVM.png" alt="image-20210731145914960"></p><p>对比来看：</p><p><img src="/images/docker-DifferSystemCharacter.png" alt="image-20210731152243765"></p><p>小结：</p><p>Docker 和虚拟机的差异：</p><ul><li><p>docker 是一个系统进程；虚拟机是在操作系统中的操作系统</p></li><li><p>docker 体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p></li></ul><h3 id="1-3-Docker-架构"><a href="#1-3-Docker-架构" class="headerlink" title="1.3.Docker 架构"></a>1.3.Docker 架构</h3><h4 id="1-3-1-镜像和容器"><a href="#1-3-1-镜像和容器" class="headerlink" title="1.3.1.镜像和容器"></a>1.3.1.镜像和容器</h4><p>Docker 中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是 Docker 会给容器进程做隔离，对外不可见。</p><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p><p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p><img src="/images/docker-image.png" alt="image-20210731153059464"></p><p>例如你下载了一个 QQ，如果我们将 QQ 在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成 QQ 镜像。然后你可以启动多次，双开、甚至三开 QQ，跟多个妹子聊天。</p><h4 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2.DockerHub"></a>1.3.2.DockerHub</h4><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如 Redis、MySQL 镜像放到网络上，共享使用，就像 GitHub 的代码共享一样。</p><ul><li><p>DockerHub：DockerHub 是一个官方的 Docker 镜像的托管平台。这样的平台称为 Docker Registry。</p></li><li><p>国内也有类似于 DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p></li></ul><p>我们一方面可以将自己的镜像共享到 DockerHub，另一方面也可以从 DockerHub 拉取镜像：</p><p><img src="/images/docker-dockerHUb.png" alt="image-20210731153743354"></p><h4 id="1-3-3-Docker-架构"><a href="#1-3-3-Docker-架构" class="headerlink" title="1.3.3.Docker 架构"></a>1.3.3.Docker 架构</h4><p>我们要使用 Docker 来操作镜像、容器，就必须要安装 Docker。</p><p>Docker 是一个 CS 架构的程序，由两部分组成：</p><ul><li><p>服务端(server)：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等</p></li><li><p>客户端(client)：通过命令或 RestAPI 向 Docker 服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><p>如图：</p><p><img src="/images/docker-dockerServerClient.png" alt="image-20210731154257653"></p><h4 id="1-3-4-小结"><a href="#1-3-4-小结" class="headerlink" title="1.3.4.小结"></a>1.3.4.小结</h4><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker 结构：</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到 Docker 服务端</p></li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为 DockerRegistry</li></ul><h2 id="2、CentOS-安装-Docker"><a href="#2、CentOS-安装-Docker" class="headerlink" title="2、CentOS 安装 Docker"></a>2、CentOS 安装 Docker</h2><h3 id="2-1、卸载"><a href="#2-1、卸载" class="headerlink" title="2.1、卸载"></a>2.1、卸载</h3><p>如果之前安装过旧版本的 Docker，可以使用下面命令卸载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine \<br>                  docker-ce<br></code></pre></td></tr></table></figure><h3 id="2-1、安装-docker"><a href="#2-1、安装-docker" class="headerlink" title="2.1、安装 docker"></a>2.1、安装 docker</h3><p>安装 yum 工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>更新本地镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置docker镜像源</span><br>yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br>sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo<br><br>yum makecache fast<br></code></pre></td></tr></table></figure><p>docker 安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce<br></code></pre></td></tr></table></figure><h3 id="2-3、启动-docker"><a href="#2-3、启动-docker" class="headerlink" title="2.3、启动 docker"></a>2.3、启动 docker</h3><p>Docker 应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><blockquote><h3 id="启动-docker-前，一定要关闭防火墙后！⚠️"><a href="#启动-docker-前，一定要关闭防火墙后！⚠️" class="headerlink" title="启动 docker 前，一定要关闭防火墙后！⚠️"></a>启动 docker 前，一定要关闭防火墙后！⚠️</h3></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 关闭</span><br>systemctl stop firewalld<br><span class="hljs-comment"># 禁止开机启动防火墙</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure><p>启动 docker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker  <span class="hljs-comment"># 启动docker服务</span><br>systemctl stop docker  <span class="hljs-comment"># 停止docker服务</span><br>systemctl restart docker  <span class="hljs-comment"># 重启docker服务</span><br></code></pre></td></tr></table></figure><p>查看 docker 版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker -v<br></code></pre></td></tr></table></figure><h3 id="2-4、配置镜像加速"><a href="#2-4、配置镜像加速" class="headerlink" title="2.4、配置镜像加速"></a>2.4、配置镜像加速</h3><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h2 id="3、Docker-的基本操作"><a href="#3、Docker-的基本操作" class="headerlink" title="3、Docker 的基本操作"></a>3、Docker 的基本操作</h2><h3 id="3-1、镜像操作"><a href="#3-1、镜像操作" class="headerlink" title="3.1、镜像操作"></a>3.1、镜像操作</h3><h4 id="3-1-1、镜像名称"><a href="#3-1-1、镜像名称" class="headerlink" title="3.1.1、镜像名称"></a>3.1.1、镜像名称</h4><p>镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]</li><li>在没有指定 tag 时，默认是 latest，代表最新版本的镜像</li></ul><p>如图：镜像名称: <code>mysql</code> 是 <code>repository</code>，5.7 是 <code>tag</code> ，代表着 5.7 版本的 MySQL 镜像</p><p><img src="/images/docker-images.png" alt="镜像文件"></p><h4 id="2-1-2-镜像命令"><a href="#2-1-2-镜像命令" class="headerlink" title="2.1.2.镜像命令"></a>2.1.2.镜像命令</h4><p>常见的镜像操作命令如图：</p><p><img src="/images/docker-shell.png" alt="镜像操作命令"></p><h4 id="2-1-3-案例-1-拉取、查看镜像"><a href="#2-1-3-案例-1-拉取、查看镜像" class="headerlink" title="2.1.3.案例 1-拉取、查看镜像"></a>2.1.3.案例 1-拉取、查看镜像</h4><p>需求：从 DockerHub 中拉取一个 nginx 镜像并查看</p><p>1）首先去镜像仓库搜索 nginx 镜像，比如 <a href="https://hub.docker.com/">DockerHub</a>:</p><p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p><p>3）通过命令：docker images 查看拉取到的镜像</p><h4 id="2-1-4-案例-2-保存、导入镜像"><a href="#2-1-4-案例-2-保存、导入镜像" class="headerlink" title="2.1.4.案例 2-保存、导入镜像"></a>2.1.4.案例 2-保存、导入镜像</h4><p>需求：利用 docker save 将 nginx 镜像导出磁盘，然后再通过 load 加载回来</p><p>1）利用 <code>docker xx --help</code> 命令查看 <code>docker save</code> 和 <code>docker load</code> 的语法</p><p>查看 save 命令用法，可以输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查找 save 命令</span><br>docker save --<span class="hljs-built_in">help</span><br><span class="hljs-comment">#  格式</span><br>docker save -o [保存的目标文件名称] [镜像名称]<br></code></pre></td></tr></table></figure><p>2）使用 <code>docker save</code> 导出镜像到磁盘</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save -o nginx.tar nginx:latest<br></code></pre></td></tr></table></figure><p>3）使用 <code>docker load</code> 加载镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 删除本地的旧版 nginx 镜像</span><br>docker rmi nginx:latest<br><span class="hljs-comment"># 加载本地文件</span><br>docker load -i nginx.tar<br></code></pre></td></tr></table></figure><h3 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h3><h4 id="2-2-1-容器相关命令"><a href="#2-2-1-容器相关命令" class="headerlink" title="2.2.1.容器相关命令"></a>2.2.1.容器相关命令</h4><p>容器操作的命令如图：</p><p><img src="/images/docker-run.png" alt="容器命令"></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU 不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU 等资源</li></ul><p>其中：</p><ul><li><p>docker run：创建并运行一个容器，处于运行状态</p></li><li><p>docker pause：让一个运行的容器暂停</p></li><li><p>docker unpause：让一个容器从暂停状态恢复运行</p></li><li><p>docker stop：停止一个运行的容器</p></li><li><p>docker start：让一个停止的容器再次运行</p></li><li><p>docker rm：删除一个容器</p></li></ul><h4 id="2-2-2-案例-创建并运行一个容器"><a href="#2-2-2-案例-创建并运行一个容器" class="headerlink" title="2.2.2.案例-创建并运行一个容器"></a>2.2.2.案例-创建并运行一个容器</h4><p>创建并运行 nginx 容器的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name containerName -p 80:80 -d nginx<br></code></pre></td></tr></table></figure><p>命令解读：</p><ul><li>docker run ：创建并运行一个容器</li><li>–name : 给容器起一个名字，比如叫做 mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如 nginx</li></ul><blockquote><p><code>-p</code>参数是将容器端口映射到宿主机端口。</p><p>默认情况下，容器是隔离环境，直接访问宿主机的 80 端口肯定访问不到容器中的 nginx。</p><p>现在将容器的 80 与宿主机的 80 关联起来，当我们访问宿主机的 80 端口时，就会被映射到容器的 80，这样就能访问到 nginx。</p></blockquote><blockquote><h3 id="进入容器编辑"><a href="#进入容器编辑" class="headerlink" title="进入容器编辑"></a>进入容器编辑</h3><blockquote><p><strong>提示 ⚠️</strong>：进入容器要用到 <code>docker exec</code> 命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it mn bash<br></code></pre></td></tr></table></figure><p>命令解读：</p><ul><li><p>docker exec ：进入容器内部，执行一个命令</p></li><li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p></li><li><p>mn ：要进入的容器的名称</p></li><li><p>bash：进入容器后执行的命令，bash 是一个 linux 终端交互命令</p></li></ul></blockquote><h4 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4.小结"></a>2.2.4.小结</h4><p>docker run 命令的常见参数有哪些？</p><ul><li>–name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h3 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h3><p>容器与数据（容器内文件）耦合带来的后果：修改内部文件需要进入容器内部再编辑！</p><p><img src="/images/docker-datas.png" alt="数据卷"></p><h4 id="2-3-1-什么是数据卷"><a href="#2-3-1-什么是数据卷" class="headerlink" title="2.3.1.什么是数据卷"></a>2.3.1.什么是数据卷</h4><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="/images/docker-data-volume.png" alt="数据卷"></p><blockquote><p>🔔 一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录，即操作宿主机的 <code>/var/lib/docker/volumes/html</code> 目录等于操作容器内的 <code>/usr/share/nginx/html</code> 目录。</p></blockquote><h4 id="2-3-2-数据集操作命令"><a href="#2-3-2-数据集操作命令" class="headerlink" title="2.3.2.数据集操作命令"></a>2.3.2.数据集操作命令</h4><p>数据卷操作的基本语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume [COMMAND]<br></code></pre></td></tr></table></figure><p>docker volume 命令是数据卷操作，根据命令后跟随的 command 来确定下一步的操作：</p><ul><li>create 创建一个 volume</li><li>inspect 显示一个或多个 volume 的信息</li><li>ls 列出所有的 volume</li><li>prune 删除未使用的 volume</li><li>rm 删除一个或多个指定的 volume</li></ul><h4 id="2-3-3-创建和查看数据卷"><a href="#2-3-3-创建和查看数据卷" class="headerlink" title="2.3.3.创建和查看数据卷"></a>2.3.3.创建和查看数据卷</h4><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p><p>① 创建数据卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume create html<br></code></pre></td></tr></table></figure><p>② 查看所有数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>③ 查看数据卷详细信息卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume inspect html<br></code></pre></td></tr></table></figure><blockquote><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>数据卷的作用：</p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p>数据卷操作：</p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul></blockquote><h4 id="2-3-4-挂载数据卷"><a href="#2-3-4-挂载数据卷" class="headerlink" title="2.3.4.挂载数据卷"></a>2.3.4.挂载数据卷</h4><p>在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br>  --name mn \<br>  -v html:/root/html \<br>  -p 8080:80<br>  nginx \<br></code></pre></td></tr></table></figure><p>参数 <code>-v</code> 就是挂载数据卷的命令</p><ul><li><code>-v html:/root/html</code> ：将 <code>html</code> 数据卷挂载到容器内的 <code>/root/html</code> 目录中</li></ul><h4 id="2-3-5-案例-给-nginx-挂载数据卷"><a href="#2-3-5-案例-给-nginx-挂载数据卷" class="headerlink" title="2.3.5.案例-给 nginx 挂载数据卷"></a>2.3.5.案例-给 nginx 挂载数据卷</h4><p><strong>需求</strong>：创建一个 <code>nginx</code> 容器，修改容器内的 <code>html</code> 目录内的 <code>index.html</code> 内容</p><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p><p>步骤：</p><p>① 创建容器并挂载数据卷到容器内的 <code>HTML</code> 目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx<br></code></pre></td></tr></table></figure><p>② 进入 <code>html</code> 数据卷所在位置，并修改 <code>HTML</code> 内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看html数据卷的位置</span><br>docker volume inspect html<br><span class="hljs-comment"># 进入该目录</span><br><span class="hljs-built_in">cd</span> /var/lib/docker/volumes/html/_data<br><span class="hljs-comment"># 修改文件</span><br>vi index.html<br></code></pre></td></tr></table></figure><h4 id="2-3-6-案例-给-MySQL-挂载本地目录"><a href="#2-3-6-案例-给-MySQL-挂载本地目录" class="headerlink" title="2.3.6.案例-给 MySQL 挂载本地目录"></a>2.3.6.案例-给 MySQL 挂载本地目录</h4><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。</p><p>关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li></ul><p>如图：</p><p><img src="/images/docker-dataVolume-relation.png" alt="数据关联"></p><p><strong>语法</strong>：</p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><h4 id="2-3-7-小结"><a href="#2-3-7-小结" class="headerlink" title="2.3.7.小结"></a>2.3.7.小结</h4><p>docker run 的命令中通过 -v 参数挂载文件或目录到容器中：</p><ul><li>-v volume 名称:容器内目录</li><li>-v 宿主机文件:容器内文件</li><li>-v 宿主机目录:容器内目录</li></ul><p>数据卷挂载与目录直接挂载的</p><ul><li>数据卷挂载耦合度低，由 docker 来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><h2 id="4、Dockerfile-自定义镜像"><a href="#4、Dockerfile-自定义镜像" class="headerlink" title="4、Dockerfile 自定义镜像"></a>4、Dockerfile 自定义镜像</h2><blockquote><p>将个人项目构建成镜像</p></blockquote><h3 id="4-1、镜像结构"><a href="#4-1、镜像结构" class="headerlink" title="4.1、镜像结构"></a>4.1、镜像结构</h3><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>以 MySQL 为例，来看看镜像的组成结构：</p><p><img src="/images/docker-mysql-structure.png" alt="Mysql镜像结构"></p><blockquote><p>总结：镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p></blockquote><h3 id="4-2、Dockerfile-语法"><a href="#4-2、Dockerfile-语法" class="headerlink" title="4.2、Dockerfile 语法"></a>4.2、Dockerfile 语法</h3><blockquote><p>官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p></blockquote><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。只需要告诉 Docker，我们的镜像的组成，需要哪些 BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来 Docker 会帮助我们构建镜像。而描述上述信息的文件就是 Dockerfile 文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。</p><p><img src="/images/docker-dockerfile-shell.png" alt="Dockerfile命令"></p><h3 id="4-3、构建-Java-项目"><a href="#4-3、构建-Java-项目" class="headerlink" title="4.3、构建 Java 项目"></a>4.3、构建 Java 项目</h3><h4 id="4-3-1、基于-Ubuntu-构建-Java-项目"><a href="#4-3-1、基于-Ubuntu-构建-Java-项目" class="headerlink" title="4.3.1、基于 Ubuntu 构建 Java 项目"></a>4.3.1、基于 Ubuntu 构建 Java 项目</h4><p>需求：基于 Ubuntu 镜像构建一个新镜像并运行一个 Java 项目</p><ul><li><p>步骤 1：新建一个空文件夹 docker-demo</p></li><li><p>步骤 2：将 <code>docker-demo.jar</code> 文件（要构建镜像的项目打包文件）复制到 docker-demo 目录中</p></li><li><p>步骤 3：将 jdk8.tar.gz 文件（Java 项目的配置文件 JDK）复制到 docker-demo 目录中</p></li><li><p>步骤 4：将 Dockerfile 文件（构建镜像的编译文件）复制到 docker-demo 目录中</p><p>其中 Dockerfile 的内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 指定基础镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><span class="hljs-comment"># 配置环境变量，JDK的安装目录</span><br><span class="hljs-keyword">ENV</span> JAVA_DIR=/usr/local<br><br><span class="hljs-comment"># 拷贝jdk和java项目的包</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="hljs-variable">$JAVA_DIR</span>/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span><br><br><span class="hljs-comment"># 安装JDK</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAVA_DIR</span> \</span><br><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">mv</span> ./jdk1.8.0_144 ./java8</span><br><br><span class="hljs-comment"># 配置环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8<br><span class="hljs-keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin<br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8090</span><br><span class="hljs-comment"># 入口，java项目的启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure></li><li><p>步骤 5：进入 docker-demo</p><p>将准备好的 docker-demo 上传到虚拟机任意目录，然后进入 docker-demo 目录下</p></li><li><p>步骤 6：运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build -t javaweb:1.0 .<br></code></pre></td></tr></table></figure></li><li><p>步骤 7：访问镜像： http:&#x2F;&#x2F;虚拟机 IP:8090&#x2F;path(访问路径)</p></li></ul><h4 id="4-3-2-基于-java8-构建-Java-项目"><a href="#4-3-2-基于-java8-构建-Java-项目" class="headerlink" title="4.3.2.基于 java8 构建 Java 项目"></a>4.3.2.基于 java8 构建 Java 项目</h4><p>需求：基于 java:8-alpine 镜像，将一个 Java 项目构建为镜像（在已经准备 JDK 的基础镜像基础上构建）</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为 Dockerfile</p></li><li><p>② 将 docker-demo.jar 到目录中</p></li><li><p>③ 编写 Dockerfile 文件：</p><ul><li><p>a ）基于 java:8-alpine 作为基础镜像</p></li><li><p>b ）将 app.jar 拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口 ENTRYPOINT</p><p>内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>-alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8090</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>④ 使用 docker build 命令构建镜像</p></li><li><p>⑤ 使用 docker run 创建容器并运行</p></li></ul><h3 id="4-4、小结"><a href="#4-4、小结" class="headerlink" title="4.4、小结"></a>4.4、小结</h3><p>小结：</p><ol><li><p>Dockerfile 的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile 的第一行必须是 FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如 Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h2 id="5、CentOS7-安装-DockerCompose"><a href="#5、CentOS7-安装-DockerCompose" class="headerlink" title="5、CentOS7 安装 DockerCompose"></a>5、CentOS7 安装 DockerCompose</h2><h3 id="5-1、下载"><a href="#5-1、下载" class="headerlink" title="5.1、下载"></a>5.1、下载</h3><p>Linux 下需要通过命令下载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装</span><br>curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="5-2、修改文件权限"><a href="#5-2、修改文件权限" class="headerlink" title="5.2、修改文件权限"></a>5.2、修改文件权限</h3><p>修改文件权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 修改权限</span><br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="5-3、Base-自动补全命令"><a href="#5-3、Base-自动补全命令" class="headerlink" title="5.3、Base 自动补全命令"></a>5.3、Base 自动补全命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 补全命令</span><br>curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose<br></code></pre></td></tr></table></figure><p>若出现错误则需要修改 hosts 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h2 id="6、Docker-Compose"><a href="#6、Docker-Compose" class="headerlink" title="6、Docker-Compose"></a>6、Docker-Compose</h2><blockquote><p>Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p>DockerCompose 的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p></blockquote><h3 id="6-1、初识-DockerCompose"><a href="#6-1、初识-DockerCompose" class="headerlink" title="6.1、初识 DockerCompose"></a>6.1、初识 DockerCompose</h3><p>Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行。</p><p>格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">version<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.8&quot;</span><br> services<span class="hljs-punctuation">:</span><br>  mysql<span class="hljs-punctuation">:</span><br>    image<span class="hljs-punctuation">:</span> mysql<span class="hljs-punctuation">:</span><span class="hljs-number">5.7</span><span class="hljs-number">.25</span><br>    environment<span class="hljs-punctuation">:</span><br>     MYSQL_ROOT_PASSWORD<span class="hljs-punctuation">:</span> <span class="hljs-number">123</span><br>    volumes<span class="hljs-punctuation">:</span><br>     - <span class="hljs-string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span><br>     - <span class="hljs-string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span><br>  web<span class="hljs-punctuation">:</span><br>    build<span class="hljs-punctuation">:</span> .<br>    ports<span class="hljs-punctuation">:</span><br>     - <span class="hljs-string">&quot;8090:8090&quot;</span><br><br></code></pre></td></tr></table></figure><p>上述的 Compose 文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时 8090</li></ul><h3 id="6-2、部署微服务集群"><a href="#6-2、部署微服务集群" class="headerlink" title="6.2、部署微服务集群"></a>6.2、部署微服务集群</h3><p><strong>需求</strong>：将 cloud-demo 微服务集群利用 DockerCompose 部署</p><h4 id="6-2-1、compose-文件"><a href="#6-2-1、compose-文件" class="headerlink" title="6.2.1、compose 文件"></a>6.2.1、compose 文件</h4><p>将编写好的 docker-compose 文件放进 Spring Cloud 微服务项目 cloud-demo 的文件夹中（每个微服务都准备一个独立的目录）</p><p><img src="/images/docker-DockerCompose.png" alt="DockerCompose"></p><p>内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.2&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MODE:</span> <span class="hljs-string">standalone</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8848:8848&#x27;</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.25</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;$PWD/mysql/data:/var/lib/mysql&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;$PWD/mysql/conf:/etc/mysql/conf.d/&#x27;</span><br>  <span class="hljs-attr">userservice:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./user-service</span><br>  <span class="hljs-attr">orderservice:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./order-service</span><br>  <span class="hljs-attr">gateway:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./gateway</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;10010:10010&#x27;</span><br></code></pre></td></tr></table></figure><p>可以看到，其中包含 5 个 service 服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心<ul><li><code>image: nacos/nacos-server</code>： 基于 nacos&#x2F;nacos-server 镜像构建</li><li><code>environment</code>：环境变量<ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了 8848 端口</li></ul></li><li><code>mysql</code>：数据库<ul><li><code>image: mysql:5.7.25</code>：镜像版本是 mysql:5.7.25</li><li><code>environment</code>：环境变量<ul><li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库 root 账户的密码为 123</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了 mysql 的 data、conf 目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于 Dockerfile 临时构建的</li></ul><p>查看 mysql 目录包括两个目录：<code>conf</code> 目录和 <code>data</code> 目录，而 <code>data</code> 目录可以看到其中已经准备好 cloud_order、cloud_user 表</p><p>查看微服务目录，可以看到都包含 Dockerfile 文件：</p><p>内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>-alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure><h4 id="6-2-2、修改微服务配置"><a href="#6-2-2、修改微服务配置" class="headerlink" title="6.2.2、修改微服务配置"></a>6.2.2、修改微服务配置</h4><p>微服务将来要部署为 docker 容器，而容器之间互联不是通过 IP 地址，而是通过容器名。因此需要将 order-service、user-service、gateway 服务的 mysql、nacos 地址都修改为基于容器名的访问。</p><p>如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">orderservice</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos:8848</span> <span class="hljs-comment"># nacos服务地址</span><br></code></pre></td></tr></table></figure><h4 id="6-3-3、打包"><a href="#6-3-3、打包" class="headerlink" title="6.3.3、打包"></a>6.3.3、打包</h4><p>将每个微服务都打包。</p><p>由于 <code>Dockerfile</code> 中的 <code>jar</code> 包名称都是命名为 <code>app.jar</code>，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改 pom.xml 中的打包名称来实现，每个微服务都需要修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务打包的最终名称 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>app<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-2-4、拷贝-jar-包到部署目录"><a href="#6-2-4、拷贝-jar-包到部署目录" class="headerlink" title="6.2.4、拷贝 jar 包到部署目录"></a>6.2.4、拷贝 jar 包到部署目录</h4><p>编译打包好的 app.jar 文件，需要放到 Dockerfile 的同级目录中。</p><p>注意：每个微服务的 app.jar 放到与服务名称对应的目录。</p><h4 id="6-2-5、部署"><a href="#6-2-5、部署" class="headerlink" title="6.2.5、部署"></a>6.2.5、部署</h4><p>将文件整个 cloud-demo 文件夹上传到虚拟机任意目录中</p><p>进入 cloud-demo 目录，然后运行部署命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose up -d<br></code></pre></td></tr></table></figure><h2 id="7、Docker-镜像仓库"><a href="#7、Docker-镜像仓库" class="headerlink" title="7、Docker 镜像仓库"></a>7、Docker 镜像仓库</h2><blockquote><p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p></blockquote><h3 id="7-1-简化版镜像仓库"><a href="#7-1-简化版镜像仓库" class="headerlink" title="7.1.简化版镜像仓库"></a>7.1.简化版镜像仓库</h3><p>Docker 官方的 Docker Registry 是一个基础版本的 Docker 镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建命令如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>    --restart=always \<br>    --name registry\<br>    -p 5000:5000 \<br>    -v registry-data:/var/lib/registry \<br>    registry<br></code></pre></td></tr></table></figure><blockquote><p>上述命令中挂载一个数据卷 <code>registry-data</code> 到容器内的 <code>/var/lib/registry</code> 目录（私有镜像库存放数据的目录）</p><p>访问 <a href="http://yourip:5000/v2//_catalog">http://YourIp:5000/v2/\_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p></blockquote><h3 id="7-2-带有图形化界面版本"><a href="#7-2-带有图形化界面版本" class="headerlink" title="7.2.带有图形化界面版本"></a>7.2.带有图形化界面版本</h3><p>使用 DockerCompose 部署带有图象界面的 DockerRegistry，命令如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./registry-data:/var/lib/registry</span><br>  <span class="hljs-attr">ui:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">joxit/docker-registry-ui:static</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_TITLE=传智教育私有仓库</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_URL=http://registry:5000</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">registry</span><br></code></pre></td></tr></table></figure><h3 id="7-3-配置-Docker-信任地址"><a href="#7-3-配置-Docker-信任地址" class="headerlink" title="7.3.配置 Docker 信任地址"></a>7.3.配置 Docker 信任地址</h3><blockquote><p>私服采用的是 http 协议，默认不被 Docker 信任</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 打开要修改的文件</span><br>vi /etc/docker/daemon.json<br><span class="hljs-comment"># 添加内容：</span><br><span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;http://192.168.150.101:8080&quot;</span>]<br><span class="hljs-comment"># 重加载</span><br>systemctl daemon-reload<br><span class="hljs-comment"># 重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="7-4、推送、拉取镜像"><a href="#7-4、推送、拉取镜像" class="headerlink" title="7.4、推送、拉取镜像"></a>7.4、推送、拉取镜像</h3><p>推送镜像到私有镜像服务必须先 tag，步骤如下：</p><p>① 重新 tag 本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080&#x2F;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0<br></code></pre></td></tr></table></figure><p>② 推送镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker push 192.168.150.101:8080/nginx:1.0<br></code></pre></td></tr></table></figure><p>③ 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 192.168.150.101:8080/nginx:1.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo</title>
    <link href="/2024/04/25/Dubbo/"/>
    <url>/2024/04/25/Dubbo/</url>
    
    <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><h3 id="1-1、架构演进"><a href="#1-1、架构演进" class="headerlink" title="1.1、架构演进"></a>1.1、架构演进</h3><p>🔔Dubbo 是 SOA 时代的产物，SpringCloud 是微服务时代的产物</p><p><img src="/images/Framework.png" alt="框架演进"></p><h3 id="1-2、Dubbo"><a href="#1-2、Dubbo" class="headerlink" title="1.2、Dubbo"></a>1.2、Dubbo</h3><ul><li>Dubbo 是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。</li><li>致力于提供高性能和透明化的 RPC (<code>Remote Procedure Call</code>) 远程服务调用方案，以及 SOA (<code>Service-Oriented Architecture</code>，面向服务的架构)服务治理方案。</li><li>官网：<a href="http://dubbo.apache.org/">http://dubbo.apache.org</a></li></ul><p><img src="/images/Dubbo.png" alt="Dubbo"></p><blockquote><p><strong>Provider</strong>：暴露服务的服务提供方</p><p><strong>Container</strong>：服务运行容器</p><p><strong>Consumer</strong>：调用远程服务的服务消费方</p><p><strong>Registry</strong>：服务注册与发现的注册中心</p><p><strong>Monitor</strong>：统计服务的调用次数和调用时间的监控中心</p></blockquote><p>注意 🔔：Dubbo 官方推荐使用 Zookeeper 作为注册中心</p><h2 id="2、Dubbo-的使用"><a href="#2、Dubbo-的使用" class="headerlink" title="2、Dubbo 的使用"></a>2、Dubbo 的使用</h2><h3 id="2-1、基于-Dubbo-API-开发微服务应用"><a href="#2-1、基于-Dubbo-API-开发微服务应用" class="headerlink" title="2.1、基于 Dubbo API 开发微服务应用"></a>2.1、基于 Dubbo API 开发微服务应用</h3><blockquote><p>步骤：</p><ol><li><h3 id="启动注册中心"><a href="#启动注册中心" class="headerlink" title="启动注册中心"></a>启动注册中心</h3><ul><li>对于一个微服务化的应用来说，注册中心是不可或缺的一个组件。只有通过注册中心，消费端才可以成功发现服务端的地址信息，进而进行调用。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">Windows:<br>./mvnw.cmd clean compile <span class="hljs-built_in">exec</span>:java -pl tools/embedded-zookeeper<br><br>Linux / MacOS:<br>./mvnw clean compile <span class="hljs-built_in">exec</span>:java -pl tools/embedded-zookeeper<br><br>Docker:<br>docker run --name some-zookeeper -p 2181:2181 --restart always -d zookeeper<br></code></pre></td></tr></table></figure></li><li><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><ul><li>创建空项目（基于 SSM 框架创建 package）</li></ul></li><li><h3 id="添加-Maven-依赖"><a href="#添加-Maven-依赖" class="headerlink" title="添加 Maven 依赖"></a>添加 Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0-beta.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-x-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-handler<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-transport-native-epoll<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="定义服务接口"><a href="#定义服务接口" class="headerlink" title="定义服务接口"></a>定义服务接口</h3></li><li><h3 id="定义服务端的实现"><a href="#定义服务端的实现" class="headerlink" title="定义服务端的实现"></a>定义服务端的实现</h3></li><li><h3 id="服务端发布服务"><a href="#服务端发布服务" class="headerlink" title="服务端发布服务"></a>服务端发布服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.samples.provider;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.config.ProtocolConfig;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.RegistryConfig;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.ServiceConfig;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.bootstrap.DubboBootstrap;<br><span class="hljs-keyword">import</span> org.apache.dubbo.samples.api.GreetingsService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义具体的服务</span><br>        ServiceConfig&lt;GreetingsService&gt; service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConfig</span>&lt;&gt;();<br>        service.setInterface(GreetingsService.class);<br>        service.setRef(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GreetingsServiceImpl</span>());<br><br>        <span class="hljs-comment">// 启动 Dubbo</span><br>        DubboBootstrap.getInstance()<br>                .application(<span class="hljs-string">&quot;first-dubbo-provider&quot;</span>)<br>                .registry(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegistryConfig</span>(<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>))<br>                .protocol(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtocolConfig</span>(<span class="hljs-string">&quot;dubbo&quot;</span>, -<span class="hljs-number">1</span>))<br>                .service(service)<br>                .start()<br>                .await();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="消费端订阅并调用"><a href="#消费端订阅并调用" class="headerlink" title="消费端订阅并调用"></a>消费端订阅并调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.samples.client;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.config.ReferenceConfig;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.RegistryConfig;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.bootstrap.DubboBootstrap;<br><span class="hljs-keyword">import</span> org.apache.dubbo.samples.api.GreetingsService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ReferenceConfig&lt;GreetingsService&gt; reference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceConfig</span>&lt;&gt;();<br>        reference.setInterface(GreetingsService.class);<br><br>        DubboBootstrap.getInstance()<br>                .application(<span class="hljs-string">&quot;first-dubbo-consumer&quot;</span>)<br>                .registry(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegistryConfig</span>(<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>))<br>                .reference(reference);<br><br>        <span class="hljs-type">GreetingsService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> reference.get();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> service.sayHi(<span class="hljs-string">&quot;dubbo&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Receive result ======&gt; &quot;</span> + message);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="启动应用测验"><a href="#启动应用测验" class="headerlink" title="启动应用测验"></a>启动应用测验</h3></li></ol></blockquote><h3 id="2-2、基于-Spring-Boot-Starter-开发微服务应用"><a href="#2-2、基于-Spring-Boot-Starter-开发微服务应用" class="headerlink" title="2.2、基于 Spring Boot Starter 开发微服务应用"></a>2.2、基于 Spring Boot Starter 开发微服务应用</h3><blockquote><p>步骤：</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.  <span class="hljs-comment">// apache/dubbo-samples/1-basic/dubbo-samples-spring-boot</span><br>├── dubbo-samples-spring-boot-interface       <span class="hljs-comment">// 共享 API 模块</span><br>│   ├── pom<span class="hljs-selector-class">.xml</span><br>│   └── <span class="hljs-attribute">src</span><br>│       └── <span class="hljs-selector-tag">main</span><br>│           └── java<br>│               └── org<br>│                   └── apache<br>│                       └── dubbo<br>│                           └── springboot<br>│                               └── demo<br>│                                   └── DemoService<span class="hljs-selector-class">.java</span> <span class="hljs-comment">// API 接口</span><br>├── dubbo-samples-spring-boot-consumer        <span class="hljs-comment">// 消费端模块</span><br>│   ├── pom<span class="hljs-selector-class">.xml</span><br>│   └── <span class="hljs-attribute">src</span><br>│       ├── <span class="hljs-selector-tag">main</span><br>│       │   ├── java<br>│       │   │   └── org<br>│       │   │       └── apache<br>│       │   │           └── dubbo<br>│       │   │               └── springboot<br>│       │   │                   └── demo<br>│       │   │                       └── consumer<br>│       │   │                           ├── ConsumerApplication<span class="hljs-selector-class">.java</span> <span class="hljs-comment">// 消费端启动类</span><br>│       │   │                           └── Task<span class="hljs-selector-class">.java</span>                <span class="hljs-comment">// 消费端模拟调用任务</span><br>│       │   └── resources<br>│       │       └── application<span class="hljs-selector-class">.yml</span>       <span class="hljs-comment">// Spring Boot 配置文件</span><br>├── dubbo-samples-spring-boot-provider        <span class="hljs-comment">// 服务端模块</span><br>│   ├── pom<span class="hljs-selector-class">.xml</span><br>│   └── <span class="hljs-attribute">src</span><br>│       └── <span class="hljs-selector-tag">main</span><br>│           ├── java<br>│           │   └── org<br>│           │       └── apache<br>│           │           └── dubbo<br>│           │               └── springboot<br>│           │                   └── demo<br>│           │                       └── provider<br>│           │                           ├── DemoServiceImpl<span class="hljs-selector-class">.java</span>         <span class="hljs-comment">// 服务端实现类</span><br>│           │                           └── ProviderApplication<span class="hljs-selector-class">.java</span>     <span class="hljs-comment">// 服务端启动类</span><br>│           └── resources<br>│               └── application<span class="hljs-selector-class">.yml</span>       <span class="hljs-comment">// Spring Boot 配置文件</span><br>└── pom.xml<br></code></pre></td></tr></table></figure><ol><li><h3 id="启动注册中心-1"><a href="#启动注册中心-1" class="headerlink" title="启动注册中心"></a>启动注册中心</h3><ul><li>对于一个微服务化的应用来说，注册中心是不可或缺的一个组件。只有通过注册中心，消费端才可以成功发现服务端的地址信息，进而进行调用。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">Windows:<br>./mvnw.cmd clean compile <span class="hljs-built_in">exec</span>:java -pl tools/embedded-zookeeper<br><br>Linux / MacOS:<br>./mvnw clean compile <span class="hljs-built_in">exec</span>:java -pl tools/embedded-zookeeper<br><br>Docker:<br>docker run --name some-zookeeper -p 2181:2181 --restart always -d zookeeper<br></code></pre></td></tr></table></figure></li><li><h3 id="初始化项目-1"><a href="#初始化项目-1" class="headerlink" title="初始化项目"></a>初始化项目</h3></li><li><h3 id="添加-Maven-依赖-1"><a href="#添加-Maven-依赖-1" class="headerlink" title="添加 Maven 依赖"></a>添加 Maven 依赖</h3><ul><li><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dubbo.version</span>&gt;</span>3.2.0-beta.4<span class="hljs-tag">&lt;/<span class="hljs-name">dubbo.version</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring Boot --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Dubbo --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper-curator5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><build>    <pluginManagement>        <plugins>            <plugin>                <groupId>org.springframework.boot</groupId>                <artifactId>spring-boot-maven-plugin</artifactId>                <version>${spring-boot.version}</version>            </plugin>        </plugins>    </pluginManagement></build><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml">- 服务端与客户端</span><br><span class="language-xml"></span><br><span class="language-xml">  ```xml</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-samples-spring-boot-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;project.parent.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- dubbo --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper-curator5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-reload4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- spring boot starter --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="定义服务接口-1"><a href="#定义服务接口-1" class="headerlink" title="定义服务接口"></a>定义服务接口</h3></li><li><h3 id="定义服务端的实现-1"><a href="#定义服务端的实现-1" class="headerlink" title="定义服务端的实现"></a>定义服务端的实现</h3><ul><li>实现类通过添加注解<code>@DubboService</code>，可基于 Spring Boot 去发布 Dubbo 服务。</li></ul></li><li><h3 id="配置服务端-Yaml-配置文件"><a href="#配置服务端-Yaml-配置文件" class="headerlink" title="配置服务端 Yaml 配置文件"></a>配置服务端 Yaml 配置文件</h3><ul><li><code>resources</code> 资源文件夹下建立 <code>application.yml</code> 文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo-springboot-demo-provider</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">-1</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">zookeeper://$&#123;zookeeper.address:127.0.0.1&#125;:2181</span><br></code></pre></td></tr></table></figure></li><li><h3 id="配置消费端-Yaml-配置文件"><a href="#配置消费端-Yaml-配置文件" class="headerlink" title="配置消费端 Yaml 配置文件"></a>配置消费端 Yaml 配置文件</h3><ul><li><code>resources</code> 资源文件夹下建立 <code>application.yml</code> 文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo-springboot-demo-consumer</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">-1</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">zookeeper://$&#123;zookeeper.address:127.0.0.1&#125;:2181</span><br></code></pre></td></tr></table></figure></li><li><h3 id="基于-Spring-配置服务端启动类"><a href="#基于-Spring-配置服务端启动类" class="headerlink" title="基于 Spring 配置服务端启动类"></a>基于 Spring 配置服务端启动类</h3><ul><li><p>启动类添加注解<code>@EnableDubbo</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.springboot.demo.provider;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDubbo</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProviderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ProviderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="基于-Spring-配置消费端启动类"><a href="#基于-Spring-配置消费端启动类" class="headerlink" title="基于 Spring 配置消费端启动类"></a>基于 Spring 配置消费端启动类</h3><ul><li><p>启动类添加注解<code>@EnableDubbo</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.springboot.demo.consumer;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDubbo</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConsumerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="配置消费端请求任务"><a href="#配置消费端请求任务" class="headerlink" title="配置消费端请求任务"></a>配置消费端请求任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.springboot.demo.consumer;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.config.annotation.DubboReference;<br><span class="hljs-keyword">import</span> org.apache.dubbo.springboot.demo.DemoService;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br>    <span class="hljs-meta">@DubboReference</span> <span class="hljs-comment">// 从 Dubbo 获取了一个 RPC 订阅</span><br>    <span class="hljs-keyword">private</span> DemoService demoService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> demoService.sayHello(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Receive result ======&gt; &quot;</span> + result);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; Receive result ======&gt; &quot;</span> + demoService.sayHello(<span class="hljs-string">&quot;world&quot;</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                    Thread.currentThread().interrupt();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="启动应用测试"><a href="#启动应用测试" class="headerlink" title="启动应用测试"></a>启动应用测试</h3></li></ol></blockquote><h3 id="2-3、基于-Spring-XML-开发微服务应用"><a href="#2-3、基于-Spring-XML-开发微服务应用" class="headerlink" title="2.3、基于 Spring XML 开发微服务应用"></a>2.3、基于 Spring XML 开发微服务应用</h3><blockquote><p>步骤：</p><ol><li><h3 id="启动注册中心-2"><a href="#启动注册中心-2" class="headerlink" title="启动注册中心"></a>启动注册中心</h3><ul><li>对于一个微服务化的应用来说，注册中心是不可或缺的一个组件。只有通过注册中心，消费端才可以成功发现服务端的地址信息，进而进行调用。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">Windows:<br>./mvnw.cmd clean compile <span class="hljs-built_in">exec</span>:java -pl tools/embedded-zookeeper<br><br>Linux / MacOS:<br>./mvnw clean compile <span class="hljs-built_in">exec</span>:java -pl tools/embedded-zookeeper<br><br>Docker:<br>docker run --name some-zookeeper -p 2181:2181 --restart always -d zookeeper<br></code></pre></td></tr></table></figure></li><li><h3 id="初始化项目-2"><a href="#初始化项目-2" class="headerlink" title="初始化项目"></a>初始化项目</h3></li><li><h3 id="添加-Maven-依赖-2"><a href="#添加-Maven-依赖-2" class="headerlink" title="添加 Maven 依赖"></a>添加 Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-x-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="定义服务接口-2"><a href="#定义服务接口-2" class="headerlink" title="定义服务接口"></a>定义服务接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.samples.api;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GreetingsService</span> &#123;<br><br>    String <span class="hljs-title function_">sayHi</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="定义服务端的实现-2"><a href="#定义服务端的实现-2" class="headerlink" title="定义服务端的实现"></a>定义服务端的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.samples.provider;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.samples.api.GreetingsService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GreetingsService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHi</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hi, &quot;</span> + name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="配置服务端-XML-配置文件"><a href="#配置服务端-XML-配置文件" class="headerlink" title="配置服务端 XML 配置文件"></a>配置服务端 XML 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义应用名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;demo-provider&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义注册中心地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义实现类对应的 bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;greetingsService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.dubbo.samples.provider.GreetingsServiceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 定义服务信息，引用上面的 bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;org.apache.dubbo.samples.api.GreetingsService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;greetingsService&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="配置消费端-XML-配置文件"><a href="#配置消费端-XML-配置文件" class="headerlink" title="配置消费端 XML 配置文件"></a>配置消费端 XML 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义应用名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;demo-provider&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义注册中心地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义订阅信息，Dubbo 会在 Spring Context 中创建对应的 bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;greetingsService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;org.apache.dubbo.samples.api.GreetingsService&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="基于-Spring-配置服务端启动类-1"><a href="#基于-Spring-配置服务端启动类-1" class="headerlink" title="基于 Spring 配置服务端启动类"></a>基于 Spring 配置服务端启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.samples.provider;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;dubbo-demo-provider.xml&quot;</span>);<br>        context.start();<br><br>        <span class="hljs-comment">// 挂起主线程，防止退出</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>).await();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="基于-Spring-配置消费端启动类-1"><a href="#基于-Spring-配置消费端启动类-1" class="headerlink" title="基于 Spring 配置消费端启动类"></a>基于 Spring 配置消费端启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.samples.client;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.samples.api.GreetingsService;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;dubbo-demo-consumer.xml&quot;</span>);<br>        context.start();<br>        <span class="hljs-type">GreetingsService</span> <span class="hljs-variable">greetingsService</span> <span class="hljs-operator">=</span> (GreetingsService) context.getBean(<span class="hljs-string">&quot;greetingsService&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> greetingsService.sayHi(<span class="hljs-string">&quot;dubbo&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Receive result ======&gt; &quot;</span> + message);<br>        System.in.read();<br>        System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="启动应用测试-1"><a href="#启动应用测试-1" class="headerlink" title="启动应用测试"></a>启动应用测试</h3></li></ol></blockquote><h2 id="3、dubbo-admin"><a href="#3、dubbo-admin" class="headerlink" title="3、dubbo-admin"></a>3、dubbo-admin</h2><p>dubbo-admin 管理平台，是图形化的服务管理页面</p><p>从注册中心中获取到所有的提供者 &#x2F; 消费者进行配置管理</p><p>路由规则、动态配置、服务降级、访问控制、权重调整、负载均衡等管理功能</p><h3 id="安装使用步骤"><a href="#安装使用步骤" class="headerlink" title="安装使用步骤"></a>安装使用步骤</h3><blockquote><ol><li><h3 id="环境准备：安装-Node"><a href="#环境准备：安装-Node" class="headerlink" title="环境准备：安装 Node"></a>环境准备：安装 <code>Node</code></h3><ul><li>官网地址：<a href="https://nodejs.org/en/">node</a></li></ul></li><li><h3 id="下载-Dubbo-Admin"><a href="#下载-Dubbo-Admin" class="headerlink" title="下载 Dubbo-Admin"></a>下载 Dubbo-Admin</h3><ul><li>官网地址：<a href="https://github.com/apache/dubbo-admin">Dubbo-Admin</a></li></ul></li><li><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li>修改 zookeeper 地址：.\dubbo-admin-develop\dubbo-admin-server\src\main\resources\application.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 127.0.0.1 =&gt; 替换成zookeeper的安装地址（虚拟机IP地址）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># admin.registry.address 注册中心</span><br><span class="hljs-attr">admin.registry.address</span>=<span class="hljs-string">zookeeper://127.0.0.1:2181</span><br><span class="hljs-comment"># admin.config-center 配置中心</span><br><span class="hljs-attr">admin.config-center</span>=<span class="hljs-string">zookeeper://127.0.0.1:2181</span><br><span class="hljs-comment"># admin.metadata-report.address 元数据中心</span><br><span class="hljs-attr">admin.metadata-report.address</span>=<span class="hljs-string">zookeeper://127.0.0.1:2181</span><br></code></pre></td></tr></table></figure></li><li><h3 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h3><ul><li>在 <code>dubbo-admin-develop</code> 目录执行打包命令：<code>mvn  clean package</code></li></ul></li><li><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><ul><li>切换到目录：dubbo-Admin-develop\dubbo-admin-distribution\target&gt;</li><li>执行命令：<code>java -jar .\dubbo-admin-0.1.jar</code></li></ul></li><li><h3 id="前台后端"><a href="#前台后端" class="headerlink" title="前台后端"></a>前台后端</h3><ul><li>dubbo-admin-ui 目录下执行命令：<code>npm run dev</code></li></ul></li><li><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><ul><li>访问地址：<code>http://localhost:8081/</code></li></ul></li></ol></blockquote><h2 id="4、dubbo-的高级特性"><a href="#4、dubbo-的高级特性" class="headerlink" title="4、dubbo 的高级特性"></a>4、dubbo 的高级特性</h2><h3 id="4-1、序列化"><a href="#4-1、序列化" class="headerlink" title="4.1、序列化"></a>4.1、序列化</h3><p>Dubbo 内部已将序列化和反序列化的过程内部封装</p><p>只需要在定义实体类时实现 Serializable 接口即可</p><h3 id="4-2、超时与重试"><a href="#4-2、超时与重试" class="headerlink" title="4.2、超时与重试"></a>4.2、超时与重试</h3><p>超时</p><p>服务消费者在调用服务提供者的时候发生了阻塞、等待的情形，这个时候，服务消费者会一直等待下去。</p><p>在某个峰值时刻，大量的请求都在同时请求服务消费者，会造成线程的大量堆积，势必会造成雪崩。</p><p>dubbo 利用超时机制来解决这个问题，设置一个超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。</p><p>使用 timeout 属性配置超时时间，默认值 1000，单位毫秒。</p><p>重试</p><p>设置了超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。</p><p>如果出现网络抖动，则这一次请求就会失败。</p><p>Dubbo 提供重试机制来避免类似问题的发生。</p><p>通过 retries 属性来设置重试次数。默认为 2 次。</p><h3 id="4-3、多版本"><a href="#4-3、多版本" class="headerlink" title="4.3、多版本"></a>4.3、多版本</h3><p>灰度发布：当出现新功能时，会让一部分用户先使用新功能，用户反馈没问题时，再将所有用户迁移到新功能。</p><p>dubbo 中使用 version 属性来设置和调用同一个接口的不同版本</p><h3 id="4-4、负载均衡"><a href="#4-4、负载均衡" class="headerlink" title="4.4、负载均衡"></a>4.4、负载均衡</h3><p>负载均衡策略（4 种）：</p><ul><li>Random ：按权重随机，默认值。按权重设置随机概率。</li><li>RoundRobin ：按权重轮询。</li><li>LeastActive：最少活跃调用数，相同活跃数的随机。</li><li>ConsistentHash：一致性 Hash，相同参数的请求总是发到同一提供者。</li></ul><h3 id="4-5、集群容错"><a href="#4-5、集群容错" class="headerlink" title="4.5、集群容错"></a>4.5、集群容错</h3><p>集群容错模式：</p><ul><li>Failover Cluster：失败重试。默认值。当出现失败，重试其它服务器 ，默认重试 2 次，使用 retries 配置。一般用于读操作。</li><li>Failfast Cluster ：快速失败，只发起一次调用，失败立即报错。通常用于写操作。</li><li>Failsafe Cluster ：失败安全，出现异常时，直接忽略。返回一个空结果。</li><li>Failback Cluster ：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li><li>Forking Cluster ：并行调用多个服务器，只要一个成功即返回。</li><li>Broadcast Cluster ：广播调用所有提供者，逐个调用，任意一台报错则报错。</li></ul><h3 id="4-6、服务降级"><a href="#4-6、服务降级" class="headerlink" title="4.6、服务降级"></a>4.6、服务降级</h3>]]></content>
    
    
    <categories>
      
      <category>Dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2024/04/25/ElasticSearch/"/>
    <url>/2024/04/25/ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><blockquote><p>官方使用文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html">网址</a></p></blockquote><h2 id="1、初识-ES"><a href="#1、初识-ES" class="headerlink" title="1、初识 ES"></a>1、初识 ES</h2><h3 id="1-1、了解-es"><a href="#1-1、了解-es" class="headerlink" title="1.1、了解 es"></a>1.1、了解 es</h3><blockquote><p>Elasticsearch 是一个开源的分布式搜索和分析引擎，主要用于实时搜索、分析大数据、日志和监控数据等。它构建于 Apache Lucene 基础之上，并提供了简单易用的 RESTful API 接口，使得用户可以方便地进行数据的索引、搜索和分析。</p></blockquote><h4 id="1-1-1、Elasticsearch-的作用"><a href="#1-1-1、Elasticsearch-的作用" class="headerlink" title="1.1.1、Elasticsearch 的作用"></a>1.1.1、Elasticsearch 的作用</h4><ol><li><strong>搜索引擎</strong>：Elasticsearch 可以快速、实时地搜索大规模数据。它支持全文搜索、结构化搜索、地理空间搜索等多种搜索方式，能够高效地处理海量数据的搜索请求。</li><li><strong>实时数据分析</strong>：Elasticsearch 能够处理大规模的数据，并且支持实时的数据分析。用户可以将数据存储到 Elasticsearch 中，然后通过聚合、过滤、排序等操作，对数据进行即时分析和可视化。</li><li><strong>日志和事件数据分析</strong>：Elasticsearch 可以用于实时分析和监控日志数据、应用程序事件等。通过存储、索引和分析大量的日志数据，可以帮助用户快速发现问题、优化性能或者监控系统状态。</li><li><strong>全文检索</strong>：Elasticsearch 提供了全文检索功能，能够处理各种类型的文档，包括文本、JSON、地理位置数据等。用户可以通过 Elasticsearch 进行复杂的文本搜索和分析，如匹配、短语搜索、近似搜索等。</li><li><strong>分布式数据存储和处理</strong>：Elasticsearch 是一个分布式系统，能够自动将数据分散存储在多个节点上，并提供了可靠的数据复制和故障恢复机制。这使得 Elasticsearch 能够处理大规模数据，并且具有高可用性和可扩展性。</li></ol><p>Elasticsearch 结合 kibana、Logstash、Beats，也就是 elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域。而且 Elasticsearch 是 elastic stack 的核心，负责存储、搜索、分析数据。</p><h4 id="1-1-2、Elasticsearch-和-Lucene"><a href="#1-1-2、Elasticsearch-和-Lucene" class="headerlink" title="1.1.2、Elasticsearch 和 Lucene"></a>1.1.2、Elasticsearch 和 Lucene</h4><p>Elasticsearch 底层是基于<strong>lucene</strong>来实现的。</p><p><strong>Lucene</strong>是一个 Java 语言的搜索引擎类库，是 Apache 公司的顶级项目，由 DougCutting 于 1999 年研发。</p><blockquote><p>官网地址：<a href="https://lucene.apache.org/">https://lucene.apache.org/</a></p></blockquote><h4 id="1-1-3、总结"><a href="#1-1-3、总结" class="headerlink" title="1.1.3、总结"></a>1.1.3、总结</h4><p>什么是 elasticsearch？</p><ul><li>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</li></ul><p>什么是 elastic stack（ELK）？</p><ul><li>是以 elasticsearch 为核心的技术栈，包括 beats、Logstash、kibana、elasticsearch</li></ul><p>什么是 Lucene？</p><ul><li>是 Apache 的开源搜索引擎类库，提供了搜索引擎的核心 API</li></ul><h3 id="1-2-倒排索引"><a href="#1-2-倒排索引" class="headerlink" title="1.2.倒排索引"></a>1.2.倒排索引</h3><blockquote><p>倒排索引的概念是基于 MySQL 的正向索引而言的。</p></blockquote><h4 id="1-2-1、正向索引"><a href="#1-2-1、正向索引" class="headerlink" title="1.2.1、正向索引"></a>1.2.1、正向索引</h4><p>什么是正向索引？</p><ul><li>正向索引是将文档中的内容按照文档顺序进行索引存储的一种方式。</li><li>通常，正向索引包含文档的全部内容或者特定字段的内容，如标题、正文、作者等。</li><li>在正向索引中，每个文档都有一个唯一的标识符（如文档 ID），以便快速定位和检索。</li><li>正向索引适用于快速获取文档的内容，但不适合针对内容的关键字进行搜索，因为它并未按照关键字进行组织。</li></ul><h4 id="1-2-2、倒排索引"><a href="#1-2-2、倒排索引" class="headerlink" title="1.2.2、倒排索引"></a>1.2.2、倒排索引</h4><p>倒排索引中有两个非常重要的概念：</p><ul><li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p>什么是倒排索引</p><ul><li>倒排索引是将文档中的关键字与包含这些关键字的文档进行关联的索引方式。</li><li>它通过将文档中出现的每个单词或短语映射到文档的列表中，以实现快速的关键字搜索。</li><li>对于每个关键字，倒排索引会存储包含该关键字的文档列表及其出现位置，以便支持全文搜索、短语搜索等操作。</li><li>倒排索引通常是搜索引擎中最常用的索引方式，因为它能够有效地支持关键字搜索，提高搜索效率。</li></ul><h4 id="1-2-3、正向和倒排"><a href="#1-2-3、正向和倒排" class="headerlink" title="1.2.3、正向和倒排"></a>1.2.3、正向和倒排</h4><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p><ul><li><p><strong>正向索引</strong>是最传统的，根据 id 索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。</p></li><li><p>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的 id，然后根据 id 获取文档。是<strong>根据词条找文档的过程</strong>。</p></li></ul><p>那么两者方式的优缺点是什么呢？</p><p><strong>正向索引</strong>：</p><ul><li>优点：<ul><li>可以给多个字段创建索引</li><li>根据索引字段搜索、排序速度非常快</li></ul></li><li>缺点：<ul><li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</li></ul></li></ul><p><strong>倒排索引</strong>：</p><ul><li>优点：<ul><li>根据词条搜索、模糊搜索时，速度非常快</li></ul></li><li>缺点：<ul><li>只能给词条创建索引，而不是字段</li><li>无法根据字段做排序</li></ul></li></ul><h3 id="1-3、es-的一些概念"><a href="#1-3、es-的一些概念" class="headerlink" title="1.3、es 的一些概念"></a>1.3、es 的一些概念</h3><h4 id="1-3-1、文档和字段"><a href="#1-3-1、文档和字段" class="headerlink" title="1.3.1、文档和字段"></a>1.3.1、文档和字段</h4><p>elasticsearch 是面向<strong>文档（Document）</strong>存储的，可以是数据库中的一条商品数据，一个订单信息等。文档数据会被序列化为 json 格式后存储在 elasticsearch 中。而 Json 文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p><h4 id="1-3-2、索引和映射"><a href="#1-3-2、索引和映射" class="headerlink" title="1.3.2、索引和映射"></a>1.3.2、索引和映射</h4><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p><p>例如：</p><ul><li>所有用户文档，就可以组织在一起，称为用户的索引；</li><li>所有商品的文档，可以组织在一起，称为商品的索引；</li><li>所有订单的文档，可以组织在一起，称为订单的索引；</li></ul><p>因此可以把索引当做是数据库中的表。数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。而索引库中有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p><h4 id="1-3-3、mysql-与-elasticsearch"><a href="#1-3-3、mysql-与-elasticsearch" class="headerlink" title="1.3.3、mysql 与 elasticsearch"></a>1.3.3、mysql 与 elasticsearch</h4><p>mysql 与 elasticsearch 的概念做一下对比：</p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是 JSON 格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是 JSON 文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL 是 elasticsearch 提供的 JSON 风格的请求语句，用来操作 elasticsearch，实现 CRUD</td></tr></tbody></table><ul><li><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p></li><li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p></li></ul><p>在项目开发中往往是两者结合使用：</p><ul><li>对安全性要求较高的写操作，使用 mysql 实现</li><li>对查询性能要求较高的搜索需求，使用 elasticsearch 实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><p><img src="/images/Es-EsAndMysql.png" alt="ES与MySQL"></p><h3 id="1-4、安装-es、kibana"><a href="#1-4、安装-es、kibana" class="headerlink" title="1.4、安装 es、kibana"></a>1.4、安装 es、kibana</h3><h4 id="1-4-1-安装-es、kibana"><a href="#1-4-1-安装-es、kibana" class="headerlink" title="1.4.1.安装 es、kibana"></a>1.4.1.安装 es、kibana</h4><h5 id="1-4-1-1、创建网络"><a href="#1-4-1-1、创建网络" class="headerlink" title="1.4.1.1、创建网络"></a>1.4.1.1、创建网络</h5><p>由于需要让 es 和 kibana 容器互联，因此需先创建一个网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker network create es-net<br></code></pre></td></tr></table></figure><h5 id="1-4-1-2、加载镜像"><a href="#1-4-1-2、加载镜像" class="headerlink" title="1.4.1.2、加载镜像"></a>1.4.1.2、加载镜像</h5><p>将下载好的安装包上传到虚拟机后运行命令加载即可（也可以拉取）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 导入数据</span><br>docker load -i es.tar<br>docker load -i kibana.tar<br></code></pre></td></tr></table></figure><h5 id="1-4-1-3、运行"><a href="#1-4-1-3、运行" class="headerlink" title="1.4.1.3、运行"></a>1.4.1.3、运行</h5><p>部署单点 es</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>--name es \<br>    -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \<br>    -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>    -v es-data:/usr/share/elasticsearch/data \<br>    -v es-plugins:/usr/share/elasticsearch/plugins \<br>    --privileged \<br>    --network es-net \<br>    -p 9200:9200 \<br>    -p 9300:9300 \<br>elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定 es 的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定 es 的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定 es 的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为 es-net 的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul><p>部署 kibana</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>--name kibana \<br>-e ELASTICSEARCH_HOSTS=http://es:9200 \<br>--network=es-net \<br>-p 5601:5601  \<br>kibana:7.12.1<br></code></pre></td></tr></table></figure><p>命令解释：</p><ul><li><code>--network es-net</code> ：加入一个名为 es-net 的网络中，与 elasticsearch 在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置 elasticsearch 的地址，因为 kibana 已经与 elasticsearch 在一个网络，因此可以用容器名直接访问 elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><blockquote><p>查看 kibana 运行日志：docker logs -f kibana</p></blockquote><p>在浏览器中输入地址访问：<a href="http://192.168.150.101:9200/">http://192.168.150.101:9200</a> 即可看到 elasticsearch 的响应结果。</p><p>在浏览器输入地址访问：<a href="http://192.168.150.101:5601/">http://192.168.150.101:5601</a> 即可看到 kibana 的响应结果。</p><blockquote><p>kibana 中提供 DevTools 界面。该界面中可以编写 DSL 来操作 elasticsearch，并且对 DSL 语句有自动补全功能。</p></blockquote><h4 id="1-4-2、分词器"><a href="#1-4-2、分词器" class="headerlink" title="1.4.2、分词器"></a>1.4.2、分词器</h4><h5 id="1-4-2-1、在线安装-ik-插件（较慢）"><a href="#1-4-2-1、在线安装-ik-插件（较慢）" class="headerlink" title="1.4.2.1、在线安装 ik 插件（较慢）"></a>1.4.2.1、在线安装 ik 插件（较慢）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器内部</span><br>docker exec -it elasticsearch /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在线下载并安装</span><br>./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">退出</span><br>exit<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启容器</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure><h5 id="1-4-2-2、离线安装-ik-插件（推荐）"><a href="#1-4-2-2、离线安装-ik-插件（推荐）" class="headerlink" title="1.4.2.2、离线安装 ik 插件（推荐）"></a>1.4.2.2、离线安装 ik 插件（推荐）</h5><h6 id="1）查看数据卷目录"><a href="#1）查看数据卷目录" class="headerlink" title="1）查看数据卷目录"></a>1）查看数据卷目录</h6><p>由于数据卷已挂载，因此可以通过下面命令查看 elasticsearch 的数据卷目录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume inspect es-plugins<br></code></pre></td></tr></table></figure><p>显示结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CreatedAt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-05-06T10:06:34+08:00&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Mountpoint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/docker/volumes/es-plugins/_data&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es-plugins&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>说明 plugins 目录被挂载到： <code>/var/lib/docker/volumes/es-plugins/_data </code> 目录中。</p><h6 id="2）解压缩分词器安装包"><a href="#2）解压缩分词器安装包" class="headerlink" title="2）解压缩分词器安装包"></a>2）解压缩分词器安装包</h6><p>将下载的 ik 分词器压缩包进行解压缩，并且将目录重命名为 ik</p><h6 id="3）上传到-es-容器的插件数据卷中"><a href="#3）上传到-es-容器的插件数据卷中" class="headerlink" title="3）上传到 es 容器的插件数据卷中"></a>3）上传到 es 容器的插件数据卷中</h6><p>将 <code>ik</code> 目录上传到 <code>/var/lib/docker/volumes/es-plugins/_data </code> 目录中</p><h6 id="4）重启容器"><a href="#4）重启容器" class="headerlink" title="4）重启容器"></a>4）重启容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br>docker restart es<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看es日志</span><br>docker logs -f es<br></code></pre></td></tr></table></figure><h5 id="1-4-2-3、扩展词词典"><a href="#1-4-2-3、扩展词词典" class="headerlink" title="1.4.2.3、扩展词词典"></a>1.4.2.3、扩展词词典</h5><p>IK 分词器提供扩展词汇的功能：将新型（新兴）词汇加入词典中</p><p>1）打开 IK 分词器 <code>/var/lib/docker/volumes/es-plugins/_data/config</code> 目录，在 IKAnalyzer.cfg.xml 配置文件内容添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3）新建一个 ext.dic，可以参考 config 目录下复制一个配置文件进行修改</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 添加新兴词汇在该配置文件</span><br><span class="hljs-attr">欧里给</span><br></code></pre></td></tr></table></figure><p>4）重启 elasticsearch</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker restart es<br><br><span class="hljs-comment"># 查看 日志</span><br>docker logs -f elasticsearch<br></code></pre></td></tr></table></figure><blockquote><p>注意当前 <code>ext.di</code>c 文件的编码必须是 UTF-8 格式，严禁使用 Windows 记事本编辑</p></blockquote><h5 id="1-4-2-4、-停用词词典"><a href="#1-4-2-4、-停用词词典" class="headerlink" title="1.4.2.4、 停用词词典"></a>1.4.2.4、 停用词词典</h5><p>在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。</p><p>1）IKAnalyzer.cfg.xml 配置文件内容添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3）在 stopword.dic 添加停用词</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">习大大</span><br></code></pre></td></tr></table></figure><p>4）重启 elasticsearch</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 重启服务</span><br>docker restart elasticsearch<br>docker restart kibana<br><br><span class="hljs-comment"># 查看 日志</span><br>docker logs -f elasticsearch<br></code></pre></td></tr></table></figure><blockquote><p>注意当前 <code>stopword.dic</code> 文件的编码必须是 UTF-8 格式，严禁使用 Windows 记事本编辑</p></blockquote><h4 id="1-4-3、总结"><a href="#1-4-3、总结" class="headerlink" title="1.4.3、总结"></a>1.4.3、总结</h4><p>分词器的作用是什么？</p><ul><li>创建倒排索引时对文档分词</li><li>用户搜索时，对输入的内容分词</li></ul><p>IK 分词器有几种模式？</p><ul><li>ik_smart：智能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><p>IK 分词器如何拓展词条？如何停用词条？</p><ul><li>利用 config 目录的 IkAnalyzer.cfg.xml 文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条或者停用词条</li></ul><h2 id="2、索引库操作"><a href="#2、索引库操作" class="headerlink" title="2、索引库操作"></a>2、索引库操作</h2><blockquote><p>索引库就类似数据库表，mapping 映射就类似表的结构。向 es 中存储数据，必须先创建“库”和“表”。</p></blockquote><h3 id="2-1、mapping-映射属性"><a href="#2-1、mapping-映射属性" class="headerlink" title="2.1、mapping 映射属性"></a>2.1、mapping 映射属性</h3><p>mapping 是对索引库中文档的约束，常见的 mapping 属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip 地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为 true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><p>例如下面的 json 文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">52.1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;isMarried&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java-Es&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;goes@goes.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">99.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">99.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">98.9</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的每个字段映射（mapping）：</p><ul><li>age：类型为 integer；参与搜索，因此需要 index 为 true；无需分词器</li><li>weight：类型为 float；参与搜索，因此需要 index 为 true；无需分词器</li><li>isMarried：类型为 boolean；参与搜索，因此需要 index 为 true；无需分词器</li><li>info：类型为字符串，需要分词，因此是 text；参与搜索，因此需要 index 为 true；分词器可以用 ik_smart</li><li>email：类型为字符串，但是不需要分词，因此是 keyword；不参与搜索，因此需要 index 为 false；无需分词器</li><li>score：虽然是数组，但是我们只看元素的类型，类型为 float；参与搜索，因此需要 index 为 true；无需分词器</li><li>name：类型为 object，需要定义多个子属性<ul><li>name.firstName；类型为字符串，但是不需要分词，因此是 keyword；参与搜索，因此需要 index 为 true；无需分词器</li><li>name.lastName；类型为字符串，但是不需要分词，因此是 keyword；参与搜索，因此需要 index 为 true；无需分词器</li></ul></li></ul><h3 id="2-2、索引库的-CRUD"><a href="#2-2、索引库的-CRUD" class="headerlink" title="2.2、索引库的 CRUD"></a>2.2、索引库的 CRUD</h3><h4 id="2-2-1、创建索引库和映射"><a href="#2-2-1、创建索引库和映射" class="headerlink" title="2.2.1、创建索引库和映射"></a>2.2.1、创建索引库和映射</h4><p><strong>基本语法：</strong></p><ul><li>请求方式：PUT</li><li>请求路径：&#x2F;索引库名，可以自定义</li><li>请求参数：mapping 映射</li></ul><p><strong>格式：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名称<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;子字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// ...略</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">PUT /goes<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;info&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;email&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;falsae&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;firstName&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      // ... 略<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-查询索引库"><a href="#2-2-2-查询索引库" class="headerlink" title="2.2.2.查询索引库"></a>2.2.2.查询索引库</h4><p><strong>基本语法：</strong></p><ul><li><p>请求方式：GET</p></li><li><p>请求路径：&#x2F;索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库名<br></code></pre></td></tr></table></figure><h4 id="2-2-3、修改索引库"><a href="#2-2-3、修改索引库" class="headerlink" title="2.2.3、修改索引库"></a>2.2.3、修改索引库</h4><p>一旦创建，无法修改 mapping。虽然无法修改 mapping 中已有的字段，但是却允许添加新的字段到 mapping 中，因为不会对倒排索引产生影响。</p><p><strong>语法说明：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;新字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-4-删除索引库"><a href="#2-2-4-删除索引库" class="headerlink" title="2.2.4.删除索引库"></a>2.2.4.删除索引库</h4><p><strong>语法：</strong></p><ul><li><p>请求方式：DELETE</p></li><li><p>请求路径：&#x2F;索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式：</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">DELETE</span> /索引库名<br></code></pre></td></tr></table></figure><h4 id="2-2-5-总结"><a href="#2-2-5-总结" class="headerlink" title="2.2.5.总结"></a>2.2.5.总结</h4><p>索引库操作有哪些？</p><ul><li>创建索引库：PUT &#x2F;索引库名</li><li>查询索引库：GET &#x2F;索引库名</li><li>删除索引库：DELETE &#x2F;索引库名</li><li>添加字段：PUT &#x2F;索引库名&#x2F;_mapping</li></ul><h2 id="3、文档操作"><a href="#3、文档操作" class="headerlink" title="3、文档操作"></a>3、文档操作</h2><h3 id="3-1、新增文档"><a href="#3-1、新增文档" class="headerlink" title="3.1、新增文档"></a>3.1、新增文档</h3><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /索引库名/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;子属性1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;子属性2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值4&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ...</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /goes/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java-Es&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;goes@goes.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-2、查询文档"><a href="#3-2、查询文档" class="headerlink" title="3.2、查询文档"></a>3.2、查询文档</h3><p>根据 rest 风格，新增是 post，查询应该是 get。不过查询一般都需要条件，需要把文档 id 带上。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名称<span class="hljs-punctuation">&#125;</span>/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>通过 kibana 查看数据：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> / goes / _doc / <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="3-3、删除文档"><a href="#3-3、删除文档" class="headerlink" title="3.3、删除文档"></a>3.3、删除文档</h3><p>删除使用 DELETE 请求，同样，需要根据 id 进行删除：</p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">DELETE</span> / &#123; 索引库名 &#125; / _doc / id值<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"># 根据id删除数据<br>DELETE /goes/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="3-4、修改文档"><a href="#3-4、修改文档" class="headerlink" title="3.4、修改文档"></a>3.4、修改文档</h3><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>增量修改：修改文档中的部分字段</li></ul><h4 id="3-4-1、全量修改"><a href="#3-4-1、全量修改" class="headerlink" title="3.4.1、全量修改"></a>3.4.1、全量修改</h4><p>全量修改是覆盖原来的文档，其本质是：</p><ul><li>根据指定的 id 删除文档</li><li>新增一个相同 id 的文档</li></ul><p><strong>注意</strong>：如果根据 id 删除时，id 不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ... 略</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /goes/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java-Es&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;goes@goes.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-2、增量修改"><a href="#3-4-2、增量修改" class="headerlink" title="3.4.2、增量修改"></a>3.4.2、增量修改</h4><p>增量修改是只修改指定 id 匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_update/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新的值&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /goes/_update/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;goes@goes.com&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5.总结"></a>3.5.总结</h3><p>文档操作有哪些？</p><ul><li>创建文档：POST &#x2F;{索引库名}&#x2F;_doc&#x2F;文档 id { json 文档 }</li><li>查询文档：GET &#x2F;{索引库名}&#x2F;_doc&#x2F;文档 id</li><li>删除文档：DELETE &#x2F;{索引库名}&#x2F;_doc&#x2F;文档 id</li><li>修改文档：<ul><li>全量修改：PUT &#x2F;{索引库名}&#x2F;_doc&#x2F;文档 id { json 文档 }</li><li>增量修改：POST &#x2F;{索引库名}&#x2F;_update&#x2F;文档 id { “doc”: {字段}}</li></ul></li></ul><h2 id="4、RestAPI"><a href="#4、RestAPI" class="headerlink" title="4、RestAPI"></a>4、RestAPI</h2><p>客户端的本质是组装 DSL 语句，通过 http 请求发送给 ES。</p><p>官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p>其中的 <code>Java Rest Client</code> 又包括两种：</p><ul><li>Java Low Level Rest Client</li><li>Java High Level Rest Client</li></ul><h3 id="4-0、准备"><a href="#4-0、准备" class="headerlink" title="4.0、准备"></a>4.0、准备</h3><h4 id="4-0-1、创建数据库并导入数据、创建项目"><a href="#4-0-1、创建数据库并导入数据、创建项目" class="headerlink" title="4.0.1、创建数据库并导入数据、创建项目"></a>4.0.1、创建数据库并导入数据、创建项目</h4><p>创建数据库和表，数据库数据的数据结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_hotel` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店id&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店名称；例：7天酒店&#x27;</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店地址；例：航头路&#x27;</span>,<br>  `price` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店价格；例：329&#x27;</span>,<br>  `score` <span class="hljs-type">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店评分；例：45，就是4.5分&#x27;</span>,<br>  `brand` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店品牌；例：如家&#x27;</span>,<br>  `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;所在城市；例：上海&#x27;</span>,<br>  `star_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店星级，从低到高分别是：1星到5星，1钻到5钻&#x27;</span>,<br>  `business` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;商圈；例：虹桥&#x27;</span>,<br>  `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;纬度；例：31.2497&#x27;</span>,<br>  `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;经度；例：120.3925&#x27;</span>,<br>  `pic` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店图片；例:/img/1.jpg&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><p>配置文件 application.yaml 内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://mysql:3306/heima?useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">cn.itcast:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attr">pattern:</span><br>    <span class="hljs-attr">dateformat:</span> <span class="hljs-string">MM-dd</span> <span class="hljs-string">HH:mm:ss:SSS</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.goes.hotel.pojo</span><br></code></pre></td></tr></table></figure><h4 id="4-0-2、mapping-映射分析"><a href="#4-0-2、mapping-映射分析" class="headerlink" title="4.0.2、mapping 映射分析"></a>4.0.2、mapping 映射分析</h4><p>创建索引库，最关键的是 mapping 映射，而 mapping 映射要考虑的信息包括：</p><ul><li>字段名</li><li>字段数据类型</li><li>是否参与搜索</li><li>是否需要分词</li><li>如果分词，分词器是什么？</li></ul><p>其中：</p><ul><li>字段名、字段数据类型，可以参考数据表结构的名称和类型</li><li>是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索</li><li>是否分词呢要看内容，内容如果是一个整体就无需分词，反之则要分词</li><li>分词器，我们可以统一使用 ik_max_word</li></ul><p>构建酒店数据的索引库结构:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /hotel<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;starName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;business&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;geo_point&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>特殊字段说明：</p><ul><li>location：地理坐标，里面包含精度、纬度</li><li>all：一个组合字段，其目的是将多字段的值 利用 copy_to 合并，提供给用户搜索</li></ul><p>ES 中支持两种地理坐标数据类型：</p><ul><li>geo_point：由纬度（latitude）和经度（longitude）确定的一个点。例如：”32.8752345, 120.2981576”</li><li>geo_shape：有多个 geo_point 组成的复杂几何图形。例如一条直线，”LINESTRING (-77.03653 38.897676, -77.009051 38.889939)”</li></ul><p>copy_to 说明：</p><ul><li><p>字段拷贝可以使用 copy_to 属性将当前字段拷贝到指定字段。</p><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-0-3、初始化-RestClient"><a href="#4-0-3、初始化-RestClient" class="headerlink" title="4.0.3、初始化 RestClient"></a>4.0.3、初始化 RestClient</h4><p>1）引入 es 的 RestHighLevelClient 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>&lt;/dependency<br></code></pre></td></tr></table></figure><p>2）SpringBoot 默认的 ES 版本是 7.6.2，因此需要覆盖默认的 ES 版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3）初始化 RestHighLevelClient：</p><p>初始化的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>        HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>));<br></code></pre></td></tr></table></figure><p>为了单元测试方便，创建一个测试类 HotelIndexTest，并将初始化的代码编写在@BeforeEach 方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.http.HttpHost;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelIndexTest</span> &#123;<br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>                HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>        ));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1、创建索引库"><a href="#4-1、创建索引库" class="headerlink" title="4.1、创建索引库"></a>4.1、创建索引库</h3><h4 id="4-1-1、代码解读"><a href="#4-1-1、代码解读" class="headerlink" title="4.1.1、代码解读"></a>4.1.1、代码解读</h4><p>创建索引库的 API 如下：</p><p><img src="/images/es-restapi.png" alt="RestApi"></p><p>代码分为三步：</p><ul><li>1）创建 Request 对象。因为是创建索引库的操作，因此 Request 是 CreateIndexRequest。</li><li>2）添加请求参数，其实就是 DSL 的 JSON 参数部分。因为 json 字符串很长，这里是定义了静态字符串常量 MAPPING_TEMPLATE，让代码看起来更加优雅。</li><li>3）发送请求，client.indices()方法的返回值是 IndicesClient 类型，封装了所有与索引库操作有关的方法。</li></ul><h4 id="4-1-2、完整示例"><a href="#4-1-2、完整示例" class="headerlink" title="4.1.2、完整示例"></a>4.1.2、完整示例</h4><p>在项目创建常量包 constants ，并在该包下创建一个类定义 mapping 映射的 JSON 字符串常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MAPPING_TEMPLATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;address\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;score\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;city\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;starName\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;business\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;location\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;pic\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写单元测试，实现创建索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求的参数：DSL语句</span><br>    request.source(MAPPING_TEMPLATE, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.indices().create(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2、删除索引库"><a href="#4-2、删除索引库" class="headerlink" title="4.2、删除索引库"></a>4.2、删除索引库</h3><p>删除索引库的 DSL 语句非常简单：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /hotel<br></code></pre></td></tr></table></figure><p>与创建索引库相比：</p><ul><li>请求方式从 PUT 变为 DELTE</li><li>请求路径不变</li><li>无请求参数</li></ul><p>所以代码的差异，注意体现在 Request 对象上。依然是三步走：</p><ul><li>1）创建 Request 对象。这次是 DeleteIndexRequest 对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用 delete 方法</li></ul><p>编写单元测试，实现删除索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.indices().delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3、判断索引库是否存在"><a href="#4-3、判断索引库是否存在" class="headerlink" title="4.3、判断索引库是否存在"></a>4.3、判断索引库是否存在</h3><p>判断索引库是否存在，本质就是查询，对应的 DSL 是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel<br></code></pre></td></tr></table></figure><p>因此与删除的 Java 代码流程是类似的。依然是三步走：</p><ul><li>1）创建 Request 对象。这次是 GetIndexRequest 对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用 exists 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testExistsHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.输出</span><br>    System.err.println(exists ? <span class="hljs-string">&quot;索引库已经存在！&quot;</span> : <span class="hljs-string">&quot;索引库不存在！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4、总结"><a href="#4-4、总结" class="headerlink" title="4.4、总结"></a>4.4、总结</h3><p>JavaRestClient 操作 elasticsearch 的流程基本类似。核心是 client.indices()方法来获取索引库的操作对象。</p><p>索引库操作的基本步骤：</p><ul><li>初始化 RestHighLevelClient</li><li>创建 XxxIndexRequest。XXX 是 Create、Get、Delete</li><li>准备 DSL（ Create 时需要，其它是无参）</li><li>发送请求。调用 RestHighLevelClient#indices().xxx()方法，xxx 是 create、exists、delete</li></ul><h2 id="5、RestClient-操作文档"><a href="#5、RestClient-操作文档" class="headerlink" title="5、RestClient 操作文档"></a>5、RestClient 操作文档</h2><p>为了与索引库操作分离，参加一个测试类，做两件事情：</p><ul><li>初始化 RestHighLevelClient</li><li>酒店数据在数据库，因此需要注入该接口 IHotelService 去查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.itcast.hotel.pojo.Hotel;<br><span class="hljs-keyword">import</span> cn.itcast.hotel.service.IHotelService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDocumentTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService hotelService;<br><br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>                HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>        ));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.client.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-1、新增文档"><a href="#5-1、新增文档" class="headerlink" title="5.1、新增文档"></a>5.1、新增文档</h3><p>将数据库的酒店数据查询出来，写入 elasticsearch 中。</p><h4 id="5-1-1、索引库实体类"><a href="#5-1-1、索引库实体类" class="headerlink" title="5.1.1、索引库实体类"></a>5.1.1、索引库实体类</h4><p>数据库查询后的结果是一个 Hotel 类型的对象。结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;tb_hotel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hotel</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.INPUT)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String longitude;<br>    <span class="hljs-keyword">private</span> String latitude;<br>    <span class="hljs-keyword">private</span> String pic;<br>&#125;<br></code></pre></td></tr></table></figure><p>与索引库结构存在差异：</p><ul><li>longitude 和 latitude 需要合并为 location</li></ul><p>因此需要定义一个新的类型，与索引库结构吻合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDoc</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> String pic;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HotelDoc</span><span class="hljs-params">(Hotel hotel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = hotel.getId();<br>        <span class="hljs-built_in">this</span>.name = hotel.getName();<br>        <span class="hljs-built_in">this</span>.address = hotel.getAddress();<br>        <span class="hljs-built_in">this</span>.price = hotel.getPrice();<br>        <span class="hljs-built_in">this</span>.score = hotel.getScore();<br>        <span class="hljs-built_in">this</span>.brand = hotel.getBrand();<br>        <span class="hljs-built_in">this</span>.city = hotel.getCity();<br>        <span class="hljs-built_in">this</span>.starName = hotel.getStarName();<br>        <span class="hljs-built_in">this</span>.business = hotel.getBusiness();<br>        <span class="hljs-built_in">this</span>.location = hotel.getLatitude() + <span class="hljs-string">&quot;, &quot;</span> + hotel.getLongitude();<br>        <span class="hljs-built_in">this</span>.pic = hotel.getPic();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-1-2、语法说明"><a href="#5-1-2、语法说明" class="headerlink" title="5.1.2、语法说明"></a>5.1.2、语法说明</h4><p>新增文档的 DSL 语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jack&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的 java 代码如图：</p><p><img src="/images/es-resrclient-addDSL.png" alt="新增文档的DSL语句"></p><p>与创建索引库类似，同样是三个步骤：</p><ul><li>1）创建 Request 对象</li><li>2）准备请求参数，也就是 DSL 中的 JSON 文档</li><li>3）发送请求</li></ul><p>区别在于直接使用 client.xxx()的 API，不再需要 client.indices()。</p><h4 id="5-1-3、完整代码"><a href="#5-1-3、完整代码" class="headerlink" title="5.1.3、完整代码"></a>5.1.3、完整代码</h4><p>导入酒店数据，基本流程一致，但是需要考虑几点变化：</p><ul><li>酒店数据来自于数据库，因此需要先查询出来，得到 hotel 对象</li><li>hotel 对象需要转为 HotelDoc 对象</li><li>HotelDoc 需要序列化为 json 格式</li></ul><p>因此，代码整体步骤如下：</p><ul><li>1）根据 id 查询酒店数据 Hotel</li><li>2）将 Hotel 封装为 HotelDoc</li><li>3）将 HotelDoc 序列化为 JSON</li><li>4）创建 IndexRequest，指定索引库名和 id</li><li>5）准备请求参数，也就是 JSON 文档</li><li>6）发送请求</li></ul><p>在 hotel-demo 的 HotelDocumentTest 测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.根据id查询酒店数据</span><br>    <span class="hljs-type">Hotel</span> <span class="hljs-variable">hotel</span> <span class="hljs-operator">=</span> hotelService.getById(<span class="hljs-number">61083L</span>);<br>    <span class="hljs-comment">// 2.转换为文档类型</span><br>    <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>    <span class="hljs-comment">// 3.将HotelDoc转json</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(hotelDoc);<br><br>    <span class="hljs-comment">// 1.准备Request对象</span><br>    <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());<br>    <span class="hljs-comment">// 2.准备Json文档</span><br>    request.source(json, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.index(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2、查询文档"><a href="#5-2、查询文档" class="headerlink" title="5.2、查询文档"></a>5.2、查询文档</h3><h4 id="5-2-1、语法说明"><a href="#5-2-1、语法说明" class="headerlink" title="5.2.1、语法说明"></a>5.2.1、语法说明</h4><p>查询的 DSL 语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>非常简单，因此代码大概分两步：</p><ul><li>准备 Request 对象</li><li>发送请求</li></ul><p>不过查询的目的是得到结果，解析为 HotelDoc，因此难点是结果的解析。完整代码如下：</p><p><img src="/images/es-restclient-getDSL.png" alt="查询的DSL语句"></p><p>可以看到，结果是一个 JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为 Java 对象即可。</p><p>与之前类似，也是三步走：</p><ul><li>1）准备 Request 对象。这次是查询，所以是 GetRequest</li><li>2）发送请求，得到结果。因为是查询，这里调用 client.get()方法</li><li>3）解析结果，就是对 JSON 做反序列化</li></ul><h4 id="5-2-2、完整代码"><a href="#5-2-2、完整代码" class="headerlink" title="5.2.2、完整代码"></a>5.2.2、完整代码</h4><p>在 HotelDocumentTest 测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDocumentById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">GetRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61082&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求，得到响应</span><br>    <span class="hljs-type">GetResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.get(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.解析响应结果</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> response.getSourceAsString();<br><br>    <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>    System.out.println(hotelDoc);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3、删除文档"><a href="#5-3、删除文档" class="headerlink" title="5.3、删除文档"></a>5.3、删除文档</h3><p>删除的 DSL 语句：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /hotel/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>与查询相比，仅仅是请求方式从 DELETE 变成 GET，可以想象 Java 代码应该依然是三步走：</p><ul><li>1）准备 Request 对象，因为是删除，这次是 DeleteRequest 对象。要指定索引库名和 id</li><li>2）准备参数，无参</li><li>3）发送请求。因为是删除，所以是 client.delete()方法</li></ul><p>在 HotelDocumentTest 测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4、修改文档"><a href="#5-4、修改文档" class="headerlink" title="5.4、修改文档"></a>5.4、修改文档</h3><h4 id="5-4-1、语法说明"><a href="#5-4-1、语法说明" class="headerlink" title="5.4.1、语法说明"></a>5.4.1、语法说明</h4><p>修改我们讲过两种方式：</p><ul><li>全量修改：本质是先根据 id 删除，再新增</li><li>增量修改：修改文档中的指定字段值</li></ul><p>在 RestClient 的 API 中，全量修改与新增的 API 完全一致，判断依据是 ID：</p><ul><li>如果新增时，ID 已经存在，则修改</li><li>如果新增时，ID 不存在，则新增</li></ul><p>代码示例如图：</p><p><img src="/images/es-restclient-updateDSL.png" alt="修改的DSL语句"></p><p>与之前类似，也是三步走：</p><ul><li>1）准备 Request 对象。这次是修改，所以是 UpdateRequest</li><li>2）准备参数。也就是 JSON 文档，里面包含要修改的字段</li><li>3）更新文档。这里调用 client.update()方法</li></ul><h4 id="5-4-2、完整代码"><a href="#5-4-2、完整代码" class="headerlink" title="5.4.2、完整代码"></a>5.4.2、完整代码</h4><p>在 HotelDocumentTest 测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.doc(<br>        <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;952&quot;</span>,<br>        <span class="hljs-string">&quot;starName&quot;</span>, <span class="hljs-string">&quot;四钻&quot;</span><br>    );<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.update(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5、批量导入文档"><a href="#5-5、批量导入文档" class="headerlink" title="5.5、批量导入文档"></a>5.5、批量导入文档</h3><p>案例需求：利用 BulkRequest 批量将数据库数据导入到索引库中。</p><p>步骤如下：</p><ul><li><p>利用 mybatis-plus 查询酒店数据</p></li><li><p>将查询到的酒店数据（Hotel）转换为文档类型数据（HotelDoc）</p></li><li><p>利用 JavaRestClient 中的 BulkRequest 批处理，实现批量新增文档</p></li></ul><h4 id="5-5-1、语法说明"><a href="#5-5-1、语法说明" class="headerlink" title="5.5.1、语法说明"></a>5.5.1、语法说明</h4><p>批量处理 BulkRequest，其本质就是将多个普通的 CRUD 请求组合在一起发送。</p><p>其中提供了一个 add 方法，用来添加其他请求：</p><p><img src="/images/es-restclient-addbulkApi.png" alt="addBulk"></p><p>可以看到，能添加的请求包括：</p><ul><li>IndexRequest，也就是新增</li><li>UpdateRequest，也就是修改</li><li>DeleteRequest，也就是删除</li></ul><p>因此 Bulk 中添加了多个 IndexRequest，就是批量新增功能。示例：</p><p><img src="/images/es-restclient-addBulkApiTest.png" alt="addBulkApiTest"></p><p>其实还是三步走：</p><ul><li>1）创建 Request 对象。这里是 BulkRequest</li><li>2）准备参数。批处理的参数，就是其它 Request 对象，这里就是多个 IndexRequest</li><li>3）发起请求。这里是批处理，调用的方法为 client.bulk()方法</li></ul><h4 id="5-5-2、完整代码"><a href="#5-5-2、完整代码" class="headerlink" title="5.5.2、完整代码"></a>5.5.2、完整代码</h4><p>在 HotelDocumentTest 测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBulkRequest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 批量查询酒店数据</span><br>    List&lt;Hotel&gt; hotels = hotelService.list();<br><br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>    <span class="hljs-comment">// 2.准备参数，添加多个新增的Request</span><br>    <span class="hljs-keyword">for</span> (Hotel hotel : hotels) &#123;<br>        <span class="hljs-comment">// 2.1.转换为文档类型HotelDoc</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>        <span class="hljs-comment">// 2.2.创建新增文档的Request对象</span><br>        request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>)<br>                    .id(hotelDoc.getId().toString())<br>                    .source(JSON.toJSONString(hotelDoc), XContentType.JSON));<br>    &#125;<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.bulk(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-6、小结"><a href="#5-6、小结" class="headerlink" title="5.6、小结"></a>5.6、小结</h3><p>文档操作的基本步骤：</p><ul><li>初始化 RestHighLevelClient</li><li>创建 XxxRequest。XXX 是 Index、Get、Update、Delete、Bulk</li><li>准备参数（Index、Update、Bulk 时需要）</li><li>发送请求。调用 RestHighLevelClient#.xxx()方法，xxx 是 index、get、update、delete、bulk</li><li>解析结果（Get 时需要）</li></ul><h2 id="6、DSL-查询文档"><a href="#6、DSL-查询文档" class="headerlink" title="6、DSL 查询文档"></a>6、DSL 查询文档</h2><blockquote><p>elasticsearch 的查询依然是基于 JSON 风格的 DSL 来实现的。</p></blockquote><h3 id="6-1、DSL-查询分类"><a href="#6-1、DSL-查询分类" class="headerlink" title="6.1、DSL 查询分类"></a>6.1、DSL 查询分类</h3><p>Elasticsearch 提供了基于 JSON 的 DSL（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">Domain Specific Language</a>）来定义查询。常见的查询类型包括：</p><ul><li><p><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：match_all</p></li><li><p><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：</p><ul><li>match_query</li><li>multi_match_query</li></ul></li><li><p><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找 keyword、数值、日期、boolean 等类型字段。例如：</p><ul><li>ids</li><li>range</li><li>term</li></ul></li><li><p><strong>地理（geo）查询</strong>：根据经纬度查询。例如：</p><ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li><p><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：</p><ul><li>bool</li><li>function_score</li></ul></li></ul><p>查询的语法基本一致：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;查询类型&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;查询条件&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;条件值&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>以查询所有为例，其中：</p><ul><li>查询类型为 match_all</li><li>没有查询条件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 查询所有</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其它查询无非就是<strong>查询类型</strong>、<strong>查询条件</strong>的变化。</p><h3 id="6-2、全文检索查询"><a href="#6-2、全文检索查询" class="headerlink" title="6.2、全文检索查询"></a>6.2、全文检索查询</h3><h4 id="6-2-1、使用场景"><a href="#6-2-1、使用场景" class="headerlink" title="6.2.1、使用场景"></a>6.2.1、使用场景</h4><p>全文检索查询的基本流程如下：</p><ul><li>对用户搜索的内容做分词，得到词条</li><li>根据词条去倒排索引库中匹配，得到文档 id</li><li>根据文档 id 找到文档，返回给用户</li></ul><p>比较常用的场景包括：</p><ul><li>商城的输入框搜索</li><li>百度输入框搜索</li></ul><h4 id="6-2-2、基本语法"><a href="#6-2-2、基本语法" class="headerlink" title="6.2.2、基本语法"></a>6.2.2、基本语法</h4><p>常见的全文检索查询包括：</p><ul><li>match 查询：单字段查询</li><li>multi_match 查询：多字段查询，任意一个字段符合条件就算符合查询条件</li></ul><p>match 查询语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEXT&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>mulit_match 语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEXT&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;FIELD1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; FIELD12&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-2-3、总结"><a href="#6-2-3、总结" class="headerlink" title="6.2.3、总结"></a>6.2.3、总结</h4><p>match 和 multi_match 的区别是什么？</p><ul><li>match：根据一个字段查询</li><li>multi_match：根据多个字段查询，参与查询字段越多，查询性能越差</li></ul><h3 id="6-3、精准查询"><a href="#6-3、精准查询" class="headerlink" title="6.3、精准查询"></a>6.3、精准查询</h3><p>精确查询一般是查找 keyword、数值、日期、boolean 等类型字段。所以<strong>不会</strong>对搜索条件分词。常见的有：</p><ul><li>term：根据词条精确值查询</li><li>range：根据值的范围查询</li></ul><h4 id="6-3-1、term-查询"><a href="#6-3-1、term-查询" class="headerlink" title="6.3.1、term 查询"></a>6.3.1、term 查询</h4><p>因为精确查询的字段搜是不分词的字段，因此查询的条件也必须是<strong>不分词</strong>的词条。查询时，用户输入的内容跟自动值完全匹配时才认为符合条件。如果用户输入的内容过多，反而搜索不到数据。</p><p>语法说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// term查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VALUE&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-3-2、range-查询"><a href="#6-3-2、range-查询" class="headerlink" title="6.3.2、range 查询"></a>6.3.2、range 查询</h4><p>范围查询，一般应用在对数值类型做范围过滤的时候。</p><p>基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// range查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 这里的gte代表大于等于，gt则代表大于</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span> <span class="hljs-comment">// lte代表小于等于，lt则代表小于</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-3-3、总结"><a href="#6-3-3、总结" class="headerlink" title="6.3.3、总结"></a>6.3.3、总结</h4><p>精确查询常见的有哪些？</p><ul><li>term 查询：根据词条精确匹配，一般搜索 keyword 类型、数值类型、布尔类型、日期类型字段</li><li>range 查询：根据数值范围查询，可以是数值、日期的范围</li></ul><h3 id="6-4、地理坐标查询"><a href="#6-4、地理坐标查询" class="headerlink" title="6.4、地理坐标查询"></a>6.4、地理坐标查询</h3><p>所谓的地理坐标查询，其实就是根据经纬度查询。</p><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html</a></p><p>常见的使用场景包括：</p><ul><li>携程：搜索我附近的酒店</li><li>滴滴：搜索我附近的出租车</li><li>微信：搜索我附近的人</li></ul><h4 id="6-4-1、矩形范围查询"><a href="#6-4-1、矩形范围查询" class="headerlink" title="6.4.1、矩形范围查询"></a>6.4.1、矩形范围查询</h4><p>矩形范围查询，也就是 geo_bounding_box 查询，查询坐标落在某个矩形范围的所有文档。</p><p>查询时，需要指定矩形的<strong>左上</strong>、<strong>右下</strong>两个点的坐标，然后画出一个矩形，落在该矩形内的都是符合条件的点。</p><p>语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// geo_bounding_box查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geo_bounding_box&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;top_left&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 左上点</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31.1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.5</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bottom_right&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 右下点</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.9</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.7</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-4-2、附近查询"><a href="#6-4-2、附近查询" class="headerlink" title="6.4.2、附近查询"></a>6.4.2、附近查询</h4><p>附近查询，也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值的所有文档。</p><p>即在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件。</p><p>语法说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// geo_distance 查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geo_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15km&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 半径</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;31.21,121.5&quot;</span> <span class="hljs-comment">// 圆心</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="6-5、复合查询"><a href="#6-5、复合查询" class="headerlink" title="6.5、复合查询"></a>6.5、复合查询</h3><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p><ul><li>fuction score：算分函数查询，可以控制文档相关性算分，控制文档排名</li><li>bool query：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</li></ul><h4 id="6-5-1、相关性算分"><a href="#6-5-1、相关性算分" class="headerlink" title="6.5.1、相关性算分"></a>6.5.1、相关性算分</h4><p>当我们利用 match 查询时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。</p><p>例如，我们搜索 “虹桥如家”，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">17.850193</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;虹桥如家酒店真不错&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12.259849</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩如家酒店真不错&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11.91091</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;迪士尼如家酒店真不错&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>在 elasticsearch 中，早期使用的打分算法是 TF-IDF 算法，公式如下：</p><p><img src="/images/es-Restclient-TF-IDF.png" alt="TF-IDF"></p><p>在后来的 5.1 版本升级中，elasticsearch 将算法改进为 BM25 算法，公式如下：</p><p><img src="/images/es-restclient-BM25.png" alt="BM25"></p><p>TF-IDF 算法有一各缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。而 BM25 则会让单个词条的算分有一个上限，曲线更加平滑：</p><p><img src="/images/es-TF-IDF-Compare-BM25.png" alt="Compare"></p><p>小结：elasticsearch 会根据词条和文档的相关度做打分，算法由两种：</p><ul><li>TF-IDF 算法</li><li>BM25 算法，elasticsearch5.1 版本后采用的算法</li></ul><h4 id="6-5-2、算分函数查询"><a href="#6-5-2、算分函数查询" class="headerlink" title="6.5.2、算分函数查询"></a>6.5.2、算分函数查询</h4><p>根据相关度打分是比较合理的需求，但<strong>合理的不一定是产品经理需要</strong>的。</p><p>以百度为例，搜索的结果中并不是相关度越高排名越靠前，而是谁掏的钱多排名就越靠前。</p><p>1）语法说明</p><p><img src="/images/es-selectALG.png" alt="算法函数查询"></p><p>function score 查询中包含四部分内容：</p><ul><li><strong>原始查询</strong>条件：query 部分，基于这个条件搜索文档，并且基于 BM25 算法给文档打分，<strong>原始算分</strong>（query score)</li><li><strong>过滤条件</strong>：filter 部分，符合该条件的文档才会重新算分</li><li><strong>算分函数</strong>：符合 filter 条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数<ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括：<ul><li>multiply：相乘</li><li>replace：用 function score 替换 query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>function score 的运行流程如下：</p><ul><li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li><li>2）根据<strong>过滤条件</strong>，过滤文档</li><li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li><li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li></ul><p>因此，其中的关键点是：</p><ul><li>过滤条件：决定哪些文档的算分被修改</li><li>算分函数：决定函数算分的算法</li><li>运算模式：决定最终算分结果</li></ul><p>2）示例</p><p>需求：给“如家”这个品牌的酒店排名靠前一些</p><p>翻译一下这个需求，转换为之前说的四个要点：</p><ul><li>原始条件：不确定，可以任意变化</li><li>过滤条件：brand &#x3D; “如家”</li><li>算分函数：可以简单粗暴，直接给固定的算分结果，weight</li><li>运算模式：比如求和</li></ul><p>因此最终的 DSL 语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;function_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  .... <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 原始查询，可以是任意条件</span><br>      <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 算分函数</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 满足的条件，品牌必须是如家</span><br>            <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span> <span class="hljs-comment">// 算分权重为2</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;boost_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span> <span class="hljs-comment">// 加权模式，求和</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>3）小结</p><p>function score query 定义的三要素是什么？</p><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算 function score</li><li>加权方式：function score 与 query score 如何运算</li></ul><h4 id="6-5-3、布尔查询"><a href="#6-5-3、布尔查询" class="headerlink" title="6.5.3、布尔查询"></a>6.5.3、布尔查询</h4><p>布尔查询是一个或多个查询子句的组合，每一个子句就是一个<strong>子查询</strong>。子查询的组合方式有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li><li>filter：必须匹配，<strong>不参与算分</strong></li></ul><p>搜索时参与<strong>打分的字段越多，查询的性能也越差</strong>。因此这种多条件查询时，建议这样做：</p><ul><li>搜索框的关键字搜索，是全文检索查询，使用 must 查询，参与算分</li><li>其它过滤条件，采用 filter 查询。不参与算分</li></ul><p>1）语法示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;上海&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;皇冠假日&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华美达&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">500</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">45</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>2）示例</p><p>需求：搜索名字包含“如家”，价格不高于 400，在坐标 31.21,121.5 周围 10km 范围内的酒店。</p><p>分析：</p><ul><li>名称搜索，属于全文检索查询，应该参与算分。放到 must 中</li><li>价格不高于 400，用 range 查询，属于过滤条件，不参与算分。放到 must_not 中</li><li>周围 10km 范围内，用 geo_distance 查询，属于过滤条件，不参与算分。放到 filter 中</li></ul><p><img src="/images/elasticsearch-booleanFindCast" alt="image-20210721194744183"></p><p>3）小结</p><p>bool 查询有几种逻辑关系？</p><ul><li>must：必须匹配的条件，可以理解为“与”</li><li>should：选择性匹配的条件，可以理解为“或”</li><li>must_not：必须不匹配的条件，不参与打分</li><li>filter：必须匹配的条件，不参与打分</li></ul><h2 id="7、搜索结果处理"><a href="#7、搜索结果处理" class="headerlink" title="7、搜索结果处理"></a>7、搜索结果处理</h2><p>搜索的结果可以按照用户指定的方式去处理或展示。</p><h3 id="7-1、排序"><a href="#7-1、排序" class="headerlink" title="7.1、排序"></a>7.1、排序</h3><p>elasticsearch 默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html">结果排序</a>。可以排序字段类型有：keyword 类型、数值类型、地理坐标类型、日期类型等。</p><h4 id="7-1-1、普通字段排序"><a href="#7-1-1、普通字段排序" class="headerlink" title="7.1.1、普通字段排序"></a>7.1.1、普通字段排序</h4><p>keyword、数值、日期类型排序的语法基本一致。</p><p><strong>语法</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span>  <span class="hljs-comment">// 排序字段、排序方式ASC、DESC</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>排序条件是一个数组，也就是可以写多个排序条件。按照声明的顺序，当第一个条件相等时，再按照第二个条件排序，以此类推</p><h4 id="7-1-2、地理坐标排序"><a href="#7-1-2、地理坐标排序" class="headerlink" title="7.1.2、地理坐标排序"></a>7.1.2、地理坐标排序</h4><p>地理坐标排序略有不同。</p><p><strong>语法说明</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_geo_distance&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;FIELD&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;纬度，经度&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 文档中geo_point类型的字段名、目标坐标点</span><br>          <span class="hljs-attr">&quot;order&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 排序方式</span><br>          <span class="hljs-attr">&quot;unit&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;km&quot;</span> <span class="hljs-comment">// 排序的距离单位</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查询的含义是：</p><ul><li>指定一个坐标，作为目标点</li><li>计算每一个文档中，指定字段（必须是 geo_point 类型）的坐标 到目标点的距离是多少</li><li>根据距离排序</li></ul><p><strong>示例：</strong></p><p>需求描述：实现对酒店数据按照到你的位置坐标的距离升序排序</p><p>提示：获取你的位置的经纬度的方式：<a href="https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/">https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/</a></p><h3 id="7-2、分页"><a href="#7-2、分页" class="headerlink" title="7.2、分页"></a>7.2、分页</h3><p>elasticsearch 默认情况下只返回 top10 的数据。而如果要查询更多数据就需要修改分页参数了。elasticsearch 中通过修改 from、size 参数来控制要返回的分页结果：</p><ul><li>from：从第几个文档开始</li><li>size：总共查询几个文档</li></ul><p>类似于 mysql 中的<code>limit ?, ?</code></p><h4 id="7-2-1、基本的分页"><a href="#7-2-1、基本的分页" class="headerlink" title="7.2.1、基本的分页"></a>7.2.1、基本的分页</h4><p>分页的基本语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 分页开始的位置，默认为0</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 期望获取的文档总数</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-2、深度分页问题"><a href="#7-2-2、深度分页问题" class="headerlink" title="7.2.2、深度分页问题"></a>7.2.2、深度分页问题</h4><p>现在，我要查询 990~1000 的数据，查询逻辑要这么写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">990</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 分页开始的位置，默认为0</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 期望获取的文档总数</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当查询分页深度较大时，汇总数据过多，对内存和 CPU 会产生非常大的压力，因此 elasticsearch 会禁止 from+ size 超过 10000 的请求。</p><p>针对深度分页，ES 提供两种解决方案，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html">官方文档</a>：</p><ul><li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li><li>scroll：原理将排序后的文档 id 形成快照，保存在内存。官方已经不推荐使用。</li></ul><h4 id="7-2-3、小结"><a href="#7-2-3、小结" class="headerlink" title="7.2.3、小结"></a>7.2.3、小结</h4><p>分页查询的常见实现方案以及优缺点：</p><ul><li><p><code>from + size</code>：</p><ul><li>优点：支持随机翻页</li><li>缺点：深度分页问题，默认查询上限（from + size）是 10000</li><li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索</li></ul></li><li><p><code>after search</code>：</p><ul><li>优点：没有查询上限（单次查询的 size 不超过 10000）</li><li>缺点：只能向后逐页查询，不支持随机翻页</li><li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</li></ul></li><li><p><code>scroll</code>：</p><ul><li>优点：没有查询上限（单次查询的 size 不超过 10000）</li><li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li><li>场景：海量数据的获取和迁移。从 ES7.1 开始不推荐，建议用 after search 方案。</li></ul></li></ul><h3 id="7-3、高亮"><a href="#7-3、高亮" class="headerlink" title="7.3、高亮"></a>7.3、高亮</h3><h4 id="7-3-1、高亮原理"><a href="#7-3-1、高亮原理" class="headerlink" title="7.3.1、高亮原理"></a>7.3.1、高亮原理</h4><p>高亮显示：在百度、京东搜索时，关键字会变成红色，比较醒目。</p><p>高亮显示的实现分为两步：</p><ul><li>1）给文档中的所有关键字都添加一个标签，例如<code>&lt;em&gt;</code>标签</li><li>2）页面给<code>&lt;em&gt;</code>标签编写 CSS 样式</li></ul><h4 id="7-3-2、实现高亮"><a href="#7-3-2、实现高亮" class="headerlink" title="7.3.2、实现高亮"></a>7.3.2、实现高亮</h4><p><strong>高亮的语法</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEXT&quot;</span> <span class="hljs-comment">// 查询条件，高亮一定要使用全文检索查询</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 指定要高亮的字段</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;em&gt;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 用来标记高亮字段的前置标签</span><br>        <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;/em&gt;&quot;</span> <span class="hljs-comment">// 用来标记高亮字段的后置标签</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>高亮是对关键字高亮，因此<strong>搜索条件必须带有关键字</strong>，而不能是范围这样的查询。</li><li>默认情况下，<strong>高亮的字段，必须与搜索指定的字段一致</strong>，否则无法高亮</li><li>如果要对非搜索字段高亮，则需要添加一个属性：required_field_match&#x3D;false</li></ul><h3 id="7-4、总结"><a href="#7-4、总结" class="headerlink" title="7.4、总结"></a>7.4、总结</h3><p>查询的 DSL 是一个大的 JSON 对象，包含下列属性：</p><ul><li>query：查询条件</li><li>from 和 size：分页条件</li><li>sort：排序条件</li><li>highlight：高亮条件</li></ul><h2 id="8、RestClient-查询文档"><a href="#8、RestClient-查询文档" class="headerlink" title="8、RestClient 查询文档"></a>8、RestClient 查询文档</h2><p>RestHighLevelClient 对象进行文档的查询，基本步骤包括：</p><ul><li>1）准备 Request 对象</li><li>2）准备请求参数</li><li>3）发起请求</li><li>4）解析响应</li></ul><h3 id="8-1、快速入门"><a href="#8-1、快速入门" class="headerlink" title="8.1、快速入门"></a>8.1、快速入门</h3><h4 id="8-1-1、发起查询请求"><a href="#8-1-1、发起查询请求" class="headerlink" title="8.1.1、发起查询请求"></a>8.1.1、发起查询请求</h4><p><img src="/images/es-restclient-matchAll.png" alt="matchAll"></p><p>代码解读：</p><ul><li><p>第一步，创建<code>SearchRequest</code>对象，指定索引库名</p></li><li><p>第二步，利用<code>request.source()</code>构建 DSL，DSL 中可以包含查询、分页、排序、高亮等</p><ul><li><code>query()</code>：代表查询条件，利用<code>QueryBuilders.matchAllQuery()</code>构建一个 match_all 查询的 DSL</li></ul></li><li><p>第三步，利用 client.search()发送请求，得到响应</p></li></ul><blockquote><p><strong>关键的两个 API</strong></p><p>一个是<code>request.source()</code>，其中包含了查询、排序、分页、高亮等所有功能：</p><p><img src="/images/es-restclient-requestSource.png" alt="requestSource"></p><p>另一个是<code>QueryBuilders</code>，其中包含 match、term、function_score、bool 等各种查询：</p><p><img src="/images/es-restclient-QueryBuilders.png" alt="QueryBuilders"></p></blockquote><h4 id="8-1-2、解析响应"><a href="#8-1-2、解析响应" class="headerlink" title="8.1.2、解析响应"></a>8.1.2、解析响应</h4><p>响应结果的解析：</p><p><img src="/images/es-restclient-matchAllTest.png" alt="matchAllTest"></p><p>elasticsearch 返回的结果是一个 JSON 字符串，结构包含：</p><ul><li><code>hits</code>：命中的结果<ul><li><code>total</code>：总条数，其中的 value 是具体的总条数值</li><li><code>max_score</code>：所有结果中得分最高的文档的相关性算分</li><li><code>hits</code>：搜索结果的文档数组，其中的每个文档都是一个 json 对象<ul><li><code>_source</code>：文档中的原始数据，也是 json 对象</li></ul></li></ul></li></ul><p>因此，我们解析响应结果，就是逐层解析 JSON 字符串，流程如下：</p><ul><li><code>SearchHits</code>：通过 response.getHits()获取，就是 JSON 中的最外层的 hits，代表命中的结果<ul><li><code>SearchHits#getTotalHits().value</code>：获取总条数信息</li><li><code>SearchHits#getHits()</code>：获取 SearchHit 数组，也就是文档数组<ul><li><code>SearchHit#getSourceAsString()</code>：获取文档结果中的_source，也就是原始的 json 文档数据</li></ul></li></ul></li></ul><h4 id="8-1-3、完整代码"><a href="#8-1-3、完整代码" class="headerlink" title="8.1.3、完整代码"></a>8.1.3、完整代码</h4><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    request.source()<br>        .query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-comment">// 4.解析响应</span><br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 4.1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 4.2.文档数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-comment">// 4.3.遍历</span><br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 获取文档source</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>        System.out.println(<span class="hljs-string">&quot;hotelDoc = &quot;</span> + hotelDoc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-1-4、小结"><a href="#8-1-4、小结" class="headerlink" title="8.1.4、小结"></a>8.1.4、小结</h4><p>查询的基本步骤是：</p><ol><li><p>创建 SearchRequest 对象</p></li><li><p>准备 Request.source()，也就是 DSL。</p><p>① QueryBuilders 来构建查询条件</p><p>② 传入 Request.source() 的 query() 方法</p></li><li><p>发送请求，得到结果</p></li><li><p>解析结果（参考 JSON 结果，从外到内，逐层解析）</p></li></ol><h3 id="8-2、match-查询"><a href="#8-2、match-查询" class="headerlink" title="8.2、match 查询"></a>8.2、match 查询</h3><p>全文检索的 match 和 multi_match 查询与 match_all 的 API 基本一致。差别是查询条件，也就是 query 的部分。</p><p><img src="/images/es-restclient-matchSelect.png" alt="match查询"></p><p>Java 代码上的差异主要是 request.source().query()中的参数。</p><p>同样是利用 QueryBuilders 提供的方法：</p><p><img src="/images/es-restclient-singleAndMultiCompare.png" alt="singleAndMulti"></p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    request.source()<br>        .query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;如家&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3、精确查询"><a href="#8-3、精确查询" class="headerlink" title="8.3、精确查询"></a>8.3、精确查询</h3><p>精确查询主要是两者：</p><ul><li>term：词条精确匹配</li><li>range：范围查询</li></ul><p>与之前的查询相比，差异同样在查询条件，其它都一样。</p><p>查询条件构造的 API 如下：</p><p><img src="/images/es-restclient-accurateFind.png" alt="精确查询"></p><h3 id="8-4、布尔查询"><a href="#8-4、布尔查询" class="headerlink" title="8.4、布尔查询"></a>8.4、布尔查询</h3><p>布尔查询是用 must、must_not、filter 等方式组合其它查询，代码示例如下：</p><p><img src="/images/es-restclient-boolFind.png" alt="布尔查询"></p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBool</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    <span class="hljs-comment">// 2.1.准备BooleanQuery</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>    <span class="hljs-comment">// 2.2.添加term</span><br>    boolQuery.must(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;杭州&quot;</span>));<br>    <span class="hljs-comment">// 2.3.添加range</span><br>    boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(<span class="hljs-number">250</span>));<br><br>    request.source().query(boolQuery);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-5、排序、分页"><a href="#8-5、排序、分页" class="headerlink" title="8.5、排序、分页"></a>8.5、排序、分页</h3><p>搜索结果的排序和分页是与 query 同级的参数，因此同样是使用 request.source()来设置。</p><p>对应的 API 如下：</p><p><img src="/images/es-restclient-sortAndPage.png" alt="排序、分页"></p><p>完整代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageAndSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 页码，每页大小</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, size = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    <span class="hljs-comment">// 2.1.query</span><br>    request.source().query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">// 2.2.排序 sort</span><br>    request.source().sort(<span class="hljs-string">&quot;price&quot;</span>, SortOrder.ASC);<br>    <span class="hljs-comment">// 2.3.分页 from、size</span><br>    request.source().from((page - <span class="hljs-number">1</span>) * size).size(<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-6、高亮"><a href="#8-6、高亮" class="headerlink" title="8.6、高亮"></a>8.6、高亮</h3><p>高亮的代码与之前代码差异较大，有两点：</p><ul><li>查询的 DSL：其中除了查询条件，还需要添加高亮条件，同样是与 query 同级。</li><li>结果解析：结果除了要解析_source 文档数据，还要解析高亮结果</li></ul><h4 id="8-6-1、高亮请求构建"><a href="#8-6-1、高亮请求构建" class="headerlink" title="8.6.1、高亮请求构建"></a>8.6.1、高亮请求构建</h4><p>高亮请求的构建 API 如下：</p><p><img src="/images/es-restclient-highLight.png" alt="高亮请求"></p><blockquote><p>⚠️<strong>高亮查询必须使用全文检索查询，并且要有搜索关键字，将来才可以对关键字高亮。</strong></p></blockquote><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHighlight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    <span class="hljs-comment">// 2.1.query</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;如家&quot;</span>));<br>    <span class="hljs-comment">// 2.2.高亮</span><br>    request.source().highlighter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().field(<span class="hljs-string">&quot;name&quot;</span>).requireFieldMatch(<span class="hljs-literal">false</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-6-2、高亮结果解析"><a href="#8-6-2、高亮结果解析" class="headerlink" title="8.6.2、高亮结果解析"></a>8.6.2、高亮结果解析</h4><p>高亮的结果与查询的文档结果默认是分离的，并不在一起。</p><p>因此解析高亮的代码需要额外处理：</p><p><img src="/images/es-restclient-highLightAnaly.png" alt="高亮结果解析"></p><p>代码解读：</p><ul><li>第一步：从结果中获取 source。hit.getSourceAsString()，这部分是非高亮结果，json 字符串。还需要反序列为 HotelDoc 对象</li><li>第二步：获取高亮结果。hit.getHighlightFields()，返回值是一个 Map，key 是高亮字段名称，值是 HighlightField 对象，代表高亮值</li><li>第三步：从 map 中根据高亮字段名称，获取高亮字段值对象 HighlightField</li><li>第四步：从 HighlightField 中获取 Fragments，并且转为字符串。这部分就是真正的高亮字符串了</li><li>第五步：用高亮的结果替换 HotelDoc 中的非高亮结果</li></ul><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-comment">// 4.解析响应</span><br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 4.1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 4.2.文档数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-comment">// 4.3.遍历</span><br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 获取文档source</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>        <span class="hljs-comment">// 获取高亮结果</span><br>        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;<br>            <span class="hljs-comment">// 根据字段名获取高亮结果</span><br>            <span class="hljs-type">HighlightField</span> <span class="hljs-variable">highlightField</span> <span class="hljs-operator">=</span> highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-keyword">if</span> (highlightField != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 获取高亮值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> highlightField.getFragments()[<span class="hljs-number">0</span>].string();<br>                <span class="hljs-comment">// 覆盖非高亮结果</span><br>                hotelDoc.setName(name);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;hotelDoc = &quot;</span> + hotelDoc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9、数据聚合"><a href="#9、数据聚合" class="headerlink" title="9、数据聚合"></a>9、数据聚合</h2><p>**<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">聚合（</a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">aggregations</a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">）</a>**可以让我们极其方便的实现对数据的统计、分析、运算。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的 sql 要方便的多，而且查询速度非常快，可以实现近实时搜索效果。</p><h3 id="9-1、聚合的种类"><a href="#9-1、聚合的种类" class="headerlink" title="9.1、聚合的种类"></a>9.1、聚合的种类</h3><p>聚合常见的有三类：</p><ul><li><p><strong>桶（Bucket）</strong>聚合：用来对文档做分组</p><ul><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li></ul></li><li><p><strong>度量（Metric）</strong>聚合：用以计算一些值，比如：最大值、最小值、平均值等</p><ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求 max、min、avg、sum 等</li></ul></li><li><p><strong>管道（pipeline）</strong>聚合：其它聚合的结果为基础做聚合</p></li></ul><blockquote><p><strong>注意：</strong>参加聚合的字段必须是 keyword、日期、数值、布尔类型</p></blockquote><h3 id="9-2、DSL-实现聚合"><a href="#9-2、DSL-实现聚合" class="headerlink" title="9.2、DSL 实现聚合"></a>9.2、DSL 实现聚合</h3><p>按照品牌对数据分组，可以根据酒店品牌的名称做聚合，也就是 Bucket 聚合。</p><h4 id="9-2-1、Bucket-聚合语法"><a href="#9-2-1、Bucket-聚合语法" class="headerlink" title="9.2.1、Bucket 聚合语法"></a>9.2.1、Bucket 聚合语法</h4><p>语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 设置size为0，结果中不包含文档，只包含聚合结果</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 定义聚合</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//给聚合起个名字</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合的类型，按照品牌值聚合，所以选择term</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 参与聚合的字段</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span> <span class="hljs-comment">// 希望获取的聚合结果数量</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="9-2-2、聚合结果排序"><a href="#9-2-2、聚合结果排序" class="headerlink" title="9.2.2、聚合结果排序"></a>9.2.2、聚合结果排序</h4><p>默认情况下，Bucket 聚合会统计 Bucket 内的文档数量，记为_count，并且按照_count 降序排序。</p><p>指定 order 属性，自定义聚合的排序方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span> <span class="hljs-comment">// 按照_count升序排列</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="9-2-3、限定聚合范围"><a href="#9-2-3、限定聚合范围" class="headerlink" title="9.2.3、限定聚合范围"></a>9.2.3、限定聚合范围</h4><p>默认情况下，Bucket 聚合是对索引库的所有文档做聚合，但真实场景下，用户会输入搜索条件，因此聚合必须是对搜索结果聚合。那么聚合必须添加限定条件。</p><p>可以限定要聚合的文档范围，只要添加 query 条件即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span> <span class="hljs-comment">// 只对200元以下的文档聚合</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="9-2-4、Metric-聚合语法"><a href="#9-2-4、Metric-聚合语法" class="headerlink" title="9.2.4、Metric 聚合语法"></a>9.2.4、Metric 聚合语法</h4><p>对桶内的酒店做运算，获取每个品牌的用户评分的 min、max、avg 等值。这就要用到 Metric 聚合了，例如 stat 聚合，可以获取 min、max、avg 等结果。</p><p>语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 是brands聚合的子聚合，也就是分组后对每组分别计算</span><br>        <span class="hljs-attr">&quot;score_stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合名称</span><br>          <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合类型，这里stats可以计算min、max、avg等</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;score&quot;</span> <span class="hljs-comment">// 聚合字段，这里是score</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="9-2-5、小结"><a href="#9-2-5、小结" class="headerlink" title="9.2.5、小结"></a>9.2.5、小结</h4><p>aggs 代表聚合，与 query 同级，此时 query 的作用是？</p><ul><li>限定聚合的的文档范围</li></ul><p>聚合必须的三要素：</p><ul><li>聚合名称</li><li>聚合类型</li><li>聚合字段</li></ul><p>聚合可配置属性有：</p><ul><li>size：指定聚合结果数量</li><li>order：指定聚合结果排序方式</li><li>field：指定聚合字段</li></ul><h3 id="9-3、RestAPI-实现聚合"><a href="#9-3、RestAPI-实现聚合" class="headerlink" title="9.3、RestAPI 实现聚合"></a>9.3、RestAPI 实现聚合</h3><h4 id="9-3-1、API-语法"><a href="#9-3-1、API-语法" class="headerlink" title="9.3.1、API 语法"></a>9.3.1、API 语法</h4><p>聚合条件与 query 条件同级别，因此需要使用 request.source()来指定聚合条件。</p><p>聚合条件的语法：</p><p><img src="/images/es-restclient-aggregation.png" alt="聚合"></p><p>聚合的结果也与查询结果不同，API 也比较特殊。</p><p>不过同样是 JSON 逐层解析：</p><p><img src="/images/es-restclient-aggregationAnaly.png" alt="聚合分析"></p><h4 id="9-3-2、业务需求"><a href="#9-3-2、业务需求" class="headerlink" title="9.3.2、业务需求"></a>9.3.2、业务需求</h4><p>需求：搜索页面的品牌、城市等信息不应该是在页面写死，而是通过聚合索引库中的酒店数据得来的：</p><p>分析：</p><p>搜索页面的城市列表、星级列表、品牌列表都是写死的，并不会随着搜索结果的变化而变化。但是用户搜索条件改变时，搜索结果会跟着变化。</p><p>例如：用户搜索“东方明珠”，那搜索的酒店肯定是在上海东方明珠附近，因此，城市只能是上海，此时城市列表中就不应该显示北京、深圳、杭州这些信息了。也就是说，搜索结果中包含哪些城市，页面就应该列出哪些城市；搜索结果中包含哪些品牌，页面就应该列出哪些品牌。如何得知搜索结果中包含哪些品牌？如何得知搜索结果中包含哪些城市？使用聚合功能，利用 Bucket 聚合，对搜索结果中的文档基于品牌分组、基于城市分组，就能得知包含哪些品牌、哪些城市了。因为是对搜索结果聚合，因此聚合是<strong>限定范围的聚合</strong>，也就是说聚合的限定条件跟搜索文档的条件一致。</p><p>前端发出的请求，其<strong>参数与搜索文档的参数完全一致</strong>。</p><p>返回值类型就是页面要展示的最终结果，并且是一个 Map 结构：</p><ul><li>key 是字符串：市、星级、品牌、价格</li><li>value 是集合：例如多个城市的名称</li></ul><h4 id="9-3-3、业务实现"><a href="#9-3-3、业务实现" class="headerlink" title="9.3.3、业务实现"></a>9.3.3、业务实现</h4><p>在<code>com.goes.hotel.web</code>包的<code>HotelController</code>中添加一个方法，遵循下面的要求：</p><ul><li>请求方式：<code>POST</code></li><li>请求路径：<code>/hotel/filters</code></li><li>请求参数：<code>RequestParams</code>，与搜索文档的参数一致</li><li>返回值类型：<code>Map&lt;String, List&lt;String&gt;&gt;</code></li></ul><p>代码：调用了 IHotelService 中的 getFilters 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;filters&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">getFilters</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RequestParams params)</span>&#123;<br>    <span class="hljs-keyword">return</span> hotelService.getFilters(params);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>com.goes.hotel.service.IHotelService</code>中定义新方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">filters</span><span class="hljs-params">(RequestParams params)</span>;<br></code></pre></td></tr></table></figure><p>在<code>com.goes.hotel.service.impl.HotelService</code>中实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">filters</span><span class="hljs-params">(RequestParams params)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">// 2.准备DSL</span><br>        <span class="hljs-comment">// 2.1.query</span><br>        buildBasicQuery(params, request);<br>        <span class="hljs-comment">// 2.2.设置size</span><br>        request.source().size(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 2.3.聚合</span><br>        buildAggregation(request);<br>        <span class="hljs-comment">// 3.发出请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">// 4.解析结果</span><br>        Map&lt;String, List&lt;String&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations();<br>        <span class="hljs-comment">// 4.1.根据品牌名称，获取品牌结果</span><br>        List&lt;String&gt; brandList = getAggByName(aggregations, <span class="hljs-string">&quot;brandAgg&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;品牌&quot;</span>, brandList);<br>        <span class="hljs-comment">// 4.2.根据品牌名称，获取品牌结果</span><br>        List&lt;String&gt; cityList = getAggByName(aggregations, <span class="hljs-string">&quot;cityAgg&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;城市&quot;</span>, cityList);<br>        <span class="hljs-comment">// 4.3.根据品牌名称，获取品牌结果</span><br>        List&lt;String&gt; starList = getAggByName(aggregations, <span class="hljs-string">&quot;starAgg&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;星级&quot;</span>, starList);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildAggregation</span><span class="hljs-params">(SearchRequest request)</span> &#123;<br>    request.source().aggregation(AggregationBuilders<br>                                 .terms(<span class="hljs-string">&quot;brandAgg&quot;</span>)<br>                                 .field(<span class="hljs-string">&quot;brand&quot;</span>)<br>                                 .size(<span class="hljs-number">100</span>)<br>                                );<br>    request.source().aggregation(AggregationBuilders<br>                                 .terms(<span class="hljs-string">&quot;cityAgg&quot;</span>)<br>                                 .field(<span class="hljs-string">&quot;city&quot;</span>)<br>                                 .size(<span class="hljs-number">100</span>)<br>                                );<br>    request.source().aggregation(AggregationBuilders<br>                                 .terms(<span class="hljs-string">&quot;starAgg&quot;</span>)<br>                                 .field(<span class="hljs-string">&quot;starName&quot;</span>)<br>                                 .size(<span class="hljs-number">100</span>)<br>                                );<br>&#125;<br><br><span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">getAggByName</span><span class="hljs-params">(Aggregations aggregations, String aggName)</span> &#123;<br>    <span class="hljs-comment">// 4.1.根据聚合名称获取聚合结果</span><br>    <span class="hljs-type">Terms</span> <span class="hljs-variable">brandTerms</span> <span class="hljs-operator">=</span> aggregations.get(aggName);<br>    <span class="hljs-comment">// 4.2.获取buckets</span><br>    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();<br>    <span class="hljs-comment">// 4.3.遍历</span><br>    List&lt;String&gt; brandList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets) &#123;<br>        <span class="hljs-comment">// 4.4.获取key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>        brandList.add(key);<br>    &#125;<br>    <span class="hljs-keyword">return</span> brandList;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10、自动补全"><a href="#10、自动补全" class="headerlink" title="10、自动补全"></a>10、自动补全</h2><p>自动补全：当用户在搜索框输入字符时，提示出与该字符有关的搜索项。即根据用户输入的字母，提示完整词条的功能。</p><h3 id="10-1、拼音分词器"><a href="#10-1、拼音分词器" class="headerlink" title="10.1、拼音分词器"></a>10.1、拼音分词器</h3><p>GitHub 上恰好有 elasticsearch 的拼音分词插件。地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p><p>安装方式与 IK 分词器一样，分三步：</p><p>​ ① 解压</p><p>​ ② 上传到虚拟机中，elasticsearch 的 plugin 目录</p><p>​ ③ 重启 elasticsearch</p><h3 id="10-2、自定义分词器"><a href="#10-2、自定义分词器" class="headerlink" title="10.2、自定义分词器"></a>10.2、自定义分词器</h3><p>默认的拼音分词器会将每个汉字单独分为拼音，而我们希望的是每个词条形成一组拼音，需要对拼音分词器做个性化定制，形成自定义分词器。</p><p>elasticsearch 中分词器（analyzer）的组成包含三部分：</p><ul><li>character filters：在 tokenizer 之前对文本进行处理。例如删除字符、替换字符</li><li>tokenizer：将文本按照一定的规则切割成词条（term）。例如 keyword，就是不分词；还有 ik_smart</li><li>tokenizer filter：将 tokenizer 输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li></ul><p>声明自定义分词器的语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义分词器</span><br>        <span class="hljs-attr">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// 分词器名称</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义tokenizer filter</span><br>        <span class="hljs-attr">&quot;py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 过滤器名称</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 过滤器类型，这里是pinyin</span><br>  <span class="hljs-attr">&quot;keep_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_joined_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limit_first_letter_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;remove_duplicated_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>总结：</p><p>如何使用拼音分词器？</p><ul><li><p>① 下载 pinyin 分词器</p></li><li><p>② 解压并放到 elasticsearch 的 plugin 目录</p></li><li><p>③ 重启即可</p></li></ul><p>如何自定义分词器？</p><ul><li><p>① 创建索引库时，在 settings 中配置，可以包含三部分</p></li><li><p>②character filter</p></li><li><p>③tokenizer</p></li><li><p>④filter</p></li></ul><p>拼音分词器注意事项？</p><ul><li>为了避免搜索到同音字，搜索时不要使用拼音分词器</li></ul><h3 id="10-3、自动补全查询"><a href="#10-3、自动补全查询" class="headerlink" title="10.3、自动补全查询"></a>10.3、自动补全查询</h3><p>elasticsearch 提供 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/search-suggesters.html">Completion Suggester</a> 查询来实现自动补全功能。</p><p>该查询方式会匹配以用户输入内容开头的词条并返回。为了提高补全查询的效率，对于文档中字段的类型有一些约束：</p><ul><li><p>参与补全查询的字段必须是 completion 类型。</p></li><li><p>字段的内容一般是用来补全的多个词条形成的数组。</p></li></ul><p>比如，一个这样的索引库：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 创建索引库</span><br>PUT test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后插入下面的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 示例数据</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Sony&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;WH-1000XM3&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;SK-II&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PITERA&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Nintendo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;switch&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查询的 DSL 语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 自动补全查询</span><br>GET /test/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title_suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 关键字</span><br>      <span class="hljs-attr">&quot;completion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 补全查询的字段</span><br>        <span class="hljs-attr">&quot;skip_duplicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 跳过重复的</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span> <span class="hljs-comment">// 获取前10条结果</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="10-4、实现搜索框自动补全"><a href="#10-4、实现搜索框自动补全" class="headerlink" title="10.4、实现搜索框自动补全"></a>10.4、实现搜索框自动补全</h3><blockquote><p><strong>概述：</strong></p><ol><li><p>修改 hotel 索引库结构，设置自定义拼音分词器</p></li><li><p>修改索引库的 name、all 字段，使用自定义分词器</p></li><li><p>索引库添加一个新字段 suggestion，类型为 completion 类型，使用自定义的分词器</p></li><li><p>给 HotelDoc 类添加 suggestion 字段，内容包含 brand、business</p></li><li><p>重新导入数据到 hotel 库</p></li></ol></blockquote><h4 id="10-4-1、修改酒店映射结构"><a href="#10-4-1、修改酒店映射结构" class="headerlink" title="10.4.1、修改酒店映射结构"></a>10.4.1、修改酒店映射结构</h4><p>代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 酒店数据索引库</span><br>PUT /hotel<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;text_anlyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;completion_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_joined_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limit_first_letter_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;remove_duplicated_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text_anlyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;starName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;business&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;geo_point&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text_anlyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;suggestion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion_analyzer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="10-4-2、修改-HotelDoc-实体"><a href="#10-4-2、修改-HotelDoc-实体" class="headerlink" title="10.4.2、修改 HotelDoc 实体"></a>10.4.2、修改 HotelDoc 实体</h4><p>HotelDoc 中要添加一个字段，用来做自动补全，内容可以是酒店品牌、城市、商圈等信息。按照自动补全字段的要求，最好是这些字段的数组。因此我们在 HotelDoc 中添加一个 suggestion 字段，类型为<code>List&lt;String&gt;</code>，然后将 brand、city、business 等信息放到里面。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDoc</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> String pic;<br>    <span class="hljs-keyword">private</span> Object distance;<br>    <span class="hljs-keyword">private</span> Boolean isAD;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; suggestion;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HotelDoc</span><span class="hljs-params">(Hotel hotel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = hotel.getId();<br>        <span class="hljs-built_in">this</span>.name = hotel.getName();<br>        <span class="hljs-built_in">this</span>.address = hotel.getAddress();<br>        <span class="hljs-built_in">this</span>.price = hotel.getPrice();<br>        <span class="hljs-built_in">this</span>.score = hotel.getScore();<br>        <span class="hljs-built_in">this</span>.brand = hotel.getBrand();<br>        <span class="hljs-built_in">this</span>.city = hotel.getCity();<br>        <span class="hljs-built_in">this</span>.starName = hotel.getStarName();<br>        <span class="hljs-built_in">this</span>.business = hotel.getBusiness();<br>        <span class="hljs-built_in">this</span>.location = hotel.getLatitude() + <span class="hljs-string">&quot;, &quot;</span> + hotel.getLongitude();<br>        <span class="hljs-built_in">this</span>.pic = hotel.getPic();<br>        <span class="hljs-comment">// 组装suggestion</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.business.contains(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>            <span class="hljs-comment">// business有多个值，需要切割</span><br>            String[] arr = <span class="hljs-built_in">this</span>.business.split(<span class="hljs-string">&quot;/&quot;</span>);<br>            <span class="hljs-comment">// 添加元素</span><br>            <span class="hljs-built_in">this</span>.suggestion = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-built_in">this</span>.suggestion.add(<span class="hljs-built_in">this</span>.brand);<br>            Collections.addAll(<span class="hljs-built_in">this</span>.suggestion, arr);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.suggestion = Arrays.asList(<span class="hljs-built_in">this</span>.brand, <span class="hljs-built_in">this</span>.business);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-4-3、重新导入"><a href="#10-4-3、重新导入" class="headerlink" title="10.4.3、重新导入"></a>10.4.3、重新导入</h4><p>重新执行之前编写的导入数据功能，可以看到新的酒店数据中已包含 suggestion。</p><h4 id="10-4-4、自动补全查询的-JavaAPI"><a href="#10-4-4、自动补全查询的-JavaAPI" class="headerlink" title="10.4.4、自动补全查询的 JavaAPI"></a>10.4.4、自动补全查询的 JavaAPI</h4><p>自动补全查询 DSL 对应的 JavaAPI</p><p><img src="/images/es-restclient-autoSuggestion.png" alt="自动补全查询的JavaAPI"></p><p>解析自动补全结果的代码如下：</p><p><img src="/images/es-restclient-autoSuggestionResult.png" alt="解析自动补全结果"></p><h4 id="10-4-5、实现搜索框自动补全"><a href="#10-4-5、实现搜索框自动补全" class="headerlink" title="10.4.5、实现搜索框自动补全"></a>10.4.5、实现搜索框自动补全</h4><p>在前端页面输入框键入时会发起 ajax 请求：</p><p><img src="/images/es-restclient-autoSuggesteHttpJson.png" alt="前端页面"></p><p>返回值是补全词条的集合，类型为<code>List&lt;String&gt;</code></p><p>1）在<code>com.goes.hotel.web</code>包下的<code>HotelController</code>中添加新接口，接收新的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;suggestion&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getSuggestions</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String prefix)</span> &#123;<br>    <span class="hljs-keyword">return</span> hotelService.getSuggestions(prefix);<br>&#125;<br></code></pre></td></tr></table></figure><p>2）在<code>com.goes.hotel.service</code>包下的<code>IhotelService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; <span class="hljs-title function_">getSuggestions</span><span class="hljs-params">(String prefix)</span>;<br></code></pre></td></tr></table></figure><p>3）在<code>com.goes.hotel.service.impl.HotelService</code>中实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getSuggestions</span><span class="hljs-params">(String prefix)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">// 2.准备DSL</span><br>        request.source().suggest(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestBuilder</span>().addSuggestion(<br>            <span class="hljs-string">&quot;suggestions&quot;</span>,<br>            SuggestBuilders.completionSuggestion(<span class="hljs-string">&quot;suggestion&quot;</span>)<br>            .prefix(prefix)<br>            .skipDuplicates(<span class="hljs-literal">true</span>)<br>            .size(<span class="hljs-number">10</span>)<br>        ));<br>        <span class="hljs-comment">// 3.发起请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">// 4.解析结果</span><br>        <span class="hljs-type">Suggest</span> <span class="hljs-variable">suggest</span> <span class="hljs-operator">=</span> response.getSuggest();<br>        <span class="hljs-comment">// 4.1.根据补全查询名称，获取补全结果</span><br>        <span class="hljs-type">CompletionSuggestion</span> <span class="hljs-variable">suggestions</span> <span class="hljs-operator">=</span> suggest.getSuggestion(<span class="hljs-string">&quot;suggestions&quot;</span>);<br>        <span class="hljs-comment">// 4.2.获取options</span><br>        List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestions.getOptions();<br>        <span class="hljs-comment">// 4.3.遍历</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(options.size());<br>        <span class="hljs-keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> option.getText().toString();<br>            list.add(text);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11、数据同步"><a href="#11、数据同步" class="headerlink" title="11、数据同步"></a>11、数据同步</h2><p>Elasticsearch 的数据来自于 mysql 数据库，因此 mysql 数据发生改变时，elasticsearch 也必须跟着改变，即 elasticsearch 与 mysql 之间的<strong>数据同步</strong>。</p><h3 id="11-1、思路分析"><a href="#11-1、思路分析" class="headerlink" title="11.1、思路分析"></a>11.1、思路分析</h3><p>常见的数据同步方案有三种：</p><ul><li>同步调用</li><li>异步通知</li><li>监听 binlog</li></ul><h4 id="11-1-1、同步调用"><a href="#11-1-1、同步调用" class="headerlink" title="11.1.1、同步调用"></a>11.1.1、同步调用</h4><p>方案一：同步调用</p><p><img src="/images/es-dataTongBu.png" alt="同步调用"></p><p>基本步骤如下：</p><ul><li>hotel-demo 对外提供接口，用来修改 elasticsearch 中的数据</li><li>酒店管理服务在完成数据库操作后，直接调用 hotel-demo 提供的接口，</li></ul><h4 id="11-1-2、异步通知"><a href="#11-1-2、异步通知" class="headerlink" title="11.1.2、异步通知"></a>11.1.2、异步通知</h4><p>方案二：异步通知</p><p><img src="/images/es-dataYiBu.png" alt="异步通知"></p><p>流程如下：</p><ul><li>hotel-admin 对 mysql 数据库数据完成增、删、改后，发送 MQ 消息</li><li>hotel-demo 监听 MQ，接收到消息后完成 elasticsearch 数据修改</li></ul><h4 id="11-1-3、监听-binlog"><a href="#11-1-3、监听-binlog" class="headerlink" title="11.1.3、监听 binlog"></a>11.1.3、监听 binlog</h4><p>方案三：监听 binlog</p><p><img src="/images/es-dataJianTing-BinLog.png" alt="监听binlog"></p><p>流程如下：</p><ul><li>给 mysql 开启 binlog 功能</li><li>mysql 完成增、删、改操作都会记录在 binlog 中</li><li>hotel-demo 基于 canal 监听 binlog 变化，实时更新 elasticsearch 中的内容</li></ul><h4 id="11-1-4、选择"><a href="#11-1-4、选择" class="headerlink" title="11.1.4、选择"></a>11.1.4、选择</h4><p>方式一：同步调用</p><ul><li>优点：实现简单，粗暴</li><li>缺点：业务耦合度高</li></ul><p>方式二：异步通知</p><ul><li>优点：低耦合，实现难度一般</li><li>缺点：依赖 mq 的可靠性</li></ul><p>方式三：监听 binlog</p><ul><li>优点：完全解除服务间耦合</li><li>缺点：开启 binlog 增加数据库负担、实现复杂度高</li></ul><h3 id="11-2、实现数据同步"><a href="#11-2、实现数据同步" class="headerlink" title="11.2、实现数据同步"></a>11.2、实现数据同步</h3><h4 id="11-2-1、思路"><a href="#11-2-1、思路" class="headerlink" title="11.2.1、思路"></a>11.2.1、思路</h4><p>当酒店数据发生增、删、改时，要求对 elasticsearch 中数据也要完成相同操作。</p><p>步骤：</p><ul><li><p>启动酒店管理项目并测试酒店数据的 CRUD</p></li><li><p>声明 exchange、queue、RoutingKey</p></li><li><p>在酒店管理中的增、删、改业务中完成消息发送</p></li><li><p>在 es 微服务中完成消息监听，并更新 elasticsearch 中数据</p></li><li><p>启动并测试数据同步功能</p></li></ul><h4 id="11-2-2、创建项目"><a href="#11-2-2、创建项目" class="headerlink" title="11.2.2、创建项目"></a>11.2.2、创建项目</h4><h4 id="11-2-3、声明交换机、队列"><a href="#11-2-3、声明交换机、队列" class="headerlink" title="11.2.3、声明交换机、队列"></a>11.2.3、声明交换机、队列</h4><p>MQ 结构如图：</p><p><img src="/images/es-dataTB-MqStructure.png" alt="MQ结构"></p><p>1）引入依赖</p><p>在项目引入 rabbitmq 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--amqp--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）声明队列交换机名称</p><p>在 <code>com.goes.hotel.constatnts</code> 包下新建类<code>MqConstants</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConstants</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.topic&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听新增和修改的队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_INSERT_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.insert.queue&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听删除的队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_DELETE_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.delete.queue&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增或修改的RoutingKey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_INSERT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.insert&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除的RoutingKey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_DELETE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.delete&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3）声明队列交换机</p><p>定义配置类，声明队列、交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.goes.hotel.constants.MqConstants;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.TopicExchange;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title function_">topicExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicExchange</span>(MqConstants.HOTEL_EXCHANGE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">insertQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(MqConstants.HOTEL_INSERT_QUEUE, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">deleteQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(MqConstants.HOTEL_DELETE_QUEUE, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">insertQueueBinding</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(insertQueue()).to(topicExchange()).with(MqConstants.HOTEL_INSERT_KEY);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">deleteQueueBinding</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(deleteQueue()).to(topicExchange()).with(MqConstants.HOTEL_DELETE_KEY);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-2-4、发送-MQ-消息"><a href="#11-2-4、发送-MQ-消息" class="headerlink" title="11.2.4、发送 MQ 消息"></a>11.2.4、发送 MQ 消息</h4><p>在 hotel-admin 中的增、删、改业务中分别发送 MQ 消息：</p><p><img src="/images/es-dataTB-crudMq.png" alt="增、删、改业务中分别发送MQ消息"></p><h4 id="11-2-5、接收-MQ-消息"><a href="#11-2-5、接收-MQ-消息" class="headerlink" title="11.2.5、接收 MQ 消息"></a>11.2.5、接收 MQ 消息</h4><p>hotel-demo 接收到 MQ 消息要做的事情包括：</p><ul><li>新增消息：根据传递的 hotel 的 id 查询 hotel 信息，然后新增一条数据到索引库</li><li>删除消息：根据传递的 hotel 的 id 删除索引库中的一条数据</li></ul><p>1）首先在 hotel-demo 的<code>com.goes.hotel.service</code>包下的<code>IHotelService</code>中新增新增、删除业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>2）给 hotel-demo 中的<code>com.goes.hotel.service.impl</code>包下的 HotelService 中实现业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, id.toString());<br>        <span class="hljs-comment">// 2.发送请求</span><br>        client.delete(request, RequestOptions.DEFAULT);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 0.根据id查询酒店数据</span><br>        <span class="hljs-type">Hotel</span> <span class="hljs-variable">hotel</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-comment">// 转换为文档类型</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br><br>        <span class="hljs-comment">// 1.准备Request对象</span><br>        <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>).id(hotel.getId().toString());<br>        <span class="hljs-comment">// 2.准备Json文档</span><br>        request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);<br>        <span class="hljs-comment">// 3.发送请求</span><br>        client.index(request, RequestOptions.DEFAULT);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3）编写监听器</p><p>在 hotel-demo 中的<code>com.goes.hotel.mq</code>包新增一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.goes.hotel.constants.MqConstants;<br><span class="hljs-keyword">import</span> com.goes.hotel.service.IHotelService;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelListener</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService hotelService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听酒店新增或修改的业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 酒店id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitListener(queues = MqConstants.HOTEL_INSERT_QUEUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenHotelInsertOrUpdate</span><span class="hljs-params">(Long id)</span>&#123;<br>        hotelService.insertById(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听酒店删除的业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 酒店id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitListener(queues = MqConstants.HOTEL_DELETE_QUEUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenHotelDelete</span><span class="hljs-params">(Long id)</span>&#123;<br>        hotelService.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12、集群"><a href="#12、集群" class="headerlink" title="12、集群"></a>12、集群</h2><p>单机的 elasticsearch 做数据存储，必然面临两个问题：海量数据存储问题、单点故障问题。</p><ul><li>海量数据存储问题：将索引库从逻辑上拆分为 N 个分片（shard），存储到多个节点</li><li>单点故障问题：将分片数据在不同节点备份（replica ）</li></ul><p><strong>ES 集群相关概念</strong>:</p><ul><li><p>集群（cluster）：一组拥有共同的 cluster name 的 节点。</p></li><li><p><font color="red">节点（node)</font> ：集群中的一个 Elasticearch 实例</p></li><li><p><font color="red">分片（shard）</font>：索引可以被拆分为不同的部分进行存储，称为分片。在集群环境下，一个索引的不同分片可以拆分到不同的节点中</p><p>解决问题：数据量太大，单点存储量有限的问题。</p><p><img src="/images/es-cluster" alt="image-20200104124440086"></p><blockquote><p>此处，我们把数据分成 3 片：shard0、shard1、shard2</p></blockquote></li><li><p>主分片（Primary shard）：相对于副本分片的定义。</p></li><li><p>副本分片（Replica shard）每个主分片可以有一个或者多个副本，数据和主分片一样。</p><p>​</p></li></ul><p>数据备份可以保证高可用，但是每个分片备份一份，所需要的节点数量就会翻一倍，成本实在是太高了！</p><p>为了在高可用和成本间寻求平衡，我们可以这样做：</p><ul><li>首先对数据分片，存储到不同节点</li><li>然后对每个分片进行备份，放到对方节点，完成互相备份</li></ul><p>这样可以大大减少所需要的服务节点数量，如图，我们以 3 分片，每个分片备份一份为例：</p><p><img src="/images/es-cluster1" alt="image-20200104124551912"></p><p>现在，每个分片都有 1 个备份，存储在 3 个节点：</p><ul><li>node0：保存了分片 0 和 1</li><li>node1：保存了分片 0 和 2</li><li>node2：保存了分片 1 和 2</li></ul><h3 id="12-1、搭建-ES-集群"><a href="#12-1、搭建-ES-集群" class="headerlink" title="12.1、搭建 ES 集群"></a>12.1、搭建 ES 集群</h3><p>⚠️ 部署 es 集群可以直接使用 docker-compose 来完成，不过要求 Linux 虚拟机至少有<strong>4G</strong>的内存空间</p><p>编写 docker-compose 文件，内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs sh">version: <span class="hljs-string">&#x27;2.2&#x27;</span><br>services:<br>  es01:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1<br>    container_name: es01<br>    environment:<br>      - node.name=es01<br>      - cluster.name=es-docker-cluster<br>      - discovery.seed_hosts=es02,es03<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - bootstrap.memory_lock=<span class="hljs-literal">true</span><br>      - <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    ulimits:<br>      memlock:<br>        soft: -1<br>        hard: -1<br>    volumes:<br>      - data01:/usr/share/elasticsearch/data<br>    ports:<br>      - 9200:9200<br>    networks:<br>      - elastic<br>  es02:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1<br>    container_name: es02<br>    environment:<br>      - node.name=es02<br>      - cluster.name=es-docker-cluster<br>      - discovery.seed_hosts=es01,es03<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - bootstrap.memory_lock=<span class="hljs-literal">true</span><br>      - <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    ulimits:<br>      memlock:<br>        soft: -1<br>        hard: -1<br>    volumes:<br>      - data02:/usr/share/elasticsearch/data<br>    networks:<br>      - elastic<br>  es03:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1<br>    container_name: es03<br>    environment:<br>      - node.name=es03<br>      - cluster.name=es-docker-cluster<br>      - discovery.seed_hosts=es01,es02<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - bootstrap.memory_lock=<span class="hljs-literal">true</span><br>      - <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    ulimits:<br>      memlock:<br>        soft: -1<br>        hard: -1<br>    volumes:<br>      - data03:/usr/share/elasticsearch/data<br>    networks:<br>      - elastic<br><br>volumes:<br>  data01:<br>    driver: <span class="hljs-built_in">local</span><br>  data02:<br>    driver: <span class="hljs-built_in">local</span><br>  data03:<br>    driver: <span class="hljs-built_in">local</span><br><br>networks:<br>  elastic:<br>    driver: bridge<br></code></pre></td></tr></table></figure><p>运行<code>docker-compose</code> 启动部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose up<br></code></pre></td></tr></table></figure><h3 id="12-2、集群脑裂问题"><a href="#12-2、集群脑裂问题" class="headerlink" title="12.2、集群脑裂问题"></a>12.2、集群脑裂问题</h3><h4 id="12-2-1、集群职责划分"><a href="#12-2-1、集群职责划分" class="headerlink" title="12.2.1、集群职责划分"></a>12.2.1、集群职责划分</h4><p>elasticsearch 中集群节点有不同的职责划分：</p><p><img src="/images/es-JQ-identity.png" alt="集群职责划分"></p><p>默认情况下，集群中的任何一个节点都同时具备上述四种角色。</p><p>但是真实的集群一定要将集群职责分离：</p><ul><li>master 节点：对 CPU 要求高，但是内存要求第</li><li>data 节点：对 CPU 和内存要求都高</li><li>coordinating 节点：对网络带宽、CPU 要求高</li></ul><p>职责分离可以让我们根据不同节点的需求分配不同的硬件去部署。而且避免业务之间的互相干扰。</p><p>一个典型的 es 集群职责划分如图：</p><p><img src="/images/es-JQ-classic-Identity.png" alt="典型的es集群职责划分"></p><h4 id="12-2-2、脑裂问题"><a href="#12-2-2、脑裂问题" class="headerlink" title="12.2.2、脑裂问题"></a>12.2.2、脑裂问题</h4><p>脑裂是因为集群中的节点失联导致的。</p><p>例如一个集群中，主节点与其它节点失联：</p><p><img src="/images/es-JQ-naoLie1.png" alt="es-JQ-naoLie1"></p><p>此时，node2 和 node3 认为 node1 宕机，就会重新选主：</p><p><img src="/images/es-JQ-naoLie2.png" alt="es-JQ-naoLie2"></p><p>当 node3 当选后，集群继续对外提供服务，node2 和 node3 自成集群，node1 自成集群，两个集群数据不同步，出现数据差异。</p><p>当网络恢复后，因为集群中有两个 master 节点，集群状态的不一致，出现脑裂的情况：</p><p><img src="/images/es-JQ-naoLie3.png" alt="es-JQ-naoLie3"></p><p>解决脑裂的方案是，要求选票超过 ( eligible 节点数量 + 1 ）&#x2F; 2 才能当选为主，因此 eligible 节点数量最好是奇数。对应配置项是 discovery.zen.minimum_master_nodes，在 es7.0 以后，已经成为默认配置，因此一般不会发生脑裂问题</p><p>例如：3 个节点形成的集群，选票必须超过 （3 + 1） &#x2F; 2 ，也就是 2 票。node3 得到 node2 和 node3 的选票，当选为主。node1 只有自己 1 票，没有当选。集群中依然只有 1 个主节点，没有出现脑裂。</p><h4 id="12-2-3、小结"><a href="#12-2-3、小结" class="headerlink" title="12.2.3、小结"></a>12.2.3、小结</h4><p>master eligible 节点的作用是什么？</p><ul><li>参与集群选主</li><li>主节点可以管理集群状态、管理分片信息、处理创建和删除索引库的请求</li></ul><p>data 节点的作用是什么？</p><ul><li>数据的 CRUD</li></ul><p>coordinator 节点的作用是什么？</p><ul><li><p>路由请求到其它节点</p></li><li><p>合并查询到的结果，返回给用户</p></li></ul><h3 id="12-3、集群分布式存储"><a href="#12-3、集群分布式存储" class="headerlink" title="12.3、集群分布式存储"></a>12.3、集群分布式存储</h3><p>当新增文档时，应该保存到不同分片，保证数据均衡，那么 coordinating node 如何确定数据该存储到哪个分片呢？</p><h4 id="12-3-1、分片存储测试"><a href="#12-3-1、分片存储测试" class="headerlink" title="12.3.1、分片存储测试"></a>12.3.1、分片存储测试</h4><blockquote><p>随便添加一些数据到 ES</p></blockquote><h4 id="12-3-2、分片存储原理"><a href="#12-3-2、分片存储原理" class="headerlink" title="12.3.2、分片存储原理"></a>12.3.2、分片存储原理</h4><p>elasticsearch 会通过 hash 算法来计算文档应该存储到哪个分片：</p><p><img src="/images/es-JQ-addHash.png" alt="分片存储原理"></p><p>说明：</p><ul><li>_routing 默认是文档的 id</li><li>算法与分片数量有关，因此索引库一旦创建，分片数量不能修改！</li></ul><p>新增文档的流程如下：</p><p><img src="/images/es-JQ-add-liuCheng.png" alt="新增文档的流程"></p><p>解读：</p><ul><li>1）新增一个 id&#x3D;1 的文档</li><li>2）对 id 做 hash 运算，假如得到的是 2，则应该存储到 shard-2</li><li>3）shard-2 的主分片在 node3 节点，将数据路由到 node3</li><li>4）保存文档</li><li>5）同步给 shard-2 的副本 replica-2，在 node2 节点</li><li>6）返回结果给 coordinating-node 节点</li></ul><h3 id="12-4、集群分布式查询"><a href="#12-4、集群分布式查询" class="headerlink" title="12.4、集群分布式查询"></a>12.4、集群分布式查询</h3><p>elasticsearch 的查询分成两个阶段：</p><ul><li><p>scatter phase：分散阶段，coordinating node 会把请求分发到每一个分片</p></li><li><p>gather phase：聚集阶段，coordinating node 汇总 data node 的搜索结果，并处理为最终结果集返回给用户</p></li></ul><p><img src="/images/es-JQ-select.png" alt="集群分布式查询"></p><h3 id="12-5、集群故障转移"><a href="#12-5、集群故障转移" class="headerlink" title="12.5、集群故障转移"></a>12.5、集群故障转移</h3><p>集群的 master 节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其它节点，确保数据安全，这个叫做故障转移。</p><p>1）例如一个集群结构如图：</p><p><img src="/images/es-JQ-guZhang1.png" alt="es-JQ-guZhang1"></p><p>现在，node1 是主节点，其它两个节点是从节点。</p><p>2）突然，node1 发生了故障：</p><p><img src="/images/es-JQ-guZhang2.png" alt="es-JQ-guZhang2"></p><p>宕机后的第一件事，需要重新选主，例如选中了 node2：</p><p><img src="/images/es-JQ-guZhang3.png" alt="es-JQ-guZhang3"></p><p>node2 成为主节点后，会检测集群监控状态，发现：shard-1、shard-0 没有副本节点。因此需要将 node1 上的数据迁移到 node2、node3：</p><p><img src="/images/es-JQ-guZhang4.png" alt="es-JQ-guZhang4"></p>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EnvConfig</title>
    <link href="/2024/04/25/EnvConfig/"/>
    <url>/2024/04/25/EnvConfig/</url>
    
    <content type="html"><![CDATA[<blockquote><p>常用命令：</p><p>1、杀掉某占用端口号的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">window</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1、查找对应进程</span><br>netstat -ano | findstr &quot;端口号&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2、关闭进程</span><br>taskkill /f /t /im &quot;进程id号&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">linux</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1、查找对应进程</span><br>netstat -tln | grep &quot;端口号&quot;<br>ps -ef | grep java  # 查看 java 是否彻底关闭<br>ps -ef | grep tomcat  # 查看 tomcat 是否开启<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2、关闭进程</span><br>kill -9 &quot;进程id号&quot;<br></code></pre></td></tr></table></figure></blockquote><h1 id="Window"><a href="#Window" class="headerlink" title="Window"></a><code>Window</code></h1><h2 id="一、JDK环境配置"><a href="#一、JDK环境配置" class="headerlink" title="一、JDK环境配置"></a>一、<code>JDK</code>环境配置</h2><p>1、在高级环境设置中的系统变量 <code>path</code> 添加 <code>JDK</code> 的资源配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># bin目录</span><br>jdkInstallPath\bin<br><span class="hljs-comment"># jre\bin 目录</span><br>jdkInstallPath\jre\bin<br></code></pre></td></tr></table></figure><p>2、 验证配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 打开终端cmd</span><br>java -version<br></code></pre></td></tr></table></figure><h2 id="二、MySQL环境配置-压缩包解压方式"><a href="#二、MySQL环境配置-压缩包解压方式" class="headerlink" title="二、MySQL环境配置(压缩包解压方式)"></a>二、<code>MySQL</code>环境配置(压缩包解压方式)</h2><p>1、在安装添加文件 <code>mysql.ini</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">[mysql]<br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br>default-character-set=utf8<br><br>[mysqld]<br><span class="hljs-comment">#设置3306端口</span><br>port = 3306<br><span class="hljs-comment"># 设置mysql的安装目录（重点）</span><br>basedir=mysqlInstallPath<br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录（重点）</span><br>datadir=mysqlInstallPath\data<br><span class="hljs-comment"># 允许最大连接数</span><br>max_connections=200<br><span class="hljs-comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br>character-set-server=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br>default-storage-engine=INNODB<br></code></pre></td></tr></table></figure><p>2、在高级环境设置中的系统变量 <code>path</code> 添加 <code>mysql</code> 的资源配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># bin目录</span><br>mysqlInstallPath\bin<br></code></pre></td></tr></table></figure><p>3、打开终端 <code>cmd</code> 进入到 <code>mysql\bin</code> 目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 初始化数据库</span><br>mysqld --initialize<br><span class="hljs-comment"># 完成后安装目录下会出现文件夹data,该文件夹下的xxx.err文件里有mysql的root用户的临时密码</span><br></code></pre></td></tr></table></figure><p>4、以管理员身份打开终端并进入到安装目录：<code>mysql\bin</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 若并非首次安装MySQL需要先执行：sc delete mysql（防止上次安装的MySQL服务冲突）</span><br><span class="hljs-comment"># 开启mysql服务</span><br>mysqld --install<br>net start mysql<br><br><span class="hljs-comment"># 进入MySQL并输入临时生成的密码</span><br>mysql -uroot -p<br><br><span class="hljs-comment"># 修改密码(newPassword:替换为新密码)</span><br>alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;newPassword&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><code>Linux</code></h1><h2 id="设置虚拟机静态-IP"><a href="#设置虚拟机静态-IP" class="headerlink" title="设置虚拟机静态 IP"></a>设置虚拟机静态 IP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">BOOTPROTO=&quot;static&quot; # 默认dhcp动态IP<br>IPADDR=&quot;192.168.100.134&quot;<br>NETMASK=&quot;255.255.255.0&quot;<br>GATEWAY=&quot;192.168.100.2&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">静态IP及网关前三位与虚拟机配置须一致</span><br></code></pre></td></tr></table></figure><p>重启网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">service network restart<br>或<br>systemctl restart network<br></code></pre></td></tr></table></figure><h2 id="防火墙命令操作"><a href="#防火墙命令操作" class="headerlink" title="防火墙命令操作"></a>防火墙命令操作</h2><p>1、查看开启关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看防火墙状态</span><br>systemctl status firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启</span><br>systemctl start firewalld<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">永久关闭</span><br>systemctl disable firewalld<br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复</span><br>systemctl enable firewalld<br></code></pre></td></tr></table></figure><p>2、开放&#x2F;关闭指定端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开放指定端口</span><br>firewall-cmd --zone=public --add-port=3306/tcp --permanent # 永久开启<br>firewall-cmd --zone=public --add-port=3306/tcp    # 临时<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭指定端口</span><br>firewall-cmd --zone=public --remove-port=3306/tcp --permanent #永久关闭<br><br>命令含义：<br>--zone # 作用域<br>--add-port=3306/tcp # 添加端口，格式为：端口/通讯协议<br>--remove-port=3306/tcp # 移除端口，格式为：端口/通讯协议<br>--permanent # 永久生效，没有此参数重启后失效<br><br><br></code></pre></td></tr></table></figure><p>3、重新加载防火墙配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>4、查看端口号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -ntlp  # 查看当前所有tcp端口<br>netstat -ntulp | grep 1935  # 查看所有1935端口使用情况<br></code></pre></td></tr></table></figure><p>5、查看已开放端口号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --zone=public --list-ports<br></code></pre></td></tr></table></figure><p>6、查看防火墙状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --state # 查看状态<br></code></pre></td></tr></table></figure><h2 id="一、JDK-环境配置"><a href="#一、JDK-环境配置" class="headerlink" title="一、JDK 环境配置"></a>一、JDK 环境配置</h2><p>解压安装 jdk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入存放安装包的 /root/ 目录</span><br>cd /root/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建安装目录</span><br>mkdir /usr/local/java/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压安装包</span><br>tar -zxvf jdk-8u341-linux-x64.tar.gz -C /usr/local/java/<br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">用vi命令打开全局配置文件/etc/profile</span><br>vi /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件末尾添加环境变量配置：</span><br>export JAVA_HOME=/usr/local/java/jdk1.8.0_341<br>export PATH=$JAVA_HOME/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># export JRE_HOME=$JAVA_HOME/jre</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">按 i键：进入文本输入模式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">按 Esc 键：退出文本输入模式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">按 <span class="hljs-built_in">shift</span>+i 键：进入末行模式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输入 wq 回车：保存并退出</span><br></code></pre></td></tr></table></figure><p>使配置文件生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查 java 命令</span><br>java<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查编译命令</span><br>javac<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看JDK版本</span><br>java -version<br></code></pre></td></tr></table></figure><h2 id="二、MySQL-环境配置"><a href="#二、MySQL-环境配置" class="headerlink" title="二、MySQL 环境配置"></a>二、MySQL 环境配置</h2><p><strong>解压并安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">解压MySQL压缩包</span><br>tar -zvxf mysql-(x.x.x).tar -C /usr/local/mysql<br><br>-- 参数解析<br>-C /usr/local/mysql # 指定解压到目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">按顺序安装下列内容</span><br>rpm -ivh mysql-community-common-5.7.31-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.31-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-compat-5.7.31-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.31-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.31-1.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><p><strong>启动 MySQL 命令</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">systemctl start mysqld  <span class="hljs-comment">//开启</span><br>systemctl status mysqld  <span class="hljs-comment">//查看状态</span><br>systemctl <span class="hljs-keyword">stop</span> mysqld  <span class="hljs-comment">//停止</span><br>systemctl restart mysqld  <span class="hljs-comment">//重启</span><br>systemctl <span class="hljs-keyword">disable</span> mysqld  <span class="hljs-comment">//禁止开机自动启动</span><br>systemctl <span class="hljs-keyword">enable</span> mysqld <span class="hljs-comment">//允许开机自动启动</span><br></code></pre></td></tr></table></figure><p><strong>搜索临时密码</strong></p><p>临时 root 密码在<code>/var/log/mysqld.log</code>文件中<br>① 进入编辑器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /var/log/mysqld.log<br><span class="hljs-meta prompt_">#</span><span class="language-bash">非编辑状态输入搜索目标</span><br>:/password<br></code></pre></td></tr></table></figure><p>② 用 grep 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &quot;password&quot; /var/log/mysqld.log<br></code></pre></td></tr></table></figure><p><strong>登录连接 MySQL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -uroot -p<br></code></pre></td></tr></table></figure><p><strong>修改密码并设置权限</strong></p><p>① 取消密码复杂度的验证 (默认要求密码中必须包含大小写字母、数字和特殊字符，安全性要求非常高)，降低策略要求</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_policy=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>② 取消密码的长度限制 (默认要求密码必须大于 8 位)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_length=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>③ 修改 root 用户的密码为 root 或自定义密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><code>Docker</code></h1><p><strong><code>建议：在根目录创建“myData目录”，每创建一个容器就创建以容器命名的目录，存放其配置文件</code></strong></p><blockquote><p>安装流程：(CentOS)</p><p>当您卸载 Docker 时， <code>/var/lib/docker/</code> 中存储的图像、容器、卷和网络不会自动删除</p><ol><li><p>卸载旧版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br></code></pre></td></tr></table></figure></li><li><p>使用 rpm 存储库安装</p><p>安装 <code>yum-utils</code> 包（提供 <code>yum-config-manager</code> 实用程序）并设置存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure></li><li><p>启动 Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl start docker<br></code></pre></td></tr></table></figure></li></ol><p>设置开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable docker<br></code></pre></td></tr></table></figure><p>配置镜像加速：</p><p><code>通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://7b7tdpps.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p><strong>Docker 常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动docker</span><br>systemctl start docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机自启docker</span><br>systemctl enable docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker</span><br>systemctl restart docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置某容器开机自启</span><br>docker update xxx --restart=always<br><span class="hljs-meta prompt_"># </span><span class="language-bash">例：docker update redis --restart=always</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="一、MySQL环境配置"><a href="#一、MySQL环境配置" class="headerlink" title="一、MySQL环境配置"></a>一、<code>MySQL</code>环境配置</h2><p><strong>安装步骤</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装最新版本</span><br>docker pull mysql<br><span class="hljs-comment">#安装指定版本</span><br>docker pull mysql:x.x.x<br></code></pre></td></tr></table></figure><p><strong>创建实例并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 3306:3306 --name mysql \<br>-v /mydata/mysql/log:/var/log/mysql \<br>-v /mydata/mysql/data:/var/lib/mysql \<br>-v /mydata/mysql/conf:/etc/mysql \<br>-e MYSQL_ROOT_PASSWORD=root \<br>-d mysql:5.7<br><br>参数说明<br>-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口<br>-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机<br>-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机<br>-v /mydata/mysql/data:/var/lib/mysql/：将配置文件夹挂载到主机-e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码<br></code></pre></td></tr></table></figure><p><strong>进入容器内部</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mysql /bin/bash<br></code></pre></td></tr></table></figure><p><strong>配置 MySQL 配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用vi编译my.cnf文件</span><br>vi /mydata/mysql/conf/my.cnf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将以下内容写入my.cnf文件</span><br>[client]<br>default-character-set=utf8<br><br>[mysql]<br>default-character-set=utf8<br><br>[mysqld]<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>skip-name-resolve<br></code></pre></td></tr></table></figure><p>注意：解决 MySQL 连接慢的问题</p><p>在配置文件中加入如下，并重启 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>skip-name-resolve<br><br>解释：<br>skip-name-resolve：跳过域名解析<br></code></pre></td></tr></table></figure><h2 id="二、Redis-环境配置"><a href="#二、Redis-环境配置" class="headerlink" title="二、Redis 环境配置"></a>二、<code>Redis </code>环境配置</h2><p>1、下载镜像文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis<br></code></pre></td></tr></table></figure><p>2、创建实例并启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /mydata/redis/conf<br>touch /mydata/redis/conf/redis.conf<br><br>docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \<br>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><h2 id="三、Nacos环境配置"><a href="#三、Nacos环境配置" class="headerlink" title="三、Nacos环境配置"></a>三、<code>Nacos</code>环境配置</h2><p>1、下载镜像文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nacos/nacos-server:1.1.3<br></code></pre></td></tr></table></figure><p>2、查看并开放指定端口号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开放指定防火墙端口(访问客户端的端口号)</span><br>firewall-cmd --zone=public --add-port=8848/tcp --permanent<br></code></pre></td></tr></table></figure><p>3、创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name nacos \<br>-e MODE=standalone -p 8848:8848 \<br>-d nacos/nacos-server:1.1.3<br></code></pre></td></tr></table></figure><h2 id="四、ElasticSerch"><a href="#四、ElasticSerch" class="headerlink" title="四、ElasticSerch"></a>四、<code>ElasticSerch</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开放指定防火墙端口(访问客户端的端口号)</span><br>firewall-cmd --zone=public --add-port=9200/tcp --permanent<br></code></pre></td></tr></table></figure><p>1、下载镜像文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.4.2  # 存储和检索数据<br></code></pre></td></tr></table></figure><p>2、创建配置存放目录及关联配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件目录</span><br>mkdir -p /mydata/elasticsearch/config<br>mkdir -p /mydata/elasticsearch/data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关联配置文件</span><br>echo &quot;http.host: 0.0.0.0&quot; &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml<br></code></pre></td></tr></table></figure><p>3、开放读写权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">保证权限</span><br>chmod -R 777 /mydata/elasticsearch/<br></code></pre></td></tr></table></figure><p>4、创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \<br>-e &quot;discovery.type=single-node&quot; \<br>-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \<br>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \<br>-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \<br>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \<br>-d elasticsearch:7.4.2<br></code></pre></td></tr></table></figure><h2 id="五、Kibana"><a href="#五、Kibana" class="headerlink" title="五、Kibana"></a>五、<code>Kibana</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开放指定防火墙端口(访问客户端的端口号)</span><br>firewall-cmd --zone=public --add-port=5601/tcp --permanent<br></code></pre></td></tr></table></figure><p>1、下载镜像文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull kibana:7.4.2  # 可视化检索数据<br></code></pre></td></tr></table></figure><p>2、创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.100.134:9200 -p 5601:5601 \<br>-d kibana:7.4.2<br></code></pre></td></tr></table></figure><h2 id="六、Nginx"><a href="#六、Nginx" class="headerlink" title="六、Nginx"></a>六、<code>Nginx</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开放指定防火墙端口</span><br>firewall-cmd --zone=public --add-port=80/tcp --permanent<br></code></pre></td></tr></table></figure><p>1、下载镜像文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx:1.10<br></code></pre></td></tr></table></figure><p>2、创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 80:80 --name nginx -d nginx:1.10<br></code></pre></td></tr></table></figure><p>附：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 80:80 --name nginx \<br>-v /mydata/nginx/html:/usr/share/nginx/html \<br>-v /mydata/nginx/logs:/var/log/nginx \<br>-v /mydata/nginx/conf:/etc/nginx \<br>-d nginx:1.10<br></code></pre></td></tr></table></figure><p>Nginx 反向代理：<a href="ShopMall.md">Nginx 的简单使用</a></p><h2 id="七、RabbitMQ"><a href="#七、RabbitMQ" class="headerlink" title="七、RabbitMQ"></a>七、<code>RabbitMQ</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开放指定防火墙端口(访问客户端的端口号)</span><br>firewall-cmd --zone=public --add-port=15671/tcp --permanent<br></code></pre></td></tr></table></figure><p>1、下载镜像文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull rabbitmq:management<br></code></pre></td></tr></table></figure><p>2、创建容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management<br></code></pre></td></tr></table></figure><h2 id="八、Seata"><a href="#八、Seata" class="headerlink" title="八、Seata"></a>八、<code>Seata</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开放指定防火墙端口(访问客户端的端口号)</span><br>firewall-cmd --zone=public --add-port=8091/tcp --permanent<br></code></pre></td></tr></table></figure><p>1、下载镜像文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull seataio/seata-server:1.0.0<br></code></pre></td></tr></table></figure><p>2、创建容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name seata -p 8091:8091 -e SEATA_IP=192.168.100.134 -e SEATA_PORT=8091 seataio/seata-server:1.0.0<br></code></pre></td></tr></table></figure><p>3、修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将容器内的目录复制到主机目录中（/mydata/seata）</span><br>docker cp seata:seata-server/resources /mydata/seata<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改文件：register.conf</span><br>registry &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br>  type = &quot;nacos&quot;<br><br>  nacos &#123;<br>    serverAddr = &quot;192.168.100.134:8848&quot;<br>    namespace = &quot;public&quot;<br>    cluster = &quot;default&quot;<br>  &#125;<br>&#125;<br>config &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">file、nacos 、apollo、zk、consul、etcd3</span><br><br>  type = &quot;file&quot;<br>  file &#123;<br>    name = &quot;file.conf&quot;<br>  &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改文件：file.conf</span><br>service &#123;<br>  vgroup_mapping.my_test_tx_group = &quot;default&quot;<br>  default.grouplist = &quot;192.168.100.134:8091&quot;<br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-built_in">disable</span> seata</span><br>  disableGlobalTransaction = false<br>&#125;<br><br>store &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">store mode: file、db</span><br>  mode = &quot;db&quot;<br>  db &#123;<br>    datasource = &quot;dbcp&quot;<br><br>    # 手动创建mysql数据库（seata）及表（undo_log）<br>    db-type = &quot;mysql&quot;<br>    driver-class-name = &quot;com.mysql.jdbc.Driver&quot;<br>    url = &quot;jdbc:mysql://192.168.100.134:3306/seata&quot;<br>    user = &quot;root&quot;<br>    password = &quot;root&quot;<br>  &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将修改后的数据覆盖容器内的数据</span><br>docker cp /mydata/seata/resources/registry.conf seata:seata-server/resources/<br></code></pre></td></tr></table></figure><h2 id="九、Sentinel"><a href="#九、Sentinel" class="headerlink" title="九、Sentinel"></a>九、<code>Sentinel</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开放指定防火墙端口(访问客户端的端口号)</span><br>firewall-cmd --zone=public --add-port=8858/tcp --permanent<br></code></pre></td></tr></table></figure><p>1、下载镜像文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull bladex/sentinel-dashboard:1.6.3<br></code></pre></td></tr></table></figure><p>2、创建容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name sentinel  -d -p 8858:8858 -d  bladex/sentinel-dashboard:1.6.3<br></code></pre></td></tr></table></figure><h2 id="十、mongo"><a href="#十、mongo" class="headerlink" title="十、mongo"></a>十、mongo</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开放指定防火墙端口(访问客户端的端口号)</span><br>firewall-cmd --zone=public --add-port=27017/tcp --permanent<br></code></pre></td></tr></table></figure><p>1、下载镜像文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#拉取镜像</span><br>docker pull mongo:latest<br></code></pre></td></tr></table></figure><p>2、创建容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建和启动容器</span><br>docker run -d --restart=always -p 27017:27017 --name mymongo -v /mydata/mongodb:/data/db -d mongo<br></code></pre></td></tr></table></figure><p>3、使用 mongo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it mymongo /bin/bash<br><span class="hljs-comment">#使用MongoDB客户端进行操作</span><br>mongo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>EnvConfig</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EnvConfig</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka</title>
    <link href="/2024/04/25/Eureka/"/>
    <url>/2024/04/25/Eureka/</url>
    
    <content type="html"><![CDATA[<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>Eureka 是 Netflix 开源的一个基于 REST 的服务治理框架，用于服务注册和服务发现。它是 Netflix OSS（Open Source Software）中的一部分，设计用于构建基于云的微服务架构。</p><h3 id="Eureka-服务器"><a href="#Eureka-服务器" class="headerlink" title="Eureka 服务器"></a>Eureka 服务器</h3><ul><li>Eureka 服务器是服务注册中心，负责接收各个微服务实例的注册信息，并存储这些信息。</li><li>它维护一个服务注册表，记录了所有已注册的微服务实例的信息，包括它们的网络位置（IP 地址和端口号）、健康状态、元数据等。</li><li>Eureka 服务器使用心跳机制来监控微服务实例的健康状态，并在实例不再发送心跳时将其标记为不可用。</li><li>通过提供 RESTful API，其他服务可以查询 Eureka 服务器以获取可用的服务实例列表。</li></ul><h3 id="Eureka-客户端"><a href="#Eureka-客户端" class="headerlink" title="Eureka 客户端"></a>Eureka 客户端</h3><ul><li>Eureka 客户端是微服务应用程序中集成的库，负责向 Eureka 服务器注册自己的实例信息，并定期发送心跳来告知自己的健康状态。</li><li>客户端还会从 Eureka 服务器获取其他服务实例的信息，以便进行服务调用。它会缓存这些信息，以提高性能并减少对 Eureka 服务器的请求次数。</li><li>当服务实例启动或关闭时，Eureka 客户端会自动与 Eureka 服务器同步状态。</li></ul><blockquote><p>EurekaServer：服务端，注册中心</p><ul><li>记录服务信息</li><li>心跳监控</li></ul><p>EurekaClient：客户端</p><ol><li>Provider：服务提供者 service<ul><li>注册自己的信息到 EurekaServer</li><li>每隔 30 秒向 EurekaServer 发送心跳</li></ul></li><li>consumer：服务消费者 client<ul><li>根据服务名称从 EurekaServer 拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ol></blockquote><h3 id="提供者与消费者"><a href="#提供者与消费者" class="headerlink" title="提供者与消费者"></a>提供者与消费者</h3><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><p>注意 ⚠️：对于某个服务来说，它既可以是服务的提供者，也可以是服务的消费者</p><h2 id="2、运行机制"><a href="#2、运行机制" class="headerlink" title="2、运行机制"></a>2、运行机制</h2><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><blockquote><h3 id="服务注册："><a href="#服务注册：" class="headerlink" title="服务注册："></a>服务注册：</h3><p>微服务应用启动时，会通过 Eureka 客户端向 Eureka 注册中心注册自己的实例信息。<br>注册信息包括服务名称、网络位置（IP 地址和端口号）、健康状态等。<br>注册中心将这些信息存储在注册表中。</p><h3 id="服务发现："><a href="#服务发现：" class="headerlink" title="服务发现："></a>服务发现：</h3><p>其他微服务需要调用某个服务时，会向 Eureka 注册中心发送 RESTful 请求，请求可用的服务实例列表。<br>注册中心会返回符合请求条件的服务实例信息，供调用方选择合适的实例进行服务调用。</p><h3 id="心跳与健康检查："><a href="#心跳与健康检查：" class="headerlink" title="心跳与健康检查："></a>心跳与健康检查：</h3><p>微服务实例在注册后会定期向 Eureka 注册中心发送心跳。<br>心跳表示该实例仍然处于健康状态。<br>注册中心会根据心跳信息来监控服务实例的健康状态，如果一段时间内未收到某个实例的心跳，则将其标记为不可用。</p><h3 id="自我保护机制："><a href="#自我保护机制：" class="headerlink" title="自我保护机制："></a>自我保护机制：</h3><p>Eureka 注册中心具有自我保护机制，用于防止网络分区或其他异常情况下出现服务丢失的情况。<br>当注册中心在一段时间内未收到足够数量的心跳时，它会进入自我保护模式，不再剔除健康的服务实例。<br>这样可以保证即使在网络故障等异常情况下，服务仍然能够被正常发现和调用。</p></blockquote><h3 id="运行原理图"><a href="#运行原理图" class="headerlink" title="运行原理图"></a>运行原理图</h3><p><img src="/images/eureka-framework.png" alt="eureka"></p><h2 id="3、快速入门"><a href="#3、快速入门" class="headerlink" title="3、快速入门"></a>3、快速入门</h2><h4 id="EurekaSewrver"><a href="#EurekaSewrver" class="headerlink" title="EurekaSewrver"></a>EurekaSewrver</h4><h5 id="1、Maven-依赖"><a href="#1、Maven-依赖" class="headerlink" title="1、Maven 依赖"></a>1、Maven 依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Eureka服务器端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2、添加注释"><a href="#2、添加注释" class="headerlink" title="2、添加注释"></a>2、添加注释</h5><p>启动类添加注释：<code>@EnableEurekaServer</code></p><h5 id="3、编写配置文件"><a href="#3、编写配置文件" class="headerlink" title="3、编写配置文件"></a>3、编写配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><h4 id="服务端-Service"><a href="#服务端-Service" class="headerlink" title="服务端 Service"></a>服务端 Service</h4><h5 id="1、Maven-依赖-1"><a href="#1、Maven-依赖-1" class="headerlink" title="1、Maven 依赖"></a>1、Maven 依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Eureka服务端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><h4 id="客户端-Client"><a href="#客户端-Client" class="headerlink" title="客户端 Client"></a>客户端 Client</h4><h5 id="1、Maven-依赖-2"><a href="#1、Maven-依赖-2" class="headerlink" title="1、Maven 依赖"></a>1、Maven 依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Eureka客户端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2、配置文件-1"><a href="#2、配置文件-1" class="headerlink" title="2、配置文件"></a>2、配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">client</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><h5 id="3、服务拉取"><a href="#3、服务拉取" class="headerlink" title="3、服务拉取"></a>3、服务拉取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">// 启用eurekaclient，新版本可以省略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ServiceApplication.class, args);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建RestTemplate并注入Spring容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span>  <span class="hljs-comment">// 负载均衡注解</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、调用服务"><a href="#4、调用服务" class="headerlink" title="4、调用服务"></a>4、调用服务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-comment">// 利用RestTemplate发起http请求</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://service/user/&quot;</span> + id;<br>        <span class="hljs-comment">// 发送http get请求，实现远程调用服务</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, User.class);<br><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、Ribbon-负载均衡"><a href="#4、Ribbon-负载均衡" class="headerlink" title="4、Ribbon 负载均衡"></a>4、Ribbon 负载均衡</h2><blockquote><p>@LoadBalanced 注解，实现负载均衡功能的原理？</p></blockquote><h3 id="4-1、原理"><a href="#4-1、原理" class="headerlink" title="4.1、原理"></a>4.1、原理</h3><p><img src="/images/ribbon.png" alt="ribbon"></p><h3 id="4-2、负载均衡策略"><a href="#4-2、负载均衡策略" class="headerlink" title="4.2、负载均衡策略"></a>4.2、负载均衡策略</h3><p><img src="/images/Ribbon-IRule.png"></p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是 Ribbon 默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果 3 次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续 30 秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了 AvailabilityFilteringRule 规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit 属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用 Zone 对服务器进行分类，这个 Zone 可以理解为一个机房、一个机架等。而后再对 Zone 内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><h3 id="4-3、自定义负载均衡策略"><a href="#4-3、自定义负载均衡策略" class="headerlink" title="4.3、自定义负载均衡策略"></a>4.3、自定义负载均衡策略</h3><p>代码方式：启动类中定义新的 IRule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">erviceApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ServiceApplication.class, args);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建RestTemplate并注入Spring容器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span>  <span class="hljs-comment">// 负载均衡注解</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>     <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 指定负载均衡策略为随机</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件方式：在 application.yml 文件中添加新的配置修改规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">XXXservice:</span> <span class="hljs-comment"># 指定给某个目标服务发起请求时的负载均衡规则，这里是目标服务的服务名称(如：UserService)</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment"># 负载均衡规则：指定的是随机访问</span><br></code></pre></td></tr></table></figure><h3 id="4-4、Ribbon-的饥饿加载"><a href="#4-4、Ribbon-的饥饿加载" class="headerlink" title="4.4、Ribbon 的饥饿加载"></a>4.4、Ribbon 的饥饿加载</h3><p>Ribbon 默认是采用懒加载，即第一次访问时才会去创建 LoadBalanceClient，请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时。</p><p>通过下面配置开启饥饿加载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">clients:</span> <span class="hljs-string">XXXservice</span> <span class="hljs-comment"># 如：userservice</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Eureka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2024/04/25/Git/"/>
    <url>/2024/04/25/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-流程"><a href="#Git-流程" class="headerlink" title="Git 流程"></a><strong>Git 流程</strong></h1><blockquote><p>官方指导网址：<a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p></blockquote><p><strong>在 Git Bash 中一些基本的 Linux 命令</strong></p><ul><li><strong>ls&#x2F;ll 查看当前目录</strong></li><li><strong>cat 查看文件内容</strong></li><li><strong>touch 创建文件</strong></li><li><strong>pwd 显示当前所在的目录路径</strong></li><li><strong>cd 改变目录</strong></li><li><strong>cd .. 返回上一级目录</strong></li><li><strong>rm 删除文件</strong></li><li><strong>mkdir 创建文件夹</strong></li><li><strong>rm -r 删除文件夹</strong></li><li><strong>mv （mv 对象 移动到的地址）移动文件</strong></li><li><strong>clear 清屏</strong></li><li><strong>reset 重新初始化终端</strong></li><li><strong>history 查看命令历史</strong></li><li><strong>help 帮助</strong></li><li><strong>exit 退出</strong></li></ul><p><strong>常用命令如下：</strong></p><ul><li><strong>clone（克隆）: 从远程仓库中克隆代码到本地仓库</strong></li><li><strong>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</strong></li><li><strong>add（添加）: 在提交前先将代码提交到暂存区</strong></li><li><strong>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</strong></li><li><strong>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</strong></li><li><strong>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于 fetch+merge</strong></li><li><strong>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</strong></li></ul><p><strong>Linux 的 vi 编辑器操作：</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">vi vi编辑器（编辑：Fn + <span class="hljs-built_in">insert</span>；  退出编辑：Esc;  退出vi编辑器并保存：Shift + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-string">&#x27;wq&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="初始化仓库："><a href="#初始化仓库：" class="headerlink" title="初始化仓库："></a><strong>初始化仓库：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ABAP">在某个空文件夹中点击右键打开Git bash窗口：<br>执行命令 git init<br>创建 .git文件<br>此时该文件夹为git仓库<br></code></pre></td></tr></table></figure><h3 id="配置-git-无法命令文件"><a href="#配置-git-无法命令文件" class="headerlink" title="配置 git 无法命令文件"></a>配置 git 无法命令文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ABAP">创建 .gitignore 文件：可配置（添加）不需要（无法进行）git 指令的文件<br>（例如：排除.a后缀的文件： 在.gitignore文件中添加上-&gt;*.a）<br></code></pre></td></tr></table></figure><h2 id="Git-命令详解"><a href="#Git-命令详解" class="headerlink" title="Git 命令详解"></a>Git 命令详解</h2><h3 id="1-查看修改的状态（status）"><a href="#1-查看修改的状态（status）" class="headerlink" title="1.查看修改的状态（status）"></a>1.查看修改的状态（status）</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran">作用：查看的修改的状态（暂存区、工作区）<br>命令形式：git <span class="hljs-keyword">status</span><br></code></pre></td></tr></table></figure><h3 id="2-添加工作区到暂存区-add"><a href="#2-添加工作区到暂存区-add" class="headerlink" title="2.添加工作区到暂存区(add)"></a>2.添加工作区到暂存区(add)</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">命令形式：git <span class="hljs-built_in">add</span> 单个文件名|通配符<br>将所有修改加入暂存区：git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure><h3 id="3-提交暂存区到本地仓库-commit"><a href="#3-提交暂存区到本地仓库-commit" class="headerlink" title="3.提交暂存区到本地仓库(commit)"></a>3.提交暂存区到本地仓库(commit)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">作用：提交暂存区内容到本地仓库的当前分支<br>命令形式：git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>m <span class="hljs-string">&#x27;注释内容&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-版本回退-作用：版本切换"><a href="#4-版本回退-作用：版本切换" class="headerlink" title="4.版本回退&#x3D;&gt;作用：版本切换"></a>4.版本回退&#x3D;&gt;作用：版本切换</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">命令形式：git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard commitID</span><br>commitID 可以使用 git-<span class="hljs-keyword">log</span> 或 git <span class="hljs-keyword">log</span> 指令查看<br></code></pre></td></tr></table></figure><h3 id="5-查看提交日志-log-（注意：后续可以直接使用指令-git-log）"><a href="#5-查看提交日志-log-（注意：后续可以直接使用指令-git-log）" class="headerlink" title="5.查看提交日志(log)（注意：后续可以直接使用指令 git-log）"></a>5.查看提交日志(log)（注意：后续可以直接使用指令 git-log）</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">作用:查看提交记录<br>命令形式：git <span class="hljs-keyword">log</span> [<span class="hljs-keyword">option</span>]<br><span class="hljs-keyword">options</span><br><span class="hljs-comment">--all 显示所有分支</span><br><span class="hljs-comment">--pretty=oneline 将提交信息显示为一行</span><br><span class="hljs-comment">--abbrev-commit 使得输出的commitId更简短</span><br><span class="hljs-comment">--graph 以图的形式显示</span><br></code></pre></td></tr></table></figure><h4 id="如何查看已经删除的记录？"><a href="#如何查看已经删除的记录？" class="headerlink" title="如何查看已经删除的记录？"></a>如何查看已经删除的记录？</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git <span class="hljs-built_in">ref</span>log（查看全部历史记录）<br></code></pre></td></tr></table></figure><h3 id="6-查看本地分支"><a href="#6-查看本地分支" class="headerlink" title="6.查看本地分支"></a>6.查看本地分支</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">命令：git branch<br></code></pre></td></tr></table></figure><h3 id="7-创建本地分支"><a href="#7-创建本地分支" class="headerlink" title="7.创建本地分支"></a>7.创建本地分支</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">命令：git <span class="hljs-keyword">branch </span>分支名<br></code></pre></td></tr></table></figure><h3 id="8-切换分支-checkout"><a href="#8-切换分支-checkout" class="headerlink" title="8.切换分支(checkout)"></a>8.切换分支(checkout)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">命令：git checkout 分支名<br></code></pre></td></tr></table></figure><h3 id="9-创建并切换"><a href="#9-创建并切换" class="headerlink" title="9.创建并切换"></a>9.创建并切换</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">命令：git checkout -<span class="hljs-keyword">b</span> 分支名<br></code></pre></td></tr></table></figure><h3 id="10-合并分支-merge-（一个分支上的提交可以合并到另一个分支）"><a href="#10-合并分支-merge-（一个分支上的提交可以合并到另一个分支）" class="headerlink" title="10.合并分支(merge) （一个分支上的提交可以合并到另一个分支）"></a>10.合并分支(merge) （一个分支上的提交可以合并到另一个分支）</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">命令：git <span class="hljs-keyword">merge</span> 分支名称<br></code></pre></td></tr></table></figure><h3 id="11-删除分支-不能删除当前分支，只能删除其他分支"><a href="#11-删除分支-不能删除当前分支，只能删除其他分支" class="headerlink" title="11.删除分支:(不能删除当前分支，只能删除其他分支)"></a>11.删除分支:(不能删除当前分支，只能删除其他分支)</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>-d <span class="hljs-keyword">b1 </span>删除分支时，需要做各种检查<br>git <span class="hljs-keyword">branch </span>-D <span class="hljs-keyword">b1 </span>不做任何检查，强制删除<br></code></pre></td></tr></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p><strong>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 处理文件中冲突的地方<br><span class="hljs-bullet">2.</span> 将解决完冲突的文件加入暂存区(add)<br><span class="hljs-bullet">3.</span> 提交到仓库(commit)<br></code></pre></td></tr></table></figure><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">此操作是先初始化本地库，然后与已创建的远程库进行对接。<br>命令： git remote <span class="hljs-built_in">add</span> &lt;远端名称&gt; &lt;仓库路径&gt;<br>远端名称，默认是origin，取决于远端服务器设置<br>仓库路径，从远端服务器获取此URL<br>例如: git remote <span class="hljs-built_in">add</span> origin git@gitee.com:czbk_zhang_meng/git_test.git<br></code></pre></td></tr></table></figure><p><strong>查看远程仓库</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">命令：git remote<br></code></pre></td></tr></table></figure><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">命令：git <span class="hljs-keyword">push</span> [-f] [--<span class="hljs-keyword">set</span>-upstream] [远端名称 [本地分支名][:远端分支名] ]<br>如果远程分支名和本地分支名称相同，则可以只写本地分支<br>git <span class="hljs-keyword">push</span> origin master<br>-f 表示强制覆盖<br>--<span class="hljs-keyword">set</span>-upstream 推送到远端的同时并且建立起和远端分支的关联关系<br>git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream origin master<br>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。<br>git <span class="hljs-keyword">push</span> 将master分支推送到已关联的远端分支。<br></code></pre></td></tr></table></figure><p><strong>查看本地分支与远程分支的关联关系</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -vv</span><br></code></pre></td></tr></table></figure><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">如果已经有一个远端仓库，我们可以直接<span class="hljs-built_in">clone</span>到本地。<br>命令: git <span class="hljs-built_in">clone</span> &lt;仓库路径&gt; [本地目录]<br>本地目录可以省略，会自动生成一个目录<br></code></pre></td></tr></table></figure><h2 id="抓取与拉取"><a href="#抓取与拉取" class="headerlink" title="抓取与拉取"></a>抓取与拉取</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">抓取 命令：git <span class="hljs-keyword">fetch</span> [remote <span class="hljs-type">name</span>] [branch <span class="hljs-type">name</span>]<br>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并<br>如果不指定远端名称和分支名，则抓取所有分支。<br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">拉取 命令：git pull [remote <span class="hljs-keyword">name</span>] [branch <span class="hljs-keyword">name</span>]<br>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+<span class="hljs-built_in">merge</span><br>如果不指定远端名称和分支名，则抓取所有并更新当前分支。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jvms</title>
    <link href="/2024/04/25/Jvms/"/>
    <url>/2024/04/25/Jvms/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-虚拟机（Jvm）"><a href="#Java-虚拟机（Jvm）" class="headerlink" title="Java 虚拟机（Jvm）"></a>Java 虚拟机（Jvm）</h1><blockquote><p>JVM 全称是 Java Virtual Machine，中文译名 Java 虚拟机</p></blockquote><h2 id="1、入门介绍"><a href="#1、入门介绍" class="headerlink" title="1、入门介绍"></a>1、入门介绍</h2><p>JVM 本质上是一个运行在计算机上的程序，他的职责是运行 Java 字节码文件</p><p><img src="/images/jvm-benZhi.png" alt="jvm-benZhi"></p><h3 id="1-1、Jvm-的功能"><a href="#1-1、Jvm-的功能" class="headerlink" title="1.1、Jvm 的功能"></a>1.1、Jvm 的功能</h3><ol><li>解释和运行<ul><li>对字节码文件中的指令， 实时的解释成机器码， 让计算机执行</li></ul></li><li>内存管理<ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制， 回收不再使用的对象</li></ul></li><li>即时编译<ul><li>对热点代码进行优化， 提升执行效率</li></ul></li></ol><blockquote><p><strong>即时编译</strong></p><p>Java 语言如果不做任何优化，性能不如 C、C++等语言。</p><p>Java 需要实时解释，主要是为了支持跨平台特性。</p><p>由于 JVM 需要实时解释虚拟机指令，不做任何优化性能不如直接运行机器码的 C、C++等语言。</p><p>JVM 提供了即时编译（Just-In-Time 简称 JIT) 进行性能的优化，最终能达到接近 C、C++语言的运行性能 甚至在特定场景下实现超越。</p></blockquote><h3 id="1-2、常见的-Jvm"><a href="#1-2、常见的-Jvm" class="headerlink" title="1.2、常见的 Jvm"></a>1.2、常见的 Jvm</h3><p><img src="/images/jvms.png" alt="Jvms"></p><h2 id="2、字节码文件的组成"><a href="#2、字节码文件的组成" class="headerlink" title="2、字节码文件的组成"></a>2、字节码文件的组成</h2><blockquote><ol><li>基本信息：魔数、字节码文件对应的 Java 版本号，访问标识(public final 等等) 父类和接口</li><li>常量池：保存字符串常量、类或接口名、字段名，主要在字节码指令中使用</li><li>字段：当前类或接口声明的字段信息</li><li>方法：当前类或接口声明的方法信息、字节码指令</li><li>属性：类的属性，比如源码的文件名、内部类的列表等</li></ol></blockquote><h3 id="2-1、字节码文件的组成部分"><a href="#2-1、字节码文件的组成部分" class="headerlink" title="2.1、字节码文件的组成部分"></a>2.1、字节码文件的组成部分</h3><h4 id="2-1-1、Magic-魔数"><a href="#2-1-1、Magic-魔数" class="headerlink" title="2.1.1、Magic 魔数"></a>2.1.1、Magic 魔数</h4><p>文件是无法通过文件扩展名来确定文件类型的，文件扩展名可以随意修改，不影响文件的内容。</p><p>软件使用文件的头几个字节（文件头）去校验文件的类型，如果软件不支持该种类型就会出错。</p><p>Java 字节码文件中，将文件头称为 magic 魔数。</p><p><img src="/images/jvm-magic.png" alt="magic"></p><h4 id="2-1-2、主副版本号"><a href="#2-1-2、主副版本号" class="headerlink" title="2.1.2、主副版本号"></a>2.1.2、主副版本号</h4><p>主副版本号指的是编译字节码文件的 JDK 版本号。</p><p>主版本号用来标识大版本号，JDK1.0-1.1 使用了 45.0-45.3，JDK1.2 是 46 之后每升级一个大版本就加 1。</p><p>副版本号是当主版本号相同时作为区分不同版本的标识，一般只需要关心主版本号。</p><p>版本号的作用主要是判断当前字节码的版本和运行时的 JDK 是否兼容。</p><blockquote><p>🔔1.2 之后大版本号计算方法就是: 主版本号–44，比如主版本号 52 就是 JDK8</p></blockquote><h4 id="2-1-3、常量池"><a href="#2-1-3、常量池" class="headerlink" title="2.1.3、常量池"></a>2.1.3、常量池</h4><p>字节码文件中常量池的作用：避免相同的内容重复定义，节省空间。</p><p>常量池中的数据都有一个编号，编号从 1 开始。在字段或者字节码指令中通过编号可以快速的找到对应的数据。</p><p>字节码指令中通过编号引用到常量池的过程称之为符号引用。</p><h4 id="2-1-4、方法"><a href="#2-1-4、方法" class="headerlink" title="2.1.4、方法"></a>2.1.4、方法</h4><p>字节码中的方法区域是存放字节码指令的核心位置，字节码指令的内容存放在方法的 Code 属性中。</p><p>操作数栈是临时存放数据的地方，局部变量表是存放方法中的局部变量的位置。</p><h3 id="2-2、查看字节码常用工具"><a href="#2-2、查看字节码常用工具" class="headerlink" title="2.2、查看字节码常用工具"></a>2.2、查看字节码常用工具</h3><h4 id="2-2-1、-javap-v-命令"><a href="#2-2-1、-javap-v-命令" class="headerlink" title="2.2.1、 javap -v 命令"></a>2.2.1、 javap -v 命令</h4><p>javap 是 JDK 自带的反编译工具，可以通过控制台查看字节码文件的内容。适合在服务器上查看字节码文件内 容。</p><p>直接输入 javap 查看所有参数。</p><p>输入 javap -v 字节码文件名称 查看具体的字节码信息。（如果 jar 包需要先使用 jar –xvf 命令解压）</p><h4 id="2-2-2、jclasslib-插件"><a href="#2-2-2、jclasslib-插件" class="headerlink" title="2.2.2、jclasslib 插件"></a>2.2.2、jclasslib 插件</h4><p>jclasslib 也有 Idea 插件版本，建议开发时使用 Idea 插件版本，可以在代码编译之后实时看到字节码 文件内容。</p><h4 id="2-2-3、阿里-arthas"><a href="#2-2-3、阿里-arthas" class="headerlink" title="2.2.3、阿里 arthas"></a>2.2.3、阿里 arthas</h4><blockquote><p>官网：<a href="https://arthas.aliyun.com/doc/">https://arthas.aliyun.com/doc/</a></p></blockquote><p>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修 改应用代码的情况下，对业务问题进行诊断，大大提升线上问题排查效率。</p><p>dump 类的全限定名：dump 已加载类的字节码文件到特定目录。</p><p>jad 类的全限定名： 反编译已加载类的源码。</p><h3 id="2-3、总结"><a href="#2-3、总结" class="headerlink" title="2.3、总结"></a>2.3、总结</h3><h4 id="1、如何查看字节码文件？"><a href="#1、如何查看字节码文件？" class="headerlink" title="1、如何查看字节码文件？"></a>1、如何查看字节码文件？</h4><ol><li>本地文件可以使用 jclasslib 工具查看，开发环境使用 jclasslib 插件。</li><li>服务器上文件使用 javap 命令直接查看，也可以通过 arthas 的 dump 命令导出字节码文件再查看本地文件。还可以使用 jad 命令反编译出源代码。</li></ol><h4 id="2、字节码文件的核心组成有哪些？"><a href="#2、字节码文件的核心组成有哪些？" class="headerlink" title="2、字节码文件的核心组成有哪些？"></a>2、字节码文件的核心组成有哪些？</h4><p><img src="/images/jvm-byteclass.png" alt="byteclass"></p><h4 id="3、Jvm-组成"><a href="#3、Jvm-组成" class="headerlink" title="3、Jvm 组成?"></a>3、Jvm 组成?</h4><p><img src="/images/jvm-zuCheng.png" alt="jvm组成"></p><h2 id="3、类的生命周期"><a href="#3、类的生命周期" class="headerlink" title="3、类的生命周期"></a>3、类的生命周期</h2><h3 id="3-1、生命周期概述"><a href="#3-1、生命周期概述" class="headerlink" title="3.1、生命周期概述"></a>3.1、生命周期概述</h3><p><img src="/images/jvm-classLife.png" alt="Jvm-LIFE"></p><h3 id="3-2、加载阶段"><a href="#3-2、加载阶段" class="headerlink" title="3.2、加载阶段"></a>3.2、加载阶段</h3><ol><li>类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息。</li><li>类加载器在加载完类之后，Java 虚拟机会将字节码中的信息保存到方法区中以及内存的方法区中，然后生成一个 InstanceKlass 对象，保存类的所有信息，包含实现特定功能比如多态的信息。</li><li>Java 虚拟机在堆中生成一份与方法区中数据类似的 java.lang.Class 对象。 作用是在 Java 代码中去获取类的信息以及存储静态字段的数据（JDK8 及之后）。</li></ol><p>对于开发者来说，只需要访问堆中的 Class 对象而不需要访问方法区中所有信息。因此 Java 虚拟机能很好地控制开发者访问数据的范围。</p><p><img src="/images/jvm-accessClass.png" alt="Jvm-AccessClass"></p><h3 id="3-3、连接阶段"><a href="#3-3、连接阶段" class="headerlink" title="3.3、连接阶段"></a>3.3、连接阶段</h3><h4 id="3-3-1、验证"><a href="#3-3-1、验证" class="headerlink" title="3.3.1、验证"></a>3.3.1、验证</h4><p>验证的主要目的是检测 Java 字节码文件是否遵守《Java 虚拟机规 范》中的约束。</p><p>主要包含如下四部分：具体详见《Java 虚拟机规范》</p><ol><li>文件格式验证，比如文件是否以 0xCAFEBABE 开头，主次版本号是否满足当前 Java 虚拟机版本要求。</li><li>元信息验证，例如类必须有父类（super 不能为空）。</li><li>验证程序执行指令的语义，比如方法内的指令执行到一半强行跳转到其他方法中去。</li><li>符号引用验证，例如是否访问了其他类中 private 的方法等。</li></ol><h4 id="3-3-2、准备"><a href="#3-3-2、准备" class="headerlink" title="3.3.2、准备"></a>3.3.2、准备</h4><p>1、准备阶段为静态变量（static）分配内存并设置初始值。</p><p>准备阶段只会给静态变量赋初始值，而且每种基本数据类型和引用数据类型都有其初始值。</p><p><img src="/images/jvm-BL-Init.png" alt="变量初始值"></p><p>2、final 修饰的基本数据类型的静态变量，准备阶段直接会将代码中的值进行赋值。</p><h4 id="3-3-3、解析"><a href="#3-3-3、解析" class="headerlink" title="3.3.3、解析"></a>3.3.3、解析</h4><p>解析阶段主要是将常量池中的符号引用替换为直接引用。</p><ul><li>符号引用就是在字节码文件中使用编号来访问常量池中的内容。</li><li>直接引用不在使用编号，而是使用内存中地址进行访问具体的数据。</li></ul><h3 id="3-4、初始化阶段"><a href="#3-4、初始化阶段" class="headerlink" title="3.4、初始化阶段"></a>3.4、初始化阶段</h3><p>1、初始化阶段会执行静态代码块中的代码，并为静态变量赋值。</p><p>2、初始化阶段会执行字节码文件中 clinit 部分的字节码指令。</p><p>以下方式会进行类的初始化：</p><ol><li>访问一个类的静态变量或者静态方法，注意变量是 final 修饰的并且等号右边是常量不会触发初始化。</li><li>调用 Class.forName(String className)。</li><li>new 一个该类的对象时。</li><li>执行 Main 方法的当前类。</li></ol><blockquote><p>🔔 添加-XX:+TraceClassLoading 参数可以打印出加载并初始化的类</p></blockquote><p>clinit 指令在特定情况下不会出现。如下情况不会进行初始化指令执行：</p><ol><li>无静态代码块且无静态变量赋值语句。</li><li>有静态变量的声明，但是没有赋值语句。</li><li>静态变量的定义使用 final 关键字，这类变量会在准备阶段直接进行初始化。</li></ol><p>注意：</p><ul><li>直接访问父类的静态变量，不会触发子类的初始化。</li><li>子类的初始化 clinit 调用之前，会先调用父类的 clinit 初始化方法。</li></ul><h3 id="3-5、总结"><a href="#3-5、总结" class="headerlink" title="3.5、总结"></a>3.5、总结</h3><ol><li><p>数组的创建不会导致数组中元素的类进行初始化。</p></li><li><p>final 修饰的变量如果赋值的内容需要执行指令才能得出结果，会执行 clinit 方法进行初始化</p></li><li><p>类的生命周期</p><blockquote><ol><li>加载：根据类的全限定名把字节码文件的 内容加载并转换成合适的数据放入 内存中，存放在方法区和堆上。</li><li>连接-验证：魔数、版本号等验证，一般不需要 程序员关注。</li><li>连接-准备：为静态变量分配内存并设置初始值。</li><li>连接-解析：将常量池中的符号引用（编号）替 换为直接引用（内存地址）</li><li>初始化：执行静态代码块和静态变量的赋值。</li></ol></blockquote></li><li><p>静态变量的定义使用 final 关键字，这类变量会在准备阶段直接进行初始化 （除非要执行方法）。</p></li><li><p>直接访问父类的静态变量，不会触发子类的初始化。子类的初始化 cinit 调用之前， 会先调用父类的 cinit 初始化方法。</p></li></ol><blockquote><p>添加-XX:+TraceClassLoading 参数可以打印出加载并初始化的类</p></blockquote><h2 id="4、类加载器"><a href="#4、类加载器" class="headerlink" title="4、类加载器"></a>4、类加载器</h2><p>类加载器（ClassLoader）是 Java 虚拟机提供给应用程序去实现获取类和接口字节码数据的技术，只参与加载过程中的字节码获取并加载到内存。</p><h3 id="4-1、类加载器的分类"><a href="#4-1、类加载器的分类" class="headerlink" title="4.1、类加载器的分类"></a>4.1、类加载器的分类</h3><p>类加载器分为两类：一类是 Java 代码中实现的，一类是 Java 虚拟机底层源码实现的。</p><ol><li>虚拟机底层实现：<ul><li>虚拟机底层实现：源代码位于 Java 虚拟机的源码中，实现语言与 虚拟机底层语言一致，比如 Hotspot 使用 C++。</li><li>加载程序运行时的基础类：保证 Java 程序运行中基础类被正确地加载， 比如 java.lang.String ，确保其可靠性。</li></ul></li><li>Java：<ul><li>JDK 中默认提供或者自定义：JDK 中默认提供多种处理不同渠道的类加载器， 程序员也可以根据需求定制。</li><li>继承自抽象类 ClassLoader：所有 Java 中实现的类加载器都需要继承 ClassLoader 该抽象类。</li></ul></li></ol><p>类加载器的设计 JDK8 和 8 之后的版本差别较大，JDK8 及之前的版本中默认的类加载器有如下几种：</p><ol><li>虚拟机底层实现 C++ ：<ul><li>启动类加载器 Bootstrap ：加载 Java 中最核心的类。</li></ul></li><li>Java ：<ul><li>扩展类加载器 Extension ：允许扩展 Java 中比较通用的类。</li><li>应用程序类加载器 Application ：加载应用使用的类。</li></ul></li></ol><blockquote><p>Arthas 中类加载器相关的功能</p><p>类加载器的详细信息可以通过 classloader 命令查看：</p><ul><li>classloader - 查看 classloader 的继承树、urls、类加载信息，使用 classloader 去 getResource。</li></ul></blockquote><p>类加载器的作用是什么？</p><p>类加载器（ClassLoader）负责在类加载过程中把字节码获取并加载到内存的部分。通过加载字节码数据放入内存转换成 byte[]，然后调用虚拟机底层方法将 byte[]转换成方法区和堆中的数据。</p><h4 id="4-1-1、启动类加载器"><a href="#4-1-1、启动类加载器" class="headerlink" title="4.1.1、启动类加载器"></a>4.1.1、启动类加载器</h4><p>启动类加载器（Bootstrap ClassLoader）是由 Hotspot 虚拟 机提供的、使用 C++编写的类加载器。默认加载 Java 安装目录&#x2F;jre&#x2F;lib 下的类文件，比如 rt.jar、tools.jar、resources.jar 等。</p><p>通过启动类加载器去加载用户 jar 包：</p><ul><li>放入 jre&#x2F;lib 下进行扩展：不推荐，尽可能不要去更改 JDK 安装目录中的内容，会出现即时放进去由于文件名不匹配的问题也不会正常地被加载。</li><li>使用参数进行扩展：推荐，使用-Xbootclasspath&#x2F;a:jar 包目录&#x2F;jar 包名进行扩展。</li></ul><h4 id="4-1-2、Java-中的默认类加载器"><a href="#4-1-2、Java-中的默认类加载器" class="headerlink" title="4.1.2、Java 中的默认类加载器"></a>4.1.2、Java 中的默认类加载器</h4><ul><li>扩展类加载器和应用程序类加载器都是 JDK 中提供的、使用 Java 编写的类加载器。</li><li>它们的源码都位于 sun.misc.Launcher 中，是一个静态内部类。继承自 URLClassLoader。具备通过目录 或者指定 jar 包将字节码文件加载到内存中。</li></ul><p><img src="/images/jvm-JdkClassLoader.png" alt="jdkClassLoader"></p><blockquote><p>Arthas 中类加载器相关的功能:</p><ul><li>classloader –l ：查看类加载器列表。</li><li>classloader –c hash 值 ： 查看类加载器的加载路径。</li></ul></blockquote><h3 id="4-2、双亲委派机制"><a href="#4-2、双亲委派机制" class="headerlink" title="4.2、双亲委派机制"></a>4.2、双亲委派机制</h3><blockquote><p>在 Java 中如何使用代码的方式去主动加载一个类呢？</p><ol><li>方式 1：使用 Class.forName 方法，使用当前类的类加载器去加载指定的类</li><li>方式 2：获取到类加载器，通过类加载器的 loadClass 方法指定某个类加载器加载。</li></ol></blockquote><p>每个 Java 实现的类加载器中保存了一个成员变量叫“父”（Parent）类加载器，可以理解为它的上级， 并不是继承关系。</p><ul><li>应用程序类加载器的 parent 父类加载器是扩展类加载器，而扩展类加载器的 parent 是空。</li><li>启动类加载器使用 C++编写，没有上级类加载器。</li></ul><p><img src="/images/jvm-parentClassLoader.png" alt="parentClassLoader"></p><blockquote><p>Arthas 中类加载器相关的功能：类加载器的继承关系可以通过 classloader –t 查看</p></blockquote><h4 id="4-2-1、类加载步骤"><a href="#4-2-1、类加载步骤" class="headerlink" title="4.2.1、类加载步骤"></a>4.2.1、类加载步骤</h4><ol><li>在类加载的过程中，每个类加载器都会先检查是否已经加载了该类，如果已经加载则直接返回，否则会将加载请求委派给父类加载器。</li><li>如果类加载的 parent 为 null，则会提交给启动类加载器处理。</li><li>如果所有的父类加载器都无法加载该类，则由当前类加载器自己尝试加载。</li><li>再次加载相同的类，仍然会向上进行委派，如果某个类加载器加载过就会直接返回。</li></ol><p><img src="/images/jvm-classLoaderMachanism.png" alt="classLoaderMachanism"></p><blockquote><h2 id="双亲委派机制指的是：自底向上查找是否加载过，再由顶向下进行加载。"><a href="#双亲委派机制指的是：自底向上查找是否加载过，再由顶向下进行加载。" class="headerlink" title="双亲委派机制指的是：自底向上查找是否加载过，再由顶向下进行加载。"></a>双亲委派机制指的是：自底向上查找是否加载过，再由顶向下进行加载。</h2></blockquote><h4 id="4-2-2、双亲委派机制-解决三个问题"><a href="#4-2-2、双亲委派机制-解决三个问题" class="headerlink" title="4.2.2、双亲委派机制-解决三个问题"></a>4.2.2、双亲委派机制-解决三个问题</h4><ol><li>重复的类：如果一个类重复出现在三个类加载 器的加载位置，应该由谁来加载？<ul><li>启动类加载器加载，根据双亲委派 机制，它的优先级是最高的。</li></ul></li><li>String 类能覆盖吗：在自己的项目中去创建一个 java.lang.String 类会被加载吗？<ul><li>不能，会交由启动类加载器加载在 rt.jar 包中的 String 类。</li></ul></li><li>类加载器的关系：这几个类加载器彼此之间存在关系吗？<ul><li>应用类加载器的父类加载器是扩展类加载器，扩展类加载器没有父类加载器，但是会委派给启动类加载 器加载。</li></ul></li></ol><h4 id="4-2-3、双亲委派机制有什么用？"><a href="#4-2-3、双亲委派机制有什么用？" class="headerlink" title="4.2.3、双亲委派机制有什么用？"></a>4.2.3、双亲委派机制有什么用？</h4><p>1、保证类加载的安全性通过双亲委派机制，让顶层的类加载器去加载核心类，避免恶意代码替换 JDK 中的核心类库，比如 java.lang.String，确保核心类库的完整性和安全性。</p><p>2、避免重复加载双亲委派机制可以避免同一个类被多次加载，上层的类加载器如果加载过类，就会直接返回该类，避免重复加载。</p><h3 id="4-3、打破双亲委派机制"><a href="#4-3、打破双亲委派机制" class="headerlink" title="4.3、打破双亲委派机制"></a>4.3、打破双亲委派机制</h3><blockquote><p>打破双亲委派机制的三种方式：</p><ol><li>自定义类加载器<ul><li>通过重写 loadClass 方法可以将双亲委派机制的代码去除，Tomcat 通过该方式实现应用之间类隔离。</li></ul></li><li>线程上下文类加载器<ul><li>利用上下文类加载器加载类，比如 JDBC 和 JNDI 等。</li></ul></li><li>Osgi 框架的类加载器<ul><li>历史上 Osgi 框架实现一套新的类加载器机制，允许同级之间委托进行类的加载。</li></ul></li></ol></blockquote><h4 id="4-3-1、自定义类加载器"><a href="#4-3-1、自定义类加载器" class="headerlink" title="4.3.1、自定义类加载器"></a>4.3.1、自定义类加载器</h4><p><img src="/images/jvm-user-defined-classLoader.png" alt="自定义类加载器"></p><p>一个 Tomcat 程序中是可以运行多个 Web 应用的，如果两个应用中出现相同限定名的类，比如 Servlet 类， Tomcat 要保证这两个类都能加载并且它们应该是不同的类。如果不打破双亲委派机制，当应用类加载器加载 Web 应用 1 中的 MyServlet 之后，Web 应用 2 中相同限定名的 MyServlet 类就无法被加载。</p><p>Tomcat 使用自定义类加载器来实现应用之间类的隔离，每个应用都有独立的类加载器加载对应的类。</p><p>双亲委派机制的核心代码</p><p><img src="/images/jvm-classLoderCore.png" alt="classLoaderCore"></p><blockquote><p>🔔loadClass 方法的核心逻辑：双亲委派机制</p></blockquote><p>两个自定义类加载器加载相同限定名的类，不会冲突吗？</p><ol><li>不会冲突。在同一个 Java 虚拟机中，只有相同类加载器+相同的类限定名才会被认为是同一个类。</li><li>在 Arthas 中使用 sc –d 类名的方式查看具体的情况。</li></ol><h4 id="4-3-2、线程上下文类加载器"><a href="#4-3-2、线程上下文类加载器" class="headerlink" title="4.3.2、线程上下文类加载器"></a>4.3.2、线程上下文类加载器</h4><blockquote><h4 id="JDBC-案例"><a href="#JDBC-案例" class="headerlink" title="JDBC 案例"></a>JDBC 案例</h4></blockquote><p>JDBC 中使用 DriverManager 来管理项目中引入的不同数据库的驱动。比如 mysql 驱动、oracle 驱动。</p><ul><li>DriverManager 类位于 rt.jar 包中，由启动类加载器加载。</li><li>依赖中的 mysql 驱动对应的类，由应用程序类加载器来加载。</li></ul><p>DriverManager 属于 rt.jar 是启动类加载器加载的，而用户 jar 包中的驱动需要由应用类加载器加载，这就违反了双亲委派机制。</p><p><img src="/images/jvm-jdbc-classLoader.png" alt="Jdbc-classLoader"></p><p>DriverManage 使用 SPI 机制，最终加载 jar 包中对应的驱动类。SPI 中使用线程上下文中保存的类加载器进行类的加载，该类加载器一般是应用程序类加载器。</p><blockquote><p>总结：</p><ol><li>启动类加载器加载 DriverManager。</li><li>在初始化 DriverManager 时，通过 SPI 机制加载 jar 包中的 myql 驱动。</li><li>SPI 中利用了线程上下文类加载器（应用程序类加载器）去加载类并创建对象。</li></ol><p>这种由启动类加载器加载的类，委派应用程序类加载器去加载类的方式，打破了双亲委派机制。</p><p><img src="/images/jvm-jdbc-spi-classLoader.png" alt="spi-classloader"></p></blockquote><p>JDBC 案例中真的打破了双亲委派机制吗？</p><ul><li>打破了双亲委派机制：这种由启动类加载器加载的类，委派 应用程序类加载器去加载类的方式， 打破了双亲委派机制。</li><li>没有打破双亲委派机制：JDBC 只是在 DriverManager 加载完之后，通过初始化阶段触发驱动类的加载，类的加载依然遵循双亲委派 机制。</li></ul><h4 id="4-3-3、OSGI-模块化"><a href="#4-3-3、OSGI-模块化" class="headerlink" title="4.3.3、OSGI 模块化"></a>4.3.3、OSGI 模块化</h4><p>历史上 OSGi 模块化框架存在同级之间的类加载器的委托加载。OSGI 还使用类加载器实现热部署的功能。</p><p>热部署指的是在服务不停止的情况下，动态地更新字节码文件到内存中。</p><p><img src="/images/jvm-osgi-classloader.png" alt="osgi-classloader"></p><blockquote><p>使用阿里 arthas 不停机解决线上问题：</p><ol><li>背景：小李的团队将代码上线之后，发现存在一个小 bug，但是用户急着使用，如果重新打包再发布需要一个多小时的时间，所以希望能使用 arthas 尽快的将这个问题修复。</li><li>思路：<ol><li>在出问题的服务器上部署一个 arthas，并启动。</li><li>jad –source-only 类全限定名 &gt; 目录&#x2F;文件名.java<ul><li>jad 命令反编译，然后可以用其它编译器，比如 vim 来修改源码</li></ul></li><li>mc –c 类加载器的 hashcode 目录&#x2F;文件名.java -d 输出目录<ul><li>mc 命令用来编译修改过的代码</li></ul></li><li>retransform class 文件所在目录&#x2F;xxx.class<ul><li>用 retransform 命令加载新的字节码</li></ul></li></ol></li></ol><p>注意事项：</p><ol><li>程序重启之后，字节码文件会恢复，除非将 class 文件放入 jar 包中进行更新。</li><li>使用 retransform 不能添加方法或者字段，也不能更新正在执行中的方法。</li></ol></blockquote><h3 id="4-4、Jdk8-前后的类加载器变化"><a href="#4-4、Jdk8-前后的类加载器变化" class="headerlink" title="4.4、Jdk8 前后的类加载器变化"></a>4.4、Jdk8 前后的类加载器变化</h3><h4 id="4-4-1、JDK8-及之前的类加载器"><a href="#4-4-1、JDK8-及之前的类加载器" class="headerlink" title="4.4.1、JDK8 及之前的类加载器"></a>4.4.1、JDK8 及之前的类加载器</h4><p>JDK8 及之前的版本中，扩展类加载器和应用程序类加载器的源码位于 rt.jar 包中的 sun.misc.Launcher.java。</p><p><img src="/images/jvm-jdk8-classloader.png" alt="jdk8-classloader"></p><h4 id="4-4-1、JDK8-之后的类加载器"><a href="#4-4-1、JDK8-之后的类加载器" class="headerlink" title="4.4.1、JDK8 之后的类加载器"></a>4.4.1、JDK8 之后的类加载器</h4><ol><li>启动类加载器使用 Java 编写，位于 jdk.internal.loader.ClassLoaders 类中。 Java 中的 BootClassLoader 继承自 BuiltinClassLoader 实现从模块中找到要加载的字节码资源文件。 启动类加载器依然无法通过 java 代码获取到，返回的仍然是 null，保持了统一。</li><li>扩展类加载器被替换成平台类加载器（Platform Class Loader）。平台类加载器遵循模块化方式加载字节码文件，所以继承关系从 URLClassLoader 变成 BuiltinClassLoader，BuiltinClassLoader 实现了从模块中加载字节码文件。平台类加载器的存在更多的是为了与老版本的设计方案兼容，自身没有特殊的逻辑。</li></ol><h2 id="5、内存区域"><a href="#5、内存区域" class="headerlink" title="5、内存区域"></a>5、内存区域</h2><p>Java 虚拟机在运行 Java 程序过程中管理的内存区域，称之为运行时数据区。</p><p><img src="/images/jvm-runtimeDataZone.png" alt="运行时数据区"></p><h3 id="5-1、程序计数器"><a href="#5-1、程序计数器" class="headerlink" title="5.1、程序计数器"></a>5.1、程序计数器</h3><p>1、程序计数器（Program Counter Register）也叫 PC 寄存器，每个线程会通过程序计数器记录当前要执行的的字 节码指令的地址。</p><p>2、在加载阶段，虚拟机把字节码文件中的指令读取到内存后，会将原文件中的偏移量转换成内存地址。每条字节码指令都会拥有内存地址。</p><p>3、在代码执行过程中，程序计数器会记录下一行字节码指令的地址。执行完当前指令后，虚拟机的执行引擎根据程序计数器执行下一行指令。</p><p>4、在多线程执行情况下，Java 虚拟机需要通过程序计数器记录 CPU 切换前解释执行到哪一条指令并继续解释运行。</p><p>程序计数器在运行中会出现内存溢出吗？</p><ul><li>内存溢出指的是程序在使用某一块内存区域时，存放数据需要占用的内存大小超过虚拟机能提供的内存上限。</li><li>因为每个线程只存储一个固定长度的内存地址，程序计数器是不会发生内存溢出的。</li><li>程序员无需对程序计数器做任何处理。</li></ul><h3 id="5-2、Java-虚拟机栈"><a href="#5-2、Java-虚拟机栈" class="headerlink" title="5.2、Java 虚拟机栈"></a>5.2、Java 虚拟机栈</h3><p>Java 虚拟机栈（Java Virtual Machine Stack）采用栈的数据结构来管理方法调用中的基本数据，先进后出（First In Last Out），每个方法的调用使用一个栈帧（Stack Frame）来保存。</p><p>Java 虚拟机栈随着线程的创建而创建，而回收则会在线程的销毁时进行。由于方法可能会在不同线程中执行，每个线程都会包含一个自己的虚拟机栈。</p><p>Java 虚拟机栈 - 栈帧的组成</p><ul><li>局部变量表：局部变量表的作用是在运行过程 中存放所有的局部变量。</li><li>操作数栈：操作数栈是栈帧中虚拟机在执 行指令过程中用来存放临时数 据的一块区域。</li><li>帧数据：帧数据主要包含动态链接、方法出口、异常表的引用。</li></ul><h4 id="5-2-1、局部变量表"><a href="#5-2-1、局部变量表" class="headerlink" title="5.2.1、局部变量表"></a>5.2.1、局部变量表</h4><p>局部变量表的作用是在方法执行过程中存放所有的局部变量。编译成字节码文件时就可以确定局部变量表的内容。</p><p>栈帧中的局部变量表是一个数组，数组中每一个位置称之为槽(slot) ，long 和 double 类型占用两个槽，其他类型占用一个槽。</p><ul><li>实例方法中的序号为 0 的位置存放的是 this，指的是当前调用方法的对象，运行时会在内存中存放实例对象的地址。</li><li>方法参数也会保存在局部变量表中，其顺序与方法中参数定义的顺序一致。</li><li>局部变量表保存的内容有：实例方法的 this 对象，方法的参数，方法体中声明的局部变量。</li></ul><p>⚠️ 为了节省空间，局部变量表中的槽是可以复用的，一旦某个局部变量不再生效，当前槽就可以再次被使用。</p><h4 id="5-2-2、操作数栈"><a href="#5-2-2、操作数栈" class="headerlink" title="5.2.2、操作数栈"></a>5.2.2、操作数栈</h4><p>操作数栈是栈帧中虚拟机在执行指令过程中用来存放中间数据的一块区域。他是一种栈式的数据结构，如 果一条指令将一个值压入操作数栈，则后面的指令可以弹出并使用该值。</p><p>在编译期就可以确定操作数栈的最大深度，从而在执行时正确的分配内存大小。</p><h4 id="5-2-3、帧数据"><a href="#5-2-3、帧数据" class="headerlink" title="5.2.3、帧数据"></a>5.2.3、帧数据</h4><p>当前类的字节码指令引用其他类的属性或者方法时，需要将符号引用（编号）转换成对应的运行时常量池中的内存地址。动态链接就保存编号到运行时常量池的内存地址的映射关系。</p><p>方法出口指的是方法在正确或者异常结束时，当前栈帧会被弹出，同时程序计数器应该指向上一个栈帧中的 下一条指令的地址。所以在当前栈帧中，需要存储此方法出口的地址。</p><p>异常表存放的是代码中异常的处理信息，包含了异常捕获的生效范围以及异常发生后跳转到的字节码指令位置。</p><h4 id="5-2-4、栈内存溢出"><a href="#5-2-4、栈内存溢出" class="headerlink" title="5.2.4、栈内存溢出"></a>5.2.4、栈内存溢出</h4><p>Java 虚拟机栈如果栈帧过多，当占用内存超过栈内存可以分配的最大大小就会出现内存溢出。</p><p>Java 虚拟机栈内存溢出时会出现 StackOverflowError 的错误。</p><h4 id="5-2-5、默认大小"><a href="#5-2-5、默认大小" class="headerlink" title="5.2.5、默认大小"></a>5.2.5、默认大小</h4><p>如果不指定栈的大小，JVM 将创建一个具有默认大小的栈。大小取决于操作系统和计算机的体系结构。</p><p><img src="/images/jvm-stackSize.png" alt="stackSize"></p><p><strong>设置大小：</strong>使用虚拟机参数 -Xss</p><ul><li>语法：-Xss 栈大小</li><li>单位：字节（默认，必须是 1024 的倍数）、k 或者 K(KB)、m 或者 M(MB)、g 或者 G(GB)</li></ul><p><strong>注意事项：</strong></p><ol><li><p>与-Xss 类似，也可以使用 -XX:ThreadStackSize 调整标志来配置堆栈大小。 格式为：-XX:ThreadStackSize&#x3D;1024</p></li><li><p>HotSpot JVM 对栈大小的最大值和最小值有要求</p><p>比如测试如下两个参数:</p><ul><li>-Xss1k</li><li>-Xss1025m</li></ul><p>Windows（64 位）下的 JDK8 测试最小值为 180k，最大值为 1024m。</p></li><li><p>局部变量过多、操作数栈深度过大也会影响栈内存的大小。</p></li></ol><p>一般情况下，工作中即便使用了递归进行操作，栈的深度最多也只能到几百,不会出现栈的溢出。所以此参数 可以手动指定为-Xss256k 节省内存。</p><h4 id="5-2-6、本地方法栈"><a href="#5-2-6、本地方法栈" class="headerlink" title="5.2.6、本地方法栈"></a>5.2.6、本地方法栈</h4><p>Java 虚拟机栈存储了 Java 方法调用时的栈帧，而本地方法栈存储的是 native 本地方法的栈帧。</p><p>在 Hotspot 虚拟机中，Java 虚拟机栈和本地方法栈在实现上使用同一个栈空间。本地方法栈会在栈内存上生成一个栈帧，临时保存方法的参数，同时在出现异常时也方便把本地方法的栈信息打印出来。</p><h3 id="5-3、堆"><a href="#5-3、堆" class="headerlink" title="5.3、堆"></a>5.3、堆</h3><p>一般 Java 程序中堆内存是空间最大的一块内存区域。创建出来的对象都存在于堆上。栈上的局部变量表中，可以存放堆上对象的引用。静态变量也可以存放堆对象的引用，通过静态变量就可以实 现对象在线程之间共享。</p><blockquote><p>模拟堆区的溢出</p><ul><li>需求： 通过 new 关键字不停创建对象，放入集合中，模拟堆内存的溢出，观察堆溢出之后的异 常信息。</li><li>现象： 堆内存大小是有上限的，当对象一直向堆中放入对象达到上限之后，就会抛出 OutOfMemory 错误。</li></ul></blockquote><p>堆空间有三个值：used、total、max。</p><ul><li>used：当前已使用的堆内存。</li><li>total：java 虚拟机已经分配的可用堆内存。</li><li>max：java 虚拟机可以分配的最大堆内存。</li></ul><blockquote><p>arthas 中堆内存相关的功能：</p><ul><li>堆内存 used total max 三个值可以通过 dashboard 命令看到。</li><li>手动指定刷新频率（不指定默认 5 秒一次）：dashboard –i 刷新频率(毫秒)。</li></ul></blockquote><p>随着堆中的对象增多，当 total 可以使用的内存即将不足时，java 虚拟机会继续分配内存给堆。</p><p>如果堆内存不足，java 虚拟机就会不断的分配内存，total 值会变大。total 最多只能与 max 相等。</p><blockquote><p>是不是当 <code>used = max = total</code> 的时候，堆内存就溢出了呢？</p><ul><li>不是，堆内存溢出的判断条件比较复杂，在下一章《垃圾回收器》中会详细介绍。</li></ul></blockquote><p>如果不设置任何的虚拟机参数，max 默认是系统内存的 1&#x2F;4，total 默认是系统内存的 1&#x2F;64。</p><p>在实际应用中一般都需要设置 total 和 max 的值。</p><blockquote><p>Oracle 官方文档：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p></blockquote><p>设置大小：使用虚拟机参数 –Xmx（max 最大值）和-Xms (初始的 total)。</p><ul><li>语法：-Xmx 值 -Xms 值</li><li>单位：字节（默认，必须是 1024 的倍数）、k 或者 K(KB)、m 或者 M(MB)、g 或者 G(GB)</li><li>限制：Xmx 必须大于 2 MB，Xms 必须大于 1MB</li></ul><blockquote><p>为什么 arthas 中显示的 heap 堆大小与设置的值不一样呢？</p><ul><li>arthas 中的 heap 堆内存使用 JMX 技术中内存获取方式，这种方式与垃圾回收器有关，计算的是可以分配对象的内存，而不是整个内存。</li></ul></blockquote><p>Java 服务端程序开发时，建议将-Xmx 和-Xms 设置为相同的值，这样在程序启动之后可使用的总内存就是最大内存，而无需向 java 虚拟机再次申请，减少了申请并分配内存时间上的开销，同时也不会出现内存过剩之后堆收缩的情况。</p><p>-Xmx 具体设置的值与实际的应用程序运行环境有关，在《实战篇》中会给出设置方案。</p><h3 id="5-4、方法区"><a href="#5-4、方法区" class="headerlink" title="5.4、方法区"></a>5.4、方法区</h3><p>方法区（Method Area）是存放基础信息的位置，线程共享，主要包含三部分内容：</p><ul><li>类的元信息：保存所有类的基本信息。</li><li>运行时常量池：保存字节码文件中的常量池内容。</li><li>字符串常量池：保存字符串常量</li></ul><p>方法区是用来存储每个类的基本信息（元信息），一般称之为 InstanceKlass 对象。在类的加载阶段完成。</p><p><img src="/images/jvm-methodArea.png" alt="methodArea"></p><h4 id="5-4-1、元信息-运行时常量池"><a href="#5-4-1、元信息-运行时常量池" class="headerlink" title="5.4.1、元信息&amp;运行时常量池"></a>5.4.1、元信息&amp;运行时常量池</h4><p>方法区除存储类的元信息之外，还存放运行时常量池。常量池中存放的是字节码中的常量池内容。</p><ul><li>静态常量池：通过字节码文件中编号查表的方式找到常量，这种常量池称为静态常量池。</li><li>运行时常量池：当常量池加载到内存中之后，可以通过内存地址快速的定位到常量池中的内容，这种常量池称为运行时常量池。</li></ul><p>方法区是《Java 虚拟机规范》中设计的虚拟概念，每款 Java 虚拟机在实现上都各不相同。</p><p>Hotspot 设计如下：</p><ul><li>JDK7 及之前的版本将方法区存放在堆区域中的永久代空间，堆的大小由虚拟机参数来控制。</li><li>JDK8 及之后的版本将方法区存放在元空间中，元空间位于操作系统维护的直接内存中，默认情况下只要不超过操作系统承受的上限，可以一直分配。</li></ul><blockquote><p>arthas 中查看方法区：</p><ul><li>使用 memory 打印出内存情况，JDK7 及之前的版本查看 ps_perm_gen 属性。</li><li>JDK8 及之后的版本查看 metaspace 属性。</li></ul></blockquote><p>实验：模拟方法区的溢出</p><p>需求： 通过 ByteBuddy 框架，动态生成字节码数据，加载到内存中。通过死循环不停地加载到方法区，观察方法区是 否会出现内存溢出的情况。分别在 JDK7 和 JDK8 上运行上述代码。</p><blockquote><p>ByteBuddy 框架的基本使用方法：ByteBuddy 是一个基于 Java 的开源库，用于生成和操作 Java 字节码。</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.bytebuddy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>byte-buddy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.12.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 ClassWriter 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassWriter</span> <span class="hljs-variable">classWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p>调用 visit 方法，创建字节码数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">classWriter.visit(Opcodes.V1_7,Opcodes.ACC_PUBLIC,name,<span class="hljs-literal">null</span> ,<span class="hljs-string">&quot;java/lang/Object&quot;</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-type">byte</span>[] bytes = classWriter.toByteArray();<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>实验发现，JDK7 上运行大概十几万次，就出现了错误。在 JDK8 上运行百万次，程序都没有出现任何错误，但是内存会直线升高。这说明 JDK7 和 JDK8 在方法区的存放上，采用不同的设计。</p><ul><li><p>JDK7 将方法区存放在堆区域中的永久代空间，堆的大小由虚拟机参数-XX:MaxPermSize&#x3D;值来控制。</p></li><li><p>JDK8 将方法区存放在元空间中，元空间位于操作系统维护的直接内存中，默认情况下只要不超过操作系统承受 的上限，可以一直分配。可以使用-XX:MaxMetaspaceSize&#x3D;值将元空间最大大小进行限制。</p><p><img src="/images/jvm-methodAreaWhere.png" alt="method-7&amp;8"></p></li></ul><h4 id="5-4-2、字符串常量池"><a href="#5-4-2、字符串常量池" class="headerlink" title="5.4.2、字符串常量池"></a>5.4.2、字符串常量池</h4><p>字符串常量池（StringTable）存储在代码中定义的常量字符串内容。</p><p>字符串常量池和运行时常量池有什么关系？</p><p>早期设计时，字符串常量池是属于运行时常量池的一部分，它们存储的位置也是一致的。后续做出调整， 将字符串常量池和运行时常量池做拆分。</p><p><img src="/images/jvm-stringTable&runtimeTale.png" alt="常量池"></p><p>静态变量存储在哪里呢？</p><ul><li>JDK6 及之前的版本中，静态变量是存放在方法区中的，也就是永久代。</li><li>JDK7 及之后的版本中，静态变量是存放在堆中的 Class 对象中，脱离了永久代。</li></ul><h3 id="5-5、直接内存"><a href="#5-5、直接内存" class="headerlink" title="5.5、直接内存"></a>5.5、直接内存</h3><p>直接内存（Direct Memory）并不在《Java 虚拟机规范》中存在，所以并不属于 Java 运行时的内存区域。</p><p>在 JDK 1.4 中引入 NIO 机制并使用直接内存，主要为了解决以下两个问题:</p><ol><li>Java 堆中的对象如果不再使用要回收，回收时会影响对象的创建和使用。</li><li>IO 操作比如读文件，需要先把文件读入直接内存（缓冲区）再把数据复制到 Java 堆中。</li></ol><p>现在直接放入直接内存即可，同时 Java 堆上维护直接内存的引用，减少了数据复制的开销。写文件也是类似的思路。</p><p><img src="/images/jvm-directMemory-filwRW.png" alt="rwFile"></p><blockquote><p>要创建直接内存上的数据，可以使用 ByteBuffer。</p><ul><li>语法： ByteBuffer directBuffer &#x3D; ByteBuffer.allocateDirect(size);</li></ul><p>注意事项：arthas 的 memory 命令可以查看直接内存大小，属性名 direct。</p></blockquote><p>如果需要手动调整直接内存的大小，可以使用-XX:MaxDirectMemorySize&#x3D;大小</p><ul><li>单位 k 或 K 表示千字节，m 或 M 表示兆字节，g 或 G 表示千兆字节。默认不设置该参数情况下，JVM 自动选择 最 大分配的大小。</li></ul><p>以下示例以不同的单位说明如何将直接内存大小设置为 1024 KB：</p><ul><li>-XX:MaxDirectMemorySize&#x3D;1m</li><li>-XX:MaxDirectMemorySize&#x3D;1024k</li><li>-XX:MaxDirectMemorySize&#x3D;1048576</li></ul><h2 id="6、垃圾回收"><a href="#6、垃圾回收" class="headerlink" title="6、垃圾回收"></a>6、垃圾回收</h2><p>1、C&#x2F;C++的内存管理</p><ul><li><p>在 C&#x2F;C++这类没有自动垃圾回收机制的语言中，一个对象如果不再使用，需要手动释放，否则就会出现内存泄漏。</p><p>这种释放对象的过程称为垃圾回收，而需要程序员编写代码进行回收的方式为手动回收。</p></li><li><p>内存泄漏指的是不再使用的对象在系统中未被回收，内存泄漏的积累可能会导致内存溢出。</p></li></ul><p>2、Java 的内存管理</p><ul><li>Java 中为简化对象的释放，引入自动的垃圾回收（Garbage Collection 简称 GC）机制。通过垃圾回收器来对不再使用的对象完成自动的回收，垃圾回收器主要负责对堆上的内存进行回收。</li><li>其他很多现代语言比如 C#、Python、Go 都拥有自己的垃圾回收器。</li></ul><p>3、垃圾回收的对比</p><ol><li>自动垃圾回收：自动根据对象是否使用由虚拟机来回收对象<ul><li>优点：降低程序员实现难度、降低对象回收 bug 的可能性。</li><li>缺点：程序员无法控制内存回收的及时性。</li></ul></li><li>手动垃圾回收：由程序员编程实现对象的删除<ul><li>优点：回收及时性高，由程序员把控回收的时机。</li><li>缺点：编写不当容易出现悬空指针、重复释放、内存泄漏等问题。</li></ul></li></ol><p><strong>Java 的内存管理和自动垃圾回收</strong></p><p>线程不共享的部分，都是伴随着线程的创建而创建，线程的销毁而销毁。而方法的栈帧在执行完方法之后就会自动弹出栈并释放掉对应的内存。</p><h3 id="6-1、方法区的回收"><a href="#6-1、方法区的回收" class="headerlink" title="6.1、方法区的回收"></a>6.1、方法区的回收</h3><p>方法区中能回收的内容主要就是不再使用的类。</p><p>判定一个类可以被卸载。需要同时满足下面三个条件：</p><ol><li>此类所有实例对象都已经被回收，在堆中不存在任何该类的实例对象以及子类对象。</li><li>加载该类的类加载器已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用。</li></ol><p><strong>手动触发回收：</strong>如果需要手动触发垃圾回收，可以调用 System.gc()方法。</p><ul><li>语法： System.gc()</li><li>注意事项：调用 System.gc()方法并不一定会立即回收垃圾，仅仅是向 Java 虚拟机发送一个垃圾回收的请求，具体是否需要执行垃圾回收 Java 虚拟机会自行判断。</li></ul><blockquote><p>开发中此类场景一般很少出现，主要在如 OSGi、JSP 的热部署等应用场景中。 每个 jsp 文件对应一个唯一的类加载器，当一个 jsp 文件修改了，就直接卸载这个 jsp 类加载器。重新创建类加载器，重新加载 jsp 文件。</p></blockquote><h3 id="6-2、堆回收"><a href="#6-2、堆回收" class="headerlink" title="6.2、堆回收"></a>6.2、堆回收</h3><p>如何判断堆上的对象可以回收？</p><p>Java 中的对象是否能被回收，是根据对象是否被引用来决定的。如果对象被引用了，说明该对象还在使用，不允许被回收。</p><p>只有无法通过引用获取到对象时，该对象才能被回收。</p><h4 id="6-2-1、引用计数法-可达性分析法"><a href="#6-2-1、引用计数法-可达性分析法" class="headerlink" title="6.2.1、引用计数法&amp;可达性分析法"></a>6.2.1、引用计数法&amp;可达性分析法</h4><p>常见的有两种判断方法：引用计数法和可达性分析法。</p><p>1、引用计数法会为每个对象维护一个引用计数器，当对象被引用时加 1，取消引用时减 1。</p><ol><li><p>引用计数法的缺点-循环引用</p><p>引用计数法的优点是实现简单，C++中的智能指针就采用引用计数法，但是它也存在缺点，主要有两点：</p><ol><li>每次引用和取消引用都需要维护计数器，对系统性能会有一定的影响</li><li>存在循环引用问题，所谓循环引用就是当 A 引用 B，B 同时引用 A 时会出现对象无法回收的问题。、</li></ol></li><li><p>查看垃圾回收日志</p><ul><li>如果想要查看垃圾回收的信息，可以使用 -verbose:gc 参数。</li><li>语法：-verbose:gc</li></ul></li></ol><p>2、可达性分析算法</p><p>Java 使用的是可达性分析算法来判断对象是否可以被回收。</p><ol><li><p>可达性分析将对象分为两类：垃圾回收的根对象（GC Root）和普通对象，对象与对象之间存在引用关系。</p><p>哪些对象被称之为 GC Root 对象呢？</p><ul><li>线程 Thread 对象。</li><li>系统类加载器加载的 java.lang.Class 对象。</li><li>监视器对象，用来保存同步锁 synchronized 关键字持有的对象。</li><li>本地方法调用时使用的全局对象。</li></ul></li><li><p>查看 GC Root</p><p>通过 arthas 和 eclipse Memory Analyzer (MAT) 工具可以查看 GC Root，MAT 工具是 eclipse 推出的 Java 堆内存 检测工具。</p><p>具体操作步骤如下：</p><ol><li>使用 arthas 的 heapdump 命令将堆内存快照保存到本地磁盘中。</li><li>使用 MAT 工具打开堆内存快照文件。</li><li>选择 GC Roots 功能查看所有的 GC Root。</li></ol></li></ol><h4 id="6-2-2、常见的对象引用"><a href="#6-2-2、常见的对象引用" class="headerlink" title="6.2.2、常见的对象引用"></a>6.2.2、常见的对象引用</h4><p>可达性算法中描述的对象引用，一般指的是强引用，即是 GCRoot 对象对普通对象有引用关系，只要这层关系存在，普通对象就不会被回收。</p><h5 id="6-2-2-1、软引用"><a href="#6-2-2-1、软引用" class="headerlink" title="6.2.2.1、软引用"></a>6.2.2.1、软引用</h5><p>软引用相对于强引用是比较弱的引用关系，如果一个对象只有软引用关联到它，当程序内存不足时，就会将软引用中的数据进行回收。</p><p>在 JDK 1.2 版之后提供了 SoftReference 类来实现软引用，软引用常用于缓存中。</p><p>软引用的执行过程如下：</p><ol><li>将对象使用软引用包装起来，new SoftReference&lt;对象类型&gt;(对象)。</li><li>内存不足时，虚拟机尝试进行垃圾回收。</li><li>如果垃圾回收仍不能解决内存不足的问题，回收软引用中的对象。</li><li>如果依然内存不足，抛出 OutOfMemory 异常。</li></ol><p>软引用中的对象如果在内存不足时回收，SoftReference 对象本身也需要被回收。如何知道哪些 SoftReference 对象需要回收呢？</p><p>SoftReference 提供一套队列机制：</p><ol><li>软引用创建时，通过构造器传入引用队列。</li><li>在软引用中包含的对象被回收时，该软引用对象会被放入引用队列。</li><li>通过代码遍历引用队列，将 SoftReference 的强引用删除。</li></ol><p><img src="/images/jvm-softRefenceQueue.png" alt="软引用队列"></p><p><strong>软引用的使用场景-缓存</strong></p><p>软引用也可以使用继承自 SoftReference 类的方式来实现。</p><p>创建软引用对象：实现 StudentRef 类，通过构造器传入软引用包含的对象，以及引用队列。</p><p><img src="/images/jvm-softReference.png" alt="softReference"></p><p>使用软引用实现学生数据的缓存：</p><p><img src="/images/jvm-comeTrueSoftReference.png" alt="软引用缓存"></p><h5 id="6-2-2-2、弱引用"><a href="#6-2-2-2、弱引用" class="headerlink" title="6.2.2.2、弱引用"></a>6.2.2.2、弱引用</h5><p>弱引用的整体机制和软引用基本一致，区别在于弱引用包含的对象在垃圾回收时，不管内存够不够都会直接被回收。</p><p>在 JDK 1.2 版之后提供 WeakReference 类来实现弱引用，弱引用主要在 ThreadLocal 中使用。</p><p>弱引用对象本身也可以使用引用队列进行回收。</p><p><img src="/images/jvm-weakRefence.png" alt="弱引用"></p><h5 id="6-2-2-3、虚引用-终结器引用"><a href="#6-2-2-3、虚引用-终结器引用" class="headerlink" title="6.2.2.3、虚引用&amp;终结器引用"></a>6.2.2.3、虚引用&amp;终结器引用</h5><blockquote><p>这两种引用在常规开发中是不会使用的。</p></blockquote><p>1、虚引用也叫幽灵引用&#x2F;幻影引用，不能通过虚引用对象获取到包含的对象。</p><ul><li>虚引用唯一的用途是当对象被垃圾回收器回收时可以接收到对应的通知。</li><li>Java 中使用 PhantomReference 实现虚引用，直接内存中为了及时知道 直接内存对象不再使用，从而回收内存，使用虚引用来实现。</li></ul><p>2、终结器引用指的是在对象需要被回收时，终结器引用会关联对象并放置在 Finalizer 类中的引用队列中，之后被 FinalizerThread 线程从队列中获取对象，然后执行对象的 finalize 方法，在对象第二次被回收时，该对象才真正的被回收。在这个过程中可以在 finalize 方法中再将自身对象使用强引用关联上，但是不建议这样做。</p><h3 id="6-3、垃圾回收算法"><a href="#6-3、垃圾回收算法" class="headerlink" title="6.3、垃圾回收算法"></a>6.3、垃圾回收算法</h3><p>Java 是如何实现垃圾回收的呢？</p><p><strong>垃圾回收要做的有两件事：</strong></p><ol><li>找到内存中存活的对象。</li><li>释放不再存活对象的内存，使得程序能再次利用这部分空间</li></ol><p><strong>垃圾回收算法的历史和分类</strong></p><ul><li>1960 年 John McCarthy 发布第一个 GC 算法：标记-清除算法。</li><li>1963 年 Marvin L. Minsky 发布复制算法。</li></ul><p>本质上后续所有的垃圾回收算法，都是在上述两种算法的基础上优化而来。</p><blockquote><ol><li>标记-清除算法：Mark Sweep GC</li><li>复制算法：Copying GC</li><li>标记-整理算法：Mark Compact GC</li><li>分代 GC：Generational GC</li></ol></blockquote><p><strong>垃圾回收算法的评价标准</strong></p><p>Java 垃圾回收过程会通过单独的 GC 线程来完成，但是不管使用哪一种 GC 算法，都会有部分阶段需要停止所有的用户线程。这个该过程被称为 Stop The World 简称 STW，如果 STW 时间过长则会影响用户的使用。</p><p>判断 GC 算法是否优秀，可以从三方面来考虑：</p><ol><li><p>吞吐量：</p><ul><li>吞吐量指的是 CPU 用于执行用户代码的时间与 CPU 总执行时间的比值。</li><li>吞吐量数值越高，垃圾回收的效率就越高。</li><li>吞吐量 &#x3D; 执行用户代码时间 &#x2F; (执行用户代码时间 + GC 时间)</li></ul><p>比如：虚拟机总共运行了 100 分钟，其中 GC 花掉 1 分钟，那么吞吐量就是 99%</p></li><li><p>最大暂停时间：</p><ul><li>最大暂停时间指的是所有在垃圾回收过程中的 STW 时间最大值。</li><li>最大暂停时间越短，用户使用系统时受到的影响就越短。</li></ul></li><li><p>.堆使用效率：</p><ul><li><p>不同垃圾回收算法，对堆内存的使用方式是不同的。</p><ul><li>标记清除算法，可以使用完整的堆内存。</li><li>复制算法会将堆内存一分为二，每次只能使用一半内存。</li></ul><p>从堆使用效率上来说，标记清除算法要优于复制算法。</p></li></ul></li></ol><p>上述三种评价标准：堆使用效率、吞吐量，以及最大暂停时间不可兼得。</p><p>一般来说，堆内存越大，最大暂停时间就越长。想要减少最大暂停时间，就会降低吞吐量。 不同的垃圾回收算法，适用于不同的场景。</p><h4 id="6-3-1、标记清除算法"><a href="#6-3-1、标记清除算法" class="headerlink" title="6.3.1、标记清除算法"></a>6.3.1、标记清除算法</h4><p>标记清除算法的核心思想分为两个阶段：</p><ol><li>标记阶段：将所有存活的对象进行标记。Java 中使用可达性分析算法，从 GC Root 开始通过引用链遍历出所有存活对象。</li><li>清除阶段：从内存中删除没有被标记也就是非存活对象。</li></ol><p>标记清除算法的优缺点</p><ol><li>优点：<ul><li>实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。</li></ul></li><li>缺点：<ul><li>碎片化问题：由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。</li><li>分配速度慢：由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才能获得合适的内存空间。</li></ul></li></ol><h4 id="6-3-2、复制算法"><a href="#6-3-2、复制算法" class="headerlink" title="6.3.2、复制算法"></a>6.3.2、复制算法</h4><p>复制算法的核心思想是：</p><ol><li>准备两块空间 From 空间和 To 空间，每次在对象分配阶段，只能使用其中一块空间（From 空间）。</li><li>在垃圾回收 GC 阶段，将 From 中存活对象复制到 To 空间。</li><li>将两块空间的 From 和 To 名字互换。</li></ol><blockquote><p>完整的复制算法的例子：</p><ol><li>将堆内存分割成两块 From 空间、To 空间，对象分配阶段创建对象。</li><li>GC 阶段开始，将 GC Root 搬运到 To 空间。</li><li>将 GC Root 关联的对象，搬运到 To 空间。</li><li>清理 From 空间，并把名称互换。</li></ol></blockquote><p>复制算法的优缺点</p><ol><li>优点：<ul><li>吞吐量高：复制算法只需要遍历一次存活对象复制到 To 空间即可，比标记-整理算法少一次遍历的过程，因而性能较好，但是不如标记-清除算法，因为标记清除算法不需要进行对象的移动。</li><li>不会发生碎片化：复制算法在复制之后就会将对象按顺序放入 To 空间中，所以对象以外的区域都是可用空间，不存在碎片化内存空间。</li></ul></li><li>缺点：<ul><li>内存使用效率低：每次只能让一半的内存空间来为创建对象使用。</li></ul></li></ol><h4 id="6-3-3、标记整理算法"><a href="#6-3-3、标记整理算法" class="headerlink" title="6.3.3、标记整理算法"></a>6.3.3、标记整理算法</h4><p>标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。</p><p>核心思想分为两个阶段：</p><ol><li>标记阶段：将所有存活的对象进行标记。Java 中使用可达性分析算法，从 GC Root 开始通过引用链遍历出所有存活对象。</li><li>整理阶段：将存活对象移动到堆的一端。清理掉存活对象的内存空间。</li></ol><p>标记整理算法的优缺点</p><ol><li>优点<ul><li>内存使用效率高：整个堆内存都可以使用，不会像复制算法只能使用半个堆内存。</li><li>不会发生碎片化：在整理阶段可以将对象往内存的一侧进行移动，剩下的空间都是可以分配对象的有效空间。</li></ul></li><li>缺点<ul><li>整理阶段的效率不高：整理算法有很多种，比如 Lisp2 整理算法需要对整个堆中的对象搜索 3 次，整体性能不佳。可以通过 TwoFinger、表格算法、ImmixGC 等高效的整理算法优化此阶段的性能。</li></ul></li></ol><h4 id="6-3-4、分代垃圾回收算法"><a href="#6-3-4、分代垃圾回收算法" class="headerlink" title="6.3.4、分代垃圾回收算法"></a>6.3.4、分代垃圾回收算法</h4><p>现代优秀的垃圾回收算法，会将上述描述的垃圾回收算法组合进行使用，其中应用最广的就是分代垃圾回收算法(Generational GC)。</p><p>分代垃圾回收将整个内存区域划分为年轻代和老年代，年轻代又分为 eden 区、From 区、To 区。From 区和 To 区统称幸存区(survivor)。</p><p><img src="/images/jvm-YoungOld.png" alt="OY"></p><blockquote><p>arthas 查看分代之后的内存情况：</p><ul><li>JDK8 中，添加-XX:+UseSerialGC 参数使用分代回收的垃圾回收器，运行程序。</li><li>在 arthas 中使用 memory 命令查看内存，显示出三个区域的内存情况。</li></ul></blockquote><ol><li><p>分代回收时，创建出来的对象，首先会被放入 Eden 区（伊甸园）。</p></li><li><p>随着对象在 Eden 区越来越多，如果 Eden 区满，新创建的对象已经无法放入，就会触发年轻代的 GC，称为 Minor GC 或者 Young GC。 Minor GC 会把需要 eden 中和 From 需要回收的对象回收，把没有回收的对象放入 To 区。</p></li><li><p>将 From 和 To 两块空间的名字互换。</p></li><li><p>当 eden 区满时再往里放入对象，依然会发生 Minor GC。</p></li><li><p>此时会回收 eden 区和 From 中的对象，并把 eden 和 from 区中剩余的对象放入 To 区。</p><p>⚠️ 注意：每次 Minor GC 中都会为对象记录他的年龄，初始值为 0，每次 GC 完加 1。</p></li><li><p>如果 Minor GC 后对象的年龄达到阈值（最大 15，默认值和垃圾回收器有关），对象就会被晋升至老年代。</p></li><li><p>当老年代中空间不足，无法放入新的对象时，先尝试 Minor GC，如果还是不足就会触发 Full GC，Full GC 会对整个堆进行垃圾回收。</p></li><li><p>如果 Full GC 依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出 Out Of Memory 异常。</p></li></ol><blockquote><p><strong>调整内存区域的大小</strong></p><ol><li><p>-Xms：设置堆的最小和初始大小，必须是 1024 倍数且大于 1MB</p><p>比如初始大小 6MB 的写法：</p><ul><li>-Xms6291456</li><li>-Xms6144k</li><li>-Xms6m</li></ul></li><li><p>-Xmx：设置最大堆的大小，必须是 1024 倍数且大于 2MB</p><p>比如最大堆 80 MB 的写法：</p><ul><li>-Xmx83886080</li><li>-Xmx81920k</li><li>-Xmx80m</li></ul></li><li><p>-Xmn：新生代的大小</p><p>新生代 256 MB 的写法：</p><ul><li>-Xmn256m</li><li>-Xmn262144k</li><li>-Xmn268435456</li></ul></li><li><p>-XX:SurvivorRatio：伊甸园区和幸存区的比例，默认为 8 新生代 1g 内存，伊甸园区 800MB,S0 和 S1 各 100MB</p><p>比例调整为 4 的写法：</p><ul><li>-XX:SurvivorRatio&#x3D;4</li></ul></li><li><p>-XX:+PrintGCDetails verbose:gc：打印 GC 日志</p><p>无</p></li></ol></blockquote><h3 id="6-4、垃圾回收器"><a href="#6-4、垃圾回收器" class="headerlink" title="6.4、垃圾回收器"></a>6.4、垃圾回收器</h3><p>为什么分代 GC 算法要把堆分成年轻代和老年代？</p><ul><li>系统中的大部分对象都是创建出来之后很快就不再使用可以被回收，比如用户获取订单数据，订单数据返回给用户后就可以释放。</li><li>老年代中会存放长期存活的对象，比如 Spring 的大部分 bean 对象，在程序启动之后就不会被回收。</li><li>在虚拟机的默认设置中，新生代大小要远小于老年代的大小。</li></ul><p>分代 GC 算法将堆分成年轻代和老年代主要原因有：</p><ol><li>可以通过调整年轻代和老年代的比例来适应不同类型的应用程序，提高内存的利用率和性能。</li><li>新生代和老年代使用不同的垃圾回收算法，新生代一般选择复制算法，老年代可以选择标记-清除和标记-整理 算法，由程序员来选择灵活度较高。</li><li>分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收(full gc),STW 时间就会减少。</li></ol><p>垃圾回收器的组合关系</p><p>垃圾回收器是垃圾回收算法的具体实现。 由于垃圾回收器分为年轻代和老年代，除了 G1 之外其他垃圾回收器必须成对组合进行使用。 具体的关系图如下：</p><p><img src="/images/jvm-ygc&ogc.png" alt="GC"></p><h4 id="6-4-1、Serial-垃圾回收器"><a href="#6-4-1、Serial-垃圾回收器" class="headerlink" title="6.4.1、Serial 垃圾回收器"></a>6.4.1、Serial 垃圾回收器</h4><blockquote><p>Serial 是是一种单线程串行回收年轻代的垃圾回收器。</p></blockquote><ol><li>回收年代和算法：<strong>年轻代、复制算法</strong></li><li>优点：单 CPU 处理器下吞吐量非常出色</li><li>缺点：多 CPU 下吞吐量不如其他垃圾回 收器，堆如果偏大会让用户线程 处于长时间的等待</li><li>适用场景：Java 编写的客户端程序或者硬件 配置有限的场景</li></ol><p><img src="/images/jvm-serialgc.png" alt="serial"></p><h4 id="6-4-2、SerialOld-垃圾回收器"><a href="#6-4-2、SerialOld-垃圾回收器" class="headerlink" title="6.4.2、SerialOld 垃圾回收器"></a>6.4.2、SerialOld 垃圾回收器</h4><blockquote><p>SerialOld 是 Serial 垃圾回收器的老年代版本。采用单线程串行回收 -XX:+UseSerialGC 新生代、老年代都使用串行回收器。</p></blockquote><ol><li>回收年代和算法：<strong>老年代、标记-整理算法</strong></li><li>优点：单 CPU 处理器下吞吐量非常出色</li><li>缺点：多 CPU 下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待</li><li>适用场景：与 Serial 垃圾回收器搭配使用， 或者在 CMS 特殊情况下使用</li></ol><p><img src="/images/jvm-serialold.png" alt="serialOld"></p><h4 id="6-4-3、ParNew-垃圾回收器"><a href="#6-4-3、ParNew-垃圾回收器" class="headerlink" title="6.4.3、ParNew 垃圾回收器"></a>6.4.3、ParNew 垃圾回收器</h4><blockquote><p>ParNew 垃圾回收器本质上是对 Serial 在多 CPU 下的优化，使用多线程进行垃圾回收</p><p>参数：-XX:+UseParNewGC</p><p>新生代使用 ParNew 回收器，老年代使用串行回收器</p></blockquote><ol><li>回收年代和算法：<strong>年轻代、复制算法</strong></li><li>优点：多 CPU 处理器下停顿时间较短</li><li>缺点：吞吐量和停顿时间不如 G1，所以在 JDK9 之后不建议使用</li><li>适用场景：JDK8 及之前的版本中，与 CMS 老年代垃圾回收器搭配使用</li></ol><p><img src="/images/jvm-parnew.png" alt="parNew"></p><h4 id="6-4-4、CMS-垃圾回收器"><a href="#6-4-4、CMS-垃圾回收器" class="headerlink" title="6.4.4、CMS 垃圾回收器"></a>6.4.4、CMS 垃圾回收器</h4><blockquote><p>CMS(Concurrent Mark Sweep)垃圾回收器关注的是系统的暂停时间， 允许用户线程和垃圾回收线程在某些步骤中同时执行，减少用户线程的等待时间。</p><p>参数：XX:+UseConcMarkSweepGC</p></blockquote><ol><li>回收年代和算法： <strong>老年代、标记清除算法</strong></li><li>优点：系统由于垃圾回收出现的停 顿时间较短，用户体验好</li><li>缺点：1、内存碎片问题 2、退化问题 3、浮动垃圾问题</li><li>适用场景：大型的互联网系统中用户请求数 据量大、频率高的场景 比如订单接口、商品接口等</li></ol><p><img src="/images/jvm-cmsgc.png" alt="cms"></p><p>CMS 执行步骤：</p><ol><li>初始标记：用极短的时间标记出 GC Roots 能直接关联到的对象。</li><li>并发标记：标记所有的对象，用户线程不需要暂停。</li><li>重新标记：由于并发标记阶段有些对象会发生变化，存在错标、漏标等情况，需要重新标记。</li><li>并发清理：清理死亡的对象，用户线程不需要暂停。</li></ol><p>CMS 垃圾回收器存在的问题</p><p>缺点：</p><ol><li>CMS 使用了标记-清除算法，在垃圾收集结束之后会出现大量的内存碎片，CMS 会在 Full GC 时进行碎片的整理。 这样会导致用户线程暂停，可以使用-XX:CMSFullGCsBeforeCompaction&#x3D;N 参数（默认 0）调整 N 次 Full GC 之 后再整理。</li><li>无法处理在并发清理过程中产生的“浮动垃圾”，不能做到完全的垃圾回收。</li><li>如果老年代内存不足无法分配对象，CMS 就会退化成 Serial Old 单线程回收老年代。</li></ol><p>CMS 垃圾回收器存在的问题 – 线程资源争抢问题</p><ul><li>在 CMS 中并发阶段运行时的线程数可以通过-XX:ConcGCThreads 参数设置，默认值为 0，由系统计算得出。</li><li>计算公式为(-XX:ParallelGCThreads 定义的线程数 + 3) &#x2F; 4， ParallelGCThreads 是 STW 停顿之后的 并行线程数</li><li>ParallelGCThreads 是由处理器核数决定的：<ol><li>当 cpu 核数小于 8 时，ParallelGCThreads &#x3D; CPU 核数</li><li>否则 ParallelGCThreads &#x3D; 8 + (CPU 核数 – 8 )*5&#x2F;8</li></ol></li><li>由于 CPU 的核心数有限，就会影响用户线程执行的性能。</li></ul><h4 id="6-4-5、Parallel-Scavenge-垃圾回收器"><a href="#6-4-5、Parallel-Scavenge-垃圾回收器" class="headerlink" title="6.4.5、Parallel Scavenge 垃圾回收器"></a>6.4.5、Parallel Scavenge 垃圾回收器</h4><blockquote><p>Parallel Scavenge 是 JDK8 默认的年轻代垃圾回收器， 多线程并行回收，关注的是系统的吞吐量。具备自动 调整堆内存大小的特点。</p></blockquote><ol><li>回收年代和算法： <strong>年轻代、复制算法</strong></li><li>优点：吞吐量高，而且手动可控。 为了提高吞吐量，虚拟机会 动态调整堆的参数</li><li>缺点：不能保证单次的停顿时间</li><li>适用场景：后台任务，不需要与用户交互，并且容易产生大量的对象。比如：大数据的处理，大文件导出</li></ol><p><img src="/images/jvm-parallelScavenge.png" alt="parallelScavenge"></p><h4 id="6-4-6、Parallel-Old-垃圾回收器"><a href="#6-4-6、Parallel-Old-垃圾回收器" class="headerlink" title="6.4.6、Parallel Old 垃圾回收器"></a>6.4.6、Parallel Old 垃圾回收器</h4><blockquote><p>Parallel Old 是为 Parallel Scavenge 收集器 设计的老年代版本，利用多线程并发收集。、</p><p>参数： -XX:+UseParallelGC 或 -XX:+UseParallelOldGC</p><p>Parallel Scavenge + Parallel Old 这种组合。</p></blockquote><ol><li>回收年代和算法： <strong>老年代、标记-整理算法</strong></li><li>优点：并发收集，在多核 CPU 下 效率较高</li><li>缺点：暂停时间会比较长</li><li>适用场景：与 Parallel Scavenge 配套使用</li></ol><p><img src="/images/jvm-parallelOld.png" alt="parallelOld"></p><p>Parallel Scavenge 允许手动设置最大暂停时间和吞吐量。Oracle 官方建议在使用该组合时，不要设置堆内存的最大值，垃圾回收器会根据最大暂停时间、吞吐量和自动调整内存大小。</p><ul><li>最大暂停时间：-XX:MaxGCPauseMillis&#x3D;n 设置每次垃圾回收时的最大停顿毫 秒数</li><li>吞吐量：-XX:GCTimeRatio&#x3D;n 设置吞吐量为 n（用户线 程执行时间 &#x3D; n&#x2F;n + 1）</li><li>自动调整内存大小：-XX:+UseAdaptiveSizePolicy 设置 可以让垃圾回收器根据吞吐量和最 大停顿的毫秒数自动调整内存大小</li></ul><h4 id="6-4-7、G1-垃圾回收器"><a href="#6-4-7、G1-垃圾回收器" class="headerlink" title="6.4.7、G1 垃圾回收器"></a>6.4.7、G1 垃圾回收器</h4><p>JDK9 之后默认的垃圾回收器是 G1（Garbage First）垃圾回收器。</p><blockquote><ul><li>Parallel Scavenge 关注吞吐量，允许用户设置最大暂停时间 ，但是会减少年轻代可用空间的大小。</li><li>CMS 关注暂停时间，但是吞吐量方面会下降。</li></ul></blockquote><p>G1 设计目标就是将上述两种垃圾回收器的优点融合：</p><ol><li>支持巨大的堆空间回收，并有较高的吞吐量。</li><li>支持多 CPU 并行垃圾回收。</li><li>允许用户设置最大暂停时间。</li></ol><blockquote><p>🔔JDK9 之后强烈建议使用 G1 垃圾回收器</p></blockquote><h5 id="6-4-7-1、内存结构"><a href="#6-4-7-1、内存结构" class="headerlink" title="6.4.7.1、内存结构"></a>6.4.7.1、内存结构</h5><p>G1 的整个堆会被划分成多个大小相等的区域，称之为区 Region，区域不要求是连续的。分为 Eden、Survivor、 Old 区。</p><p>Region 的大小通过堆空间大小&#x2F;2048 计算得到，也可以通过参数-XX:G1HeapRegionSize&#x3D;32m 指定(其 中 32m 指定 region 大小为 32M)，Region size 必须是 2 的指数幂，取值范围从 1M 到 32M。</p><p>G1 垃圾回收有两种方式：</p><ul><li>年轻代回收（Young GC）</li><li>混合回收（Mixed GC）</li></ul><h5 id="6-4-7-2、年轻代回收"><a href="#6-4-7-2、年轻代回收" class="headerlink" title="6.4.7.2、年轻代回收"></a>6.4.7.2、年轻代回收</h5><ul><li>年轻代回收（Young GC）：回收 Eden 区和 Survivor 区中不用的对象。会导致 STW，</li><li>G1 中可以通过参数 -XX:MaxGCPauseMillis&#x3D;n（默认 200） 设置每次垃圾回收时的最大暂停时间毫秒数，</li><li>G1 垃圾回收器会尽可能地保证暂停时间。</li></ul><h5 id="6-4-7-3、执行流程"><a href="#6-4-7-3、执行流程" class="headerlink" title="6.4.7.3、执行流程"></a>6.4.7.3、执行流程</h5><ol><li>新创建的对象会存放在 Eden 区。当 G1 判断年轻代区不足（max 默认 60%），无法分配对象时需要回收时会执行 Young GC。</li><li>标记出 Eden 和 Survivor 区域中的存活对象.</li><li>根据配置的最大暂停时间选择某些区域将存活对象复制到一个新的 Survivor 区中（年龄+1），清空这些区域。</li><li>后续 Young GC 时与之前相同，只不过 Survivor 区中存活对象会被搬运到另一个 Survivor 区。</li><li>当某个存活对象的年龄到达阈值（默认 15），将被放入老年代。</li><li>部分对象如果大小超过 Region 的一半，会直接放入老年代，这类老年代被称为 Humongous 区。比如堆内存是 4G，每个 Region 是 2M，只要一个大对象超过了 1M 就被放入 Humongous 区，如果对象过大会横跨多个 Region。</li><li>多次回收之后，会出现很多 Old 老年代区，此时总堆占有率达到阈值时 （-XX:InitiatingHeapOccupancyPercent 默认 45%）会触发混合回收 MixedGC。回收所有年轻代和 部分老年代的对象以及大对象区。采用复制算法来完成。</li></ol><p>G1 在进行 Young GC 的过程中会去记录每次垃圾回收时每个 Eden 区和 Survivor 区的平均耗时，以作为下次回收时的参考依据。这样就可以根据配置的最大暂停时间计算出本次回收时最多能回收多少个 Region 区域。 比如 -XX:MaxGCPauseMillis&#x3D;n（默认 200），每个 Region 回收耗时 40ms，那么这次回收最多只能回收 4 个 Region。</p><h5 id="6-4-7-4、混合回收"><a href="#6-4-7-4、混合回收" class="headerlink" title="6.4.7.4、混合回收"></a>6.4.7.4、混合回收</h5><ul><li>混合回收分为：初始标记(initial mark)、并发标记(concurrent mark)、最终标记(remark 或 Finalize Marking)、并发清理(cleanup)</li><li>G1 对老年代的清理会选择存活度最低的区域来进行回收，这样可以保证回收效率最高，这也是 G1(Garbage First)名称的由来。</li></ul><p><img src="/images/jvm-G1-GC.png" alt="G1"></p><h5 id="6-4-7-5、G1-垃圾回收器–FULL-GC"><a href="#6-4-7-5、G1-垃圾回收器–FULL-GC" class="headerlink" title="6.4.7.5、G1 垃圾回收器–FULL GC"></a>6.4.7.5、G1 垃圾回收器–FULL GC</h5><p>注意：如果清理过程中发现没有足够的空 Region 存放转移的对象，会出现 Full GC。单线程执行标记-整理算法， 此时会导致用户线程的暂停。所以尽量保证应该用的堆内存有一定多余的空间。</p><h5 id="6-4-7-6、G1-–-Garbage-First-垃圾回收器"><a href="#6-4-7-6、G1-–-Garbage-First-垃圾回收器" class="headerlink" title="6.4.7.6、G1 – Garbage First 垃圾回收器"></a>6.4.7.6、G1 – Garbage First 垃圾回收器</h5><p>参数 1： -XX:+UseG1GC 打开 G1 的开关， JDK9 之后默认不需要打开 参数 2：-XX:MaxGCPauseMillis&#x3D;毫秒值 最大暂停的时间</p><ol><li>回收年代和算法：年轻代+老年代、复制算法。</li><li>优点：对比较大的堆如超过 6G 的堆回收时，延迟可控 不会产生内存碎片并发标记的 SATB 算法效率高。</li><li>缺点：JDK8 之前还不够成熟。</li><li>适用场景：JDK8 最新版本、JDK9 之后建议默认使用。</li></ol><h2 id="7、内存调优"><a href="#7、内存调优" class="headerlink" title="7、内存调优"></a>7、内存调优</h2><h3 id="7-1、什么是内存泄漏"><a href="#7-1、什么是内存泄漏" class="headerlink" title="7.1、什么是内存泄漏"></a>7.1、什么是内存泄漏</h3><p><strong>内存溢出和内存泄漏</strong></p><ul><li>内存泄漏（memory leak）指在 Java 中如果不再使用一个对象，但是该对象依然在 GC ROOT 的引用链上， 这个对象就不会被垃圾回收器回收，这种情况就称为内存泄漏。</li><li>内存泄漏绝大多数情况都是由堆内存泄漏引起的，所以后续没有特别说明则讨论的都是堆内存泄漏。</li><li>少量的内存泄漏可以容忍，但是如果发生持续的内存泄漏，就像滚雪球雪球越滚越大，不管有多大的内存迟早会被消耗完，最终导致的结果就是内存溢出（OOM:Out Of Memory）。但是产生内存溢出并不是只有内存泄漏这一种原因。</li></ul><p><strong>常见场景</strong></p><ol><li>大型的 Java 后端应用中，在处理用户的请求之后，没有及时将用户的数据删除。随着用户请求数量越来越多，内存泄漏的对象占满堆内存最终导致内存溢出。<ul><li>这种产生的内存溢出会直接导致用户请求无法处理，影响用户的正常使用。重启可以恢复应用使用，但是在运行一段时间之后依然会出现内存溢出。</li></ul></li><li>第二种常见场景是分布式任务调度系统如 Elastic-job、Quartz 等进行任务调度时，被调度的 Java 应用在调度任务结束中出现内存泄漏，最终导致多次调度之后内存溢出。<ul><li>这种产生的内存溢出会导致应用执行下次的调度任务执行。同样重启可以恢复应用使用，但是在调度执行一 段时间之后依然会出现内存溢出。</li></ul></li></ol><p><strong>解决内存溢出的步骤总共分为四个步骤，其中前两个步骤是最核心的：</strong></p><ol><li>发现问题：通过监控工具尽可能早地发现内存慢慢变大的现象。<ul><li>Top 命令、VisualVM、Arthas、Prometheus+Grafana、堆内存状况的对比</li></ul></li><li><h2 id="诊断原因：通过分析工具，诊断问题的产生原因，定位到出现问题的源代码。"><a href="#诊断原因：通过分析工具，诊断问题的产生原因，定位到出现问题的源代码。" class="headerlink" title="诊断原因：通过分析工具，诊断问题的产生原因，定位到出现问题的源代码。"></a>诊断原因：通过分析工具，诊断问题的产生原因，定位到出现问题的源代码。</h2></li><li>修复问题：修复源代码中的问题。</li><li>测试验证：在测试环境验证问题解决。</li></ol><h3 id="7-2、监控-Java-内存的常用工具"><a href="#7-2、监控-Java-内存的常用工具" class="headerlink" title="7.2、监控 Java 内存的常用工具"></a>7.2、监控 Java 内存的常用工具</h3><p><strong>Top 命令</strong></p><ul><li>top 命令是 linux 下用来查看系统信息的命令，它提供给我们去实时地去查看系统的资源，比如执行时的进程、线程和系统参数等信息。</li><li>进程使用的内存为 RES（常驻内存）- SHR（共享内存）</li></ul><p><strong>VisualVM</strong></p><ul><li>VisualVM 是多功能合一的 Java 故障排除工具并且他是一款可视化工具，整合了 命令行 JDK 工具和轻量级分析功能，功能非常强大。</li><li>这款软件在 Oracle JDK 6~8 中发布，但是在 Oracle JDK 9 之后不在 JDK 安装目录下需要单独下载。</li><li>下载地址：<a href="https://visualvm.github.io/">https://visualvm.github.io/</a></li></ul><p><strong>Arthas</strong></p><ul><li>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、 gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断， 包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升 线上问题排查效率。</li><li>优点：功能强大，不止于监控基 础的信息，还能监控单个方法的执行耗时等细节内容。支持应用的集群管理。</li><li>缺点：部分高级功能使用门槛较高。</li><li>使用步骤：<ol><li>在 SpringBoot 项目中添加 arthas 的依赖(支持 SpringBoot2)，在配置文件中添加 tunnel 服务端的地址，便于 tunnel 去监控所有程序。</li><li>将 tunnel 服务端程序部署在某台服务器上并启动。</li><li>启动 java 程序。</li><li>打开 tunnel 的服务端页面，查看所有的进程列表，并选择进程进行 arthas 的操作。</li></ol></li></ul><p><strong>Prometheus + Grafana</strong></p><ul><li>Prometheus+Grafana 是企业中运维常用的监控方案，其中 Prometheus 用来采集 系统或者应用的相关数据，同时具备告警功能。Grafana 可以将 Prometheus 采集到的数据以可视化的方式进行展示。</li><li>Java 程序员要学会如何读懂 Grafana 展示的 Java 虚拟机相关的参数。</li><li>优点：支持系统级别和应用级别的监控，比如 linux 操作系统、 Redis、MySQL、Java 进程。支持告警并允许自定义告警指标，通过邮件、短信等方式尽早通知相关人员进行处理。</li><li>缺点：环境搭建较为复杂，一般由运维人员完成。</li></ul><p><strong>堆内存状况的对比</strong></p><ul><li>正常情况：<ul><li>处理业务时会出现上下起伏， 业务对象频繁创建内存会升高， 触发 MinorGC 之后内存会降下 来。</li><li>手动执行 FULL GC 之后，内存 大小会骤降，而且每次降完之后的大小是接近的。</li><li>长时间观察内存曲线应该是在一个范围内。</li></ul></li><li>出现内存泄漏：<ul><li>处于持续增长的情况，即使 Minor GC 也不能把大部分对象回收。</li><li>手动 FULL GC 之后的内存量每一 次都在增长。</li><li>长时间观察内存曲线持续增长</li></ul></li></ul><h3 id="7-3、常见场景-解决方案"><a href="#7-3、常见场景-解决方案" class="headerlink" title="7.3、常见场景&amp;解决方案"></a>7.3、常见场景&amp;解决方案</h3><p>产生内存溢出原因：</p><ol><li><p>代码中的内存泄漏</p><ol><li>equals()和 hashCode()：不正确的 equals()和 hashCode()实现导致内存泄漏。</li><li>内部类引用外部类：非静态的内部类和匿名内部类的错误使用导致内存泄漏。</li><li>ThreadLocal 的使用：由于线程池中的线程不被回收导致的 ThreadLocal 内存泄漏。</li><li>String 的 intern 方法：由于 JDK6 中的字符串常量池位于永久代， intern 被大量调用并保存产生的内存泄漏。</li><li>通过静态字段保存对象：大量的数据在静态变量中被引用，但是不再使用，成为了内存泄漏。</li><li>资源没有正常关闭：由于资源没有调用 close 方法正常关闭， 导致的内存溢出。</li></ol></li><li><p>并发请求问题</p><p>并发请求问题指的是用户通过发送请求向 Java 应用获取数据，正常情况下 Java 应用将数据返回之后，这部分数据就 可以在内存中被释放掉。但是由于用户的并发请求量有可能很大，同时处理数据的时间很长，导致大量的数据存在于 内存中，最终超过了内存的上限，导致内存溢出。这类问题的处理思路和内存泄漏类似，首先要定位到对象产生的根源。</p></li></ol><h4 id="7-3-1、equals-hashCode"><a href="#7-3-1、equals-hashCode" class="headerlink" title="7.3.1、equals() &amp; hashCode()"></a>7.3.1、equals() &amp; hashCode()</h4><p>在定义新类时没有重写正确的 equals()和 hashCode()方法。在使用 HashMap 的场景下， 如果使用这个类对象作为 key，HashMap 在判断 key 是否已经存在时会使用这些方法，如 果重写方式不正确，会导致相同的数据被保存多份。</p><p>正常情况：</p><ol><li>以 JDK8 为例，首先调用 hash 方法计算 key 的哈希值，hash 方法中会使用到 key 的 hashcode 方法。根据 hash 方法的结果决定存放的数组中位置。</li><li>如果没有元素，直接放入。如果有元素，先判断 key 是否相等，会用到 equals 方法，如果 key 相等，直接替换 value；key 不相等，走链表或者红黑树查找逻辑，其中也会使用 equals 比对是否相同。</li></ol><p>异常情况：</p><ol><li>hashCode 方法实现不正确，会导致相同 id 的学生对象计算出来的 hash 值不同，可能会被分到不同的槽中。</li><li>equals 方法实现不正确，会导致 key 在比对时，即便学生对象的 id 是相同的，也被认为是不同的 key。</li><li>长时间运行之后 HashMap 中会保存大量相同 id 的学生数据。</li></ol><p>解决方案：</p><ol><li>在定义新实体时，始终重写 equals()和 hashCode()方法。</li><li>重写时一定要确定使用了唯一标识去区分不同的对象，比如用户的 id 等。</li><li>hashmap 使用时尽量使用编号 id 等数据作为 key，不要将整个实体类对象作为 key 存放。</li></ol><h4 id="7-3-2、内部类引用外部类"><a href="#7-3-2、内部类引用外部类" class="headerlink" title="7.3.2、内部类引用外部类"></a>7.3.2、内部类引用外部类</h4><p>问题：</p><ol><li>非静态的内部类默认会持有外部类，尽管代码上不再使用外部类，所以如果有地方引用了这个非静态内部类，会导致外部类也被引用，垃圾回收时无法回收这个外部类。</li><li>匿名内部类对象如果在非静态方法中被创建，会持有调用者对象，垃圾回收时无法回 收调用者。</li></ol><p>解决方案：</p><ol><li>使用内部类的原因是可以直接获取到外部类中的成员变量值，简化开发。如果不想持有外部类对象，应该使用静态内部类。</li><li>使用静态方法，可以避免匿名内部类持有调用者对象。</li></ol><h4 id="7-3-3、ThreadLocal-的使用"><a href="#7-3-3、ThreadLocal-的使用" class="headerlink" title="7.3.3、ThreadLocal 的使用"></a>7.3.3、ThreadLocal 的使用</h4><p>问题： 如果仅仅使用手动创建的线程，就算没有调用 ThreadLocal 的 remove 方法清理数据，也不会 产生内存泄漏。因为当线程被回收时，ThreadLocal 也同样被回收。但是如果使用线程池就不一定。</p><p>解决方案： 线程方法执行完，一定要调用 ThreadLocal 中的 remove 方法清理对象。</p><h4 id="7-3-4、String-的-intern-方法"><a href="#7-3-4、String-的-intern-方法" class="headerlink" title="7.3.4、String 的 intern 方法"></a>7.3.4、String 的 intern 方法</h4><p>问题： JDK6 中字符串常量池位于堆内存中的 Perm Gen 永久代中，如果不同字符串的 intern 方法被 大量调用，字符串常量池会不停的变大超过永久代内存上限之后就会产生内存溢出问题。</p><p>解决方案：</p><ol><li>注意代码中的逻辑，尽量不要将随机生成的字符串加入字符串常量池</li><li>增大永久代空间的大小，根据实际的测试&#x2F;估算结果进行设置-XX:MaxPermSize&#x3D;256M</li></ol><h4 id="7-3-5、通过静态字段保存对象"><a href="#7-3-5、通过静态字段保存对象" class="headerlink" title="7.3.5、通过静态字段保存对象"></a>7.3.5、通过静态字段保存对象</h4><p>问题： 如果大量的数据在静态变量中被长期引用，数据就不会被释放，如果这些数据不再使用，就成为了内存 泄漏。</p><p>解决方案：</p><ol><li>尽量减少将对象长时间的保存在静态变量中，如果不再使用，必须将对象删除（比如在集合中）或 者将静态变量设置为 null。</li><li>使用单例模式时，尽量使用懒加载，而不是立即加载。</li><li>Spring 的 Bean 中不要长期存放大对象，如果是缓存用于提升性能，尽量设置过期时间定期失效。</li></ol><h4 id="7-3-6、资源没有正常关闭"><a href="#7-3-6、资源没有正常关闭" class="headerlink" title="7.3.6、资源没有正常关闭"></a>7.3.6、资源没有正常关闭</h4><p>问题： 连接和流这些资源会占用内存，如果使用完之后没有关闭，这部分内存不一定会出现内存泄漏，但是会导致 close 方法不被执行。</p><p>解决方案：</p><ol><li>为了防止出现这类的资源对象泄漏问题，必须在 finally 块中关闭不再使用的资源。</li><li>从 Java 7 开始，使用 try-with-resources 语法可以用于自动关闭资源。</li></ol><h4 id="7-3-7、并发请求问题"><a href="#7-3-7、并发请求问题" class="headerlink" title="7.3.7、并发请求问题"></a>7.3.7、并发请求问题</h4><p>并发请求问题指的是用户通过发送请求向 Java 应用获取数据，正常情况下 Java 应用将数据返回之后，这部分数据就 可以在内存中被释放掉。但是由于用户的并发请求量有可能很大，同时处理数据的时间很长，导致大量的数据存在于 内存中，最终超过了内存的上限，导致内存溢出。这类问题的处理思路和内存泄漏类似，首先要定位到对象产生的根源。</p><blockquote><p>模拟并发请求</p><ul><li>使用 Apache Jmeter 软件可以进行并发请求测试。</li><li>Apache Jmeter 是一款开源的测试软件，使用 Java 语言编写，最初是为了测试 Web 程序，目前已经发展成支 持数据库、消息队列、邮件协议等不同类型内容的测试工具。</li><li>Apache Jmeter 支持插件扩展，生成多样化的测试结果。</li><li>使用步骤：<ol><li>安装 Jmeter 软件，添加线程组。</li><li>在线程组中增加 Http 请求，添加随机参数。</li><li>在线程组中添加监听器 – 聚合报告，用来展示最终结果。</li><li>启动程序，运行线程组并观察程序是否出现内存溢出。</li></ol></li></ul></blockquote><h3 id="7-4、案例实战"><a href="#7-4、案例实战" class="headerlink" title="7.4、案例实战"></a>7.4、案例实战</h3><h4 id="7-4-1、诊断-–-内存快照"><a href="#7-4-1、诊断-–-内存快照" class="headerlink" title="7.4.1、诊断 – 内存快照"></a>7.4.1、诊断 – 内存快照</h4><p>1、当堆内存溢出时，需要在堆内存溢出时将整个堆内存保存下来，生成内存快照(Heap Profile )文件。</p><p>2、生成内存快照的 Java 虚拟机参数：</p><ul><li>-XX:+HeapDumpOnOutOfMemoryError：发生 OutOfMemoryError 错误时，自动生成 hprof 内存快照文件。</li><li>-XX:HeapDumpPath&#x3D;：指定 hprof 文件的输出路径。</li></ul><p>3、使用 MAT 打开 hprof 文件，并选择内存泄漏检测功能，MAT 会自行根据内存快照中保存的数据分析内存泄漏 的根源。</p><p>MAT 内存泄漏检测的原理 – 支配树</p><p>MAT 提供称为支配树（Dominator Tree）的对象图。支配树展示的是对象实例间的支配关系。在对象引用 图中，所有指向对象 B 的路径都经过对象 A，则认为对象 A 支配对象 B。</p><p>深堆和浅堆：</p><ul><li>支配树中对象本身占用的空间称之为浅堆(Shallow Heap）。</li><li>支配树中对象的子树就是所有被该对象支配的内容，这些内容组成对象的深堆{Retained Heap)，也称为保留集(Retained Set )。深堆的大小表示该对象如果可以被回收，能释放多大的内存空间。</li></ul><blockquote><p>如何在不内存溢出情况下生成堆内存快照？</p><p>-XX:+HeapDumpBeforeFullGC 可以在 FullGC 之前就生成内存快照。</p></blockquote><p>MAT 就是根据支配树，从叶子节点向根节点遍历，如果发现深堆的大小超过整个堆内存的一定比例阈值，就会将其标记成内存泄漏的“嫌疑对象”。</p><blockquote><p>导出运行中系统的内存快照并进行分析</p><p>思路：导出运行中系统的内存快照，比较简单的方式有两种，注意只需要导出标记为存活的对象</p><ol><li>通过 JDK 自带的 jmap 命令导出<ul><li>格式为： jmap -dump:live,format&#x3D;b,file&#x3D;文件路径和文件名 进程 ID</li></ul></li><li>通过 arthas 的 heapdump 命令导出<ul><li>格式为： heapdump –live 文件路径和文件名</li></ul></li></ol></blockquote><p>分析超大堆的内存快照</p><ul><li>在程序员开发用的机器内存范围之内的快照文件，直接使用 MAT 打开分析即可。但是经常会遇到服务器上的程序占用的内存达到 10G 以上，开发机无法正常打开此类内存快照，此时需要下载服务器操作系统对应的 MAT 。</li><li>下载地址：<a href="https://eclipse.dev/mat/downloads.php">https://eclipse.dev/mat/downloads.php</a></li><li>通过 MAT 中的脚本生成分析报告：<ul><li>.&#x2F;ParseHeapDump.sh 快照文件路径<ol><li>org.eclipse.mat.api:suspects</li><li>org.eclipse.mat.api:overview</li><li>org.eclipse.mat.api:top_components</li></ol></li></ul></li></ul><p><strong>⚠️ 注意：</strong>默认 MAT 分析时只使用 1G 的堆内存，如果快照文件超过 1G，需要修改 MAT 目录下的 MemoryAnalyzer.ini 配置文件调整最大堆内存。</p><h4 id="7-4-2、修复问题"><a href="#7-4-2、修复问题" class="headerlink" title="7.4.2、修复问题"></a>7.4.2、修复问题</h4><p>修复内存溢出问题的要具体问题具体分析，问题总共可以分成三类：</p><ul><li><p>代码中的内存泄漏：代码中的内存泄漏在前面的篇章中已经介绍并提供了解决方案。</p></li><li><p>并发引起内存溢出 - <strong>参数不当</strong>：</p><p>由于参数设置不当，比如堆内存设置过小，导致并发量增加之后超过堆内存的上限。</p><p>解决方案：调整参数，下一章中详细介绍</p></li><li><p>并发引起内存溢出 – <strong>设计不当</strong>：</p><p>系统的方案设计不当，比如：</p><ul><li>从数据库获取超大数据量的数据</li><li>线程池设计不当</li><li>生产者-消费者模型，消费者消费性能问题</li></ul><p>解决方案：优化设计方案</p></li></ul><h4 id="7-4-3、分页查询文章接口的内存溢出"><a href="#7-4-3、分页查询文章接口的内存溢出" class="headerlink" title="7.4.3、分页查询文章接口的内存溢出"></a>7.4.3、分页查询文章接口的内存溢出</h4><p>背景：某新闻资讯类项目采用微服务架构，其中有一个文章微服务在业务高峰期出现内存溢出的现象。</p><p>解决思路：</p><ol><li>服务出现 OOM 内存溢出时，生成内存快照。</li><li>使用 MAT 分析内存快照，找到内存溢出的对象。</li><li>尝试在开发环境中重现问题，分析代码中问题产生的原因。</li><li>修改代码。</li><li>测试并验证结果。</li></ol><p>问题根源： 文章微服务中的分页接口没有限制最大单次访问条数，并且单个文章对象占用的内存量较大 ，在业务高峰期并发量较大时这部分从数据库获取到内存之后会占用大量的内存空间。</p><p>解决思路：</p><ol><li>与产品设计人员沟通，限制最大的单次访问条数。</li><li>分页接口如果只是为了展示文章列表，不需要获取文章内容，可以大大减少对象的大小。</li><li>在高峰期对微服务进行限流保护。</li></ol><h4 id="7-4-4、Mybatis-导致的内存溢出"><a href="#7-4-4、Mybatis-导致的内存溢出" class="headerlink" title="7.4.4、Mybatis 导致的内存溢出"></a>7.4.4、Mybatis 导致的内存溢出</h4><p>问题根源： Mybatis 在使用 foreach 进行 sql 拼接时，会在内存中创建对象，如果 foreach 处理的数组或者集合元素个数过多，会占用大量的内存空间。</p><p>解决思路：</p><ol><li>限制参数中最大的 id 个数。</li><li>将 id 缓存到 redis 或者内存缓存中，通过缓存进行校验。</li></ol><h4 id="7-4-5、导出大文件内存溢出"><a href="#7-4-5、导出大文件内存溢出" class="headerlink" title="7.4.5、导出大文件内存溢出"></a>7.4.5、导出大文件内存溢出</h4><p>背景：某管理系统（使用的是 k8s 将管理系统部署到容器中）支持几十万条数据的 excel 文件导出。在运行时如果有几十个人同时进行大数据量的导出，会出现内存溢出。</p><blockquote><p>阿里云的 k8s 整体规划如下：</p><p><img src="/images/jvm-k8s.png" alt="k8s"></p></blockquote><p>问题根源： Excel 文件导出如果使用 POI 的 XSSFWorkbook，在大数据量（几十万）的情况下会占用大量的内存。</p><p>解决思路：</p><ol><li>使用 poi 的 SXSSFWorkbook。</li><li>hutool 提供的 BigExcelWriter 减少内存开销。</li><li>使用 easy excel，对内存进行大量的优化。</li></ol><h4 id="7-4-6、ThreadLocal-使用时占用大量内存"><a href="#7-4-6、ThreadLocal-使用时占用大量内存" class="headerlink" title="7.4.6、ThreadLocal 使用时占用大量内存"></a>7.4.6、ThreadLocal 使用时占用大量内存</h4><p>背景： 某微服务系统在没有任何用户使用时，也占用了大量的内存。导致可以使用的内存大大减少。</p><p>问题根源和解决思路： 很多微服务会选择在拦截器 preHandle 方法中去解析请求头中的数据，并放入一些数据到 ThreadLocal 中方便后续使用。在拦截器的 afterCompletion 方法中，必须要将 ThreadLocal 中的数据清理掉。</p><h4 id="7-4-7、文章内容审核接口的内存问题"><a href="#7-4-7、文章内容审核接口的内存问题" class="headerlink" title="7.4.7、文章内容审核接口的内存问题"></a>7.4.7、文章内容审核接口的内存问题</h4><p>背景： 文章微服务中提供了文章审核接口，会调用阿里云的内容安全接口进行文章中文字和图片的审核，在自测过程中出现内存占用较大的问题。</p><p><img src="/images/jvm-microserviceCluster.png" alt="MicroserviceCluster"></p><ul><li><p>设计 1： 使用 SpringBoot 中的@Async 注解进行异步的审核。</p><p><img src="/images/jvm-mc-async.png" alt="Async"></p><p>存在问题：</p><ol><li>线程池参数设置不当，会导致大量线程的创建或者队列中保存大量的数据。</li><li>任务没有持久化，一旦走线程池的拒绝策略或者服务宕机、服务器掉电等情况很有可能会 丢失任务。</li></ol></li><li><p>设计 2： 使用生产者和消费者模式进行处理，队列数据可以实现持久化到数据库。</p><p><img src="/images/jvm-mc-pcQueue.png" alt="pcQueue"></p><p>存在问题：</p><ol><li>队列参数设置不正确，会保存大量的数据。</li><li>实现复杂，需要自行实现持久化的机制，否则数据会丢失。</li></ol></li><li><p>设计 3： 使用 mq 消息队列进行处理，由 mq 来保存文章的数据。发送消息的服务和拉取消息的服务可 以是同一个，也可以不是同一个。</p><p><img src="/images/jvm-mc-mq.png" alt="mq"></p><p>问题根源和解决思路：</p><ol><li>在项目中如果要使用异步进行业务处理，或者实现生产者 – 消费者的模型，如果在 Java 代码 中实现，会占用大量的内存去保存中间数据。</li><li>尽量使用 Mq 消息队列，可以很好地将中间数据单独进行保存，不会占用 Java 的内存。同时也 可以将生产者和消费者拆分成不同的微服务。</li></ol></li></ul><h4 id="7-4-8、诊断和解决问题-–-两种方案"><a href="#7-4-8、诊断和解决问题-–-两种方案" class="headerlink" title="7.4.8、诊断和解决问题 – 两种方案"></a>7.4.8、诊断和解决问题 – 两种方案</h4><ol><li>生成内存快照并分析<ul><li>优点： 通过完整的内存快照准确地判断出问 题产生的原因。</li><li>缺点：<ul><li>内存较大时，生成内存快照较慢，这个过程中会影响用户的使用。</li><li>通过 MAT 分析内存快照，至少要准备 1.5 – 2 倍大小的内存空间。</li></ul></li></ul></li><li>在线定位问题<ul><li>优点： 无需生成内存快照，整个过程对用户的影响较小。</li><li>缺点：<ul><li>无法查看到详细的内存信息。</li><li>需要通过 arthas 或者 btrace 工具调测 发现问题产生的原因，需要具备一定的经验。</li></ul></li><li>在线定位问题 – 步骤<ol><li>使用 jmap -histo:live 进程 ID &gt; 文件名 命令将内存中存活对象以直方图的形式保存到文件中，这个过程会影响用户的时间，但是时间比较短暂。</li><li>分析内存占用最多的对象，一般这些对象就是造成内存泄漏的原因。</li><li>使用 arthas 的 stack 命令，追踪对象创建的方法被调用的调用路径，找到对象创建的根源。也可以使用 btrace 工具编写脚本追踪方法执行的过程。</li></ol></li><li>在线定位问题 – btrace<ul><li>BTrace 是一个在 Java 平台上执行的追踪工具，可以有效地用于线上运行系统的方法追踪，具有侵入性小、对性 能的影响微乎其微等特点。</li><li>项目中可以使用 btrace 工具，打印出方法被调用的栈信息。</li><li>使用方法：<ol><li>下载 btrace 工具， 官方地址：<a href="https://github.com/btraceio/btrace/releases/latest">https://github.com/btraceio/btrace/releases/latest</a></li><li>编写 btrace 脚本，通常是一个 java 文件。</li><li>将 btrace 工具和脚本上传到服务器，在服务器上运行 btrace 进程 ID 脚本文件名 。</li><li>观察执行结果。</li></ol></li></ul></li></ul></li></ol><h4 id="7-8-9、总结"><a href="#7-8-9、总结" class="headerlink" title="7.8.9、总结"></a>7.8.9、总结</h4><p>1、什么是内存溢出，什么是内存泄漏？</p><ul><li>内存泄漏（memory leak）：在 Java 中如果不再使用一个对象，但是该对象依然在 GC ROOT 的引用链上，这个对象就不会被垃圾回收器回收，这种情况就称为内存泄漏。</li><li>内存溢出指的是内存的使用量超过 Java 虚拟机可以分配的上限，最终产生内存溢出 OutOfMemory 的错误。</li></ul><p>2、内存溢出有哪几种产生的原因？</p><ul><li>持续的内存泄漏：内存泄漏持续发生，不可被回收同时不再使用的内存越来越多，就像滚雪球雪球越滚越大，最终内存被消耗完无法分配更多的内存取使用，导致内存 溢出。</li><li>并发请求问题：用户通过发送请求向 Java 应用获取数据，正常情况下 Java 应用将 数据返回之后，这部分数据就可以在内存中被释放掉。但是由于用户的并发请求量有 可能很大，同时处理数据的时间很长，导致大量的数据存在于内存中，最终超过了内 存的上限，导致内存溢出。</li></ul><p>3、解决内存泄漏问题的方法是什么？</p><ol><li>发现问题：通过监控工具尽可能尽早地发现内存慢慢变大的现象。</li><li>诊断原因：通过分析内存快照或者在线分析方法调用过程，诊断问题产生的根源， 定位到出现问题的源代码。</li><li>修复源代码中的问题：如代码 bug、技术方案不合理、业务设计不合理等等。</li><li>在测试环境验证问题是否已经解决，最后发布上线。</li></ol><h2 id="8、GC-调优"><a href="#8、GC-调优" class="headerlink" title="8、GC 调优"></a>8、GC 调优</h2><p>GC 调优指的是对垃圾回收（Garbage Collection）进行调优。GC 调优的主要目标是避免由垃圾回收引起程 序性能下降。</p><p>GC 调优的核心分成三部分：</p><ol><li>通用 Jvm 参数的设置。</li><li>特定垃圾回收器的 Jvm 参数的设置。</li><li>解决由频繁的 FULLGC 引起的程序性能问题。</li></ol><p>GC 调优没有没有唯一的标准答案，如何调优与硬件、程序本身、使用情况均有关系，重点学习调优的工具和方法。</p><h3 id="8-1、GC-调优的核心指标"><a href="#8-1、GC-调优的核心指标" class="headerlink" title="8.1、GC 调优的核心指标"></a>8.1、GC 调优的核心指标</h3><p>判断 GC 是否需要调优，需要从三方面来考虑，与 GC 算法的评判标准类似：</p><ol><li><p>吞吐量(Throughput)：吞吐量分为业务吞吐量和垃圾回收吞吐量</p><ol><li><p>业务吞吐量指的在一段时间内，程序需要完成的业务数量。</p><p>比如企业中对于吞吐量的要求可能会是这样的：</p><ul><li>支持用户每天生成 10000 笔订单</li><li>在晚上 8 点到 10 点，支持用户查询 50000 条商品信息</li></ul></li><li><p>垃圾回收吞吐量指的是 CPU 用于执行用户代码的时间与 CPU 总执行时间的比值。</p><ul><li><p>即吞吐量 &#x3D; 执行用户代 码时间 &#x2F;（执行用户代码时间 + GC 时间）。</p></li><li><p>吞吐量数值越高，垃圾回收的效率就越高，允许更多的 CPU 时 间去处理用户的业务，相应的业务吞吐量也就越高。</p></li></ul></li></ol></li><li><p>延迟（Latency）指的是从用户发起一个请求到收到响应这其中经历的时间。</p><p>比如企业中对于延迟的要求可能会是这样的：所有的请求必须在 5 秒内返回给用户结果</p><ul><li>延迟 &#x3D; GC 延迟 + 业务执行时间，所以如果 GC 时间过长，会影响到用户的使用。</li></ul></li><li><p>内存使用量指的是 Java 应用占用系统内存的最大值，一般通过 Jvm 参数调整，在满足上述两个指标的前提下，这个值越小越好。</p></li></ol><p>保证高吞吐量的常规手段有两条：</p><ol><li>优化业务执行性能，减少单次业务的执行时间。</li><li>优化垃圾回收吞吐量</li></ol><h3 id="8-2、GC-调优"><a href="#8-2、GC-调优" class="headerlink" title="8.2、GC 调优"></a>8.2、GC 调优</h3><p>GC 调优的步骤总共分为四个步骤：</p><ol><li>发现问题：通过监控工具尽可能早地发现 GC 时间过长、频率过高的现象。</li><li>诊断问题：通过分析工具，诊断问题的产生原因。</li><li>修复问题：调整 JVM 参数或者修复源代码中的问题。</li><li>测试验证：在测试环境运行之后获取 GC 数据，验证问题是否解决。</li></ol><h4 id="8-2-1、发现问题"><a href="#8-2-1、发现问题" class="headerlink" title="8.2.1、发现问题"></a>8.2.1、发现问题</h4><p><strong>1、jstat 工具</strong></p><ul><li><p>Jstat 工具是 JDK 自带的一款监控工具，可以提供各种垃圾回收、类加载、编译信息 等不同的数据。</p></li><li><p>使用方法为：jstat -gc 进程 ID 每次统计的间隔（毫秒） 统计次数</p><blockquote><ul><li>C 代表 Capacity 容量，U 代表 Used 使用量</li><li>S – 幸存者区，E – 伊甸园区，O – 老年代，M – 元空间</li><li>YGC、YGT：年轻代 GC 次数和 GC 耗时（单位：秒）</li><li>FGC、FGCT：Full GC 次数和 Full GC 耗时</li><li>GCT：GC 总耗时</li></ul></blockquote></li><li><p>优点：操作简单、无额外的软件安装</p></li><li><p>缺点：无法精确到 GC 产生的时间，只能 用于判断 GC 是否存在问题</p></li></ul><p><strong>2、visualvm 插件</strong></p><ul><li>VisualVm 中提供了一款 Visual Tool 插件，实时监控 Java 进程的堆内存结构、 堆内存变化趋势以及垃圾回收时间的变化趋势。同时还可以监控对象晋升的直方图。</li><li>优点：适合开发使用，能直观的 看到堆内存和 GC 的变化趋势。</li><li>缺点：对程序运行性能有一定影响、生产环境程序员一般没有权限进行操作。</li></ul><p><strong>3、Prometheus+Grafana</strong></p><ul><li>Prometheus+Grafana 是企业中运维常用的监控方案，其中 Prometheus 用来采集 系统或者应用的相关数据，同时具备告警功能。Grafana 可以将 Prometheus 采集 到的数据以可视化的方式进行展示。</li><li>Java 程序员要学会如何读懂 Grafana 展示的 Java 虚拟机相关的参数。</li><li>优点：<ul><li>支持系统级别和应用级别的监 控，比如 linux 操作系统、 Redis、MySQL、Java 进程。</li><li>支持告警并允许自定义告警指 标，通过邮件、短信等方式尽 早通知相关人员进行处理</li></ul></li><li>缺点：环境搭建较为复杂，一般由运维 人员完成</li></ul><p><strong>4、GC 日志</strong></p><ul><li>通过 GC 日志，可以更好的看到垃圾回收细节上的数据，同时也可以根据每款垃圾回收器的不同特点更好地发 现存在的问题。</li><li>使用方法（JDK 8 及以下）：-XX:+PrintGCDetails -Xloggc:文件名</li><li>使用方法（JDK 9+）：-Xlog:gc*:file&#x3D;文件名</li></ul><p><strong>5、GC Viewer</strong></p><ul><li>GCViewer 是一个将 GC 日志转换成可视化图表的小工具</li><li>github 地址： <a href="https://github.com/chewiebug/GCViewer">https://github.com/chewiebug/GCViewer</a></li><li>使用方法：java -jar gcviewer_1.3.4.jar 日志文件.log</li></ul><p><strong>6、GCeasy</strong></p><ul><li>GCeasy 是业界首款使用 AI 机器学习技术在线进行 GC 分析和诊断的工具。定位内存泄漏、GC 延迟高的问题，提供 JVM 参数优化建议，支持在线的可视化工具图表展示。</li><li>官方网站：<a href="https://gceasy.io/">https://gceasy.io/</a></li></ul><p><strong>常见的 GC 模式</strong></p><ol><li>正常情况<ul><li>特点：呈现锯齿状，对象创建之后内存上升，一旦发生垃圾回收之后下降到底部，并且每次下降之后的内存大小 接近，存留的对象较少。</li></ul></li><li>缓存对象过多<ul><li>特点：呈现锯齿状，对象创建之后内存上升，一旦发生垃圾回收之后下降到底部，并且每次下降之后的内存大小 接近，处于比较高的位置。</li><li>问题产生原因： 程序中保存了大量的缓存对象，导致 GC 之后无法释放，可以使用 MAT 或者 HeapHero 等工具进行 分析内存占用的原因。</li></ul></li><li>内存泄漏<ul><li>特点：呈现锯齿状，每次垃圾回收之后下降到的内存位置越来越高，最后由于垃圾回收无法释放空间导致对象无 法分配产生 OutOfMemory 的错误。</li><li>问题产生原因： 程序中保存了大量的内存泄漏对象，导致 GC 之后无法释放，可以使用 MAT 或者 HeapHero 等工具 进行分析是哪些对象产生了内存泄漏。</li></ul></li><li>持续的 FullGC<ul><li>特点：在某个时间点产生多次 Full GC，CPU 使用率同时飙高，用户请求基本无法处理。一段时间之后恢复正常。</li><li>问题产生原因： 在该时间范围请求量激增，程序开始生成更多对象，同时垃圾收集无法跟上对象创建速率，导致持续地在进行 FULL GC。</li></ul></li><li>元空间不足导致的 FULLGC<ul><li>特点：堆内存的大小并不是特别大，但是持续发生 FULLGC。</li><li>问题产生原因： 元空间大小不足，导致持续 FULLGC 回收元空间的数据。</li></ul></li></ol><h4 id="8-2-2、诊断-解决"><a href="#8-2-2、诊断-解决" class="headerlink" title="8.2.2、诊断&amp;解决"></a>8.2.2、诊断&amp;解决</h4><p>解决 GC 问题的手段中，前三种是比较推荐的手段，第四种仅在前三种无法解决时选用：</p><ol><li>优化基础 JVM 参数：基础 JVM 参数的设置不当，会导致频繁 FULLGC 的产生。</li><li>减少对象产生：大多数场景下的 FULLGC 是由于对象产生速度过快导致的， 减少对象产生可以有效的缓解 FULLGC 的发生。</li><li>更换垃圾回收器：选择适合当前业务场景的垃圾回收器，减少延迟、提高吞吐量。</li><li>优化垃圾回收器参数：优化垃圾回收器的参数， 能在一定程度上提升 GC 效率</li></ol><h5 id="1、优化基础-JVM-参数"><a href="#1、优化基础-JVM-参数" class="headerlink" title="1、优化基础 JVM 参数"></a>1、优化基础 JVM 参数</h5><p><strong>1、参数 1： -Xmx 和 –Xms</strong></p><ul><li><p>-Xmx 参数设置的是最大堆内存，但是由于程序是运行在服务器或者容器上，计算可用内存时，要将元空间、操作系统、 其它软件占用的内存排除掉。</p><blockquote><p>案例： 服务器内存 4G，操作系统+元空间最大值+其它软件占用 1.5G，-Xmx 可以设置为 2g。</p></blockquote></li><li><p>最合理的设置方式应该是根据最大并发量估算服务器的配置，然后再根据服务器配置计算最大堆内存的值。</p></li><li><p>-Xms 用来设置初始堆大小，建议将-Xms 设置的和-Xmx 一样大，有以下几点好处：</p><ul><li>运行时性能更好：堆的扩容是需要向操作系统申请内存的，这样会导致程序性能短期下降。</li><li>可用性问题：如果在扩容时其他程序正在使用大量内存，很容易因为操作系统内存不足分配失败。</li><li>启动速度更快：Oracle 官方文档的原话：如果初始堆太小，Java 应用程序启动会变得很慢，因为 JVM 被迫频 繁执行垃圾收集，直到堆增长到更合理的大小。为了获得最佳启动性能，请将初始堆大小设置为与最大堆大小相同。</li></ul></li></ul><p><strong>2、参数 2： -XX:MaxMetaspaceSize 和 –XX:MetaspaceSize</strong></p><ul><li>-XX:MaxMetaspaceSize&#x3D;值：参数指的是最大元空间大小，默认值比较大，如果出现元空间内存泄漏会让操作系 统可用内存不可控，建议根据测试情况设置最大值，一般设置为 256m</li><li>-XX:MetaspaceSize&#x3D;值：参数指的是到达这个值之后会触发 FULLGC， 后续什么时候再触发 JVM 会自行计算。如果设置为和 MaxMetaspaceSize 一样大，就不会 FULLGC，但是对象也无法 回收。</li></ul><p><strong>3、参数 3：-Xss 虚拟机栈大小</strong></p><ul><li>如果我们不指定栈的大小，JVM 将创建一个具有默认大小的栈。大小取决于操作系统和计算机的体系结构。</li><li>比如 Linux x86 64 位：1MB，如果不需要用到这么大的栈内存，完全可以将此值调小节省内存空间，合理值为 256k – 1m 之间。</li><li>使用：-Xss256k</li></ul><p><strong>4、参数 4： 不建议手动设置的参数</strong></p><ul><li><p>由于 JVM 底层设计极为复杂，一个参数的调整也许让某个接口得益，但同样有可能影响其他更多接口。</p></li><li><p>-Xmn 年轻代的大小，默认值为整个堆的 1&#x2F;3，可以根据峰值流量计算最大的年轻代大小，尽量让对象只存放在年 轻代，不进入老年代。但是实际的场景中，接口的响应时间、创建对象的大小、程序内部还会有一些定时任务等不确定因素都会导致这个值的大小并不能仅凭计算得出，如果设置该值要进行大量的测试。</p><blockquote><p>G1 垃圾回收器尽量不要设置该值，G1 会动态调整年轻代的大小。</p></blockquote></li><li><p>‐XX:SurvivorRatio 伊甸园区和幸存者区的大小比例，默认值为 8。</p></li><li><p>‐XX:MaxTenuringThreshold 最大晋升阈值，年龄大于此值之后，会进入老年代。另外 JVM 有动态年龄判断机制：将年龄从小到大的对象占据的空间加起来，如果大于 survivor 区域的 50%，然后把等于或大于该年龄的对象， 放入到老年代。</p></li></ul><p><strong>5、其他参数</strong></p><ul><li><p>-XX:+DisableExplicitGC</p><p>禁止在代码中使用 System.gc()， System.gc()可能会引起 FULLGC，在代码中尽量不要使用。使用 DisableExplicitGC 参数可以禁止使用 System.gc()方法调用。</p></li><li><p>-XX:+HeapDumpOnOutOfMemoryError：发生 OutOfMemoryError 错误时，自动生成 hprof 内存快照文件。</p><p>-XX:HeapDumpPath&#x3D;：指定 hprof 文件的输出路径。</p></li><li><p>打印 GC 日志</p><ul><li>JDK8 及之前 ： -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:文件路径</li><li>JDK9 及之后 ： -Xlog:gc*:file&#x3D;文件路径</li></ul></li></ul><p><strong>JVM 参数模板</strong></p><ul><li>-Xms1g</li><li>-Xmx1g</li><li>-Xss256k</li><li>-XX:MaxMetaspaceSize&#x3D;512m</li><li>-XX:+DisableExplicitGC</li><li>-XX:+HeapDumpOnOutOfMemoryError</li><li>-XX:HeapDumpPath&#x3D;&#x2F;opt&#x2F;logs&#x2F;my-service.hprof</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintGCDateStamps</li><li>-Xloggc:文件路径</li></ul><p>注意： JDK9 及之后 gc 日志输出修改为 -Xlog:gc*:file&#x3D;文件名 堆内存大小和栈内存大小根据实际情况灵活调整。</p><h5 id="2、更换垃圾回收器"><a href="#2、更换垃圾回收器" class="headerlink" title="2、更换垃圾回收器"></a>2、更换垃圾回收器</h5><ol><li>编写 Jmeter 脚本对程序进行压测，同时添加 RT 响应时间、每秒钟的事务数等指标进行监控。</li><li>选择不同的垃圾回收器进行测试，并发量分别设置 50、100、200，观察 数据的变化情况。</li><li>JDK8 下 ParNew + CMS 组合 ： -XX:+UseParNewGC -XX:+UseConcMarkSweepGC<ul><li>默认组合：PS + PO</li><li>JDK8 使用 g1 : -XX:+UseG1GC</li><li>JDK11 默认 g1</li></ul></li></ol><h5 id="3、优化垃圾回收器的参数"><a href="#3、优化垃圾回收器的参数" class="headerlink" title="3、优化垃圾回收器的参数"></a>3、优化垃圾回收器的参数</h5><ul><li><p>CMS 的并发模式失败（concurrent mode failure）现象。由于 CMS 的垃圾清理线程和用户线程是并行进行的，如 果在并发清理的过程中老年代的空间不足以容纳放入老年代的对象，会产生并发模式失败。</p></li><li><p>并发模式失败会导致 Java 虚拟机使用 Serial Old 单线程进行 FULLGC 回收老年代，出现长时间的停顿。</p></li><li><p>解决方案：</p><ol><li><p>减少对象的产生以及对象的晋升。</p></li><li><p>增加堆内存大小</p></li><li><p>优化垃圾回收器的参数，比如-XX:CMSInitiatingOccupancyFraction&#x3D;值，当老年代大小到达该阈值时，会 自动进行 CMS 垃圾回收，通过控制这个参数提前进行老年代的垃圾回收，减少其大小。</p></li><li><p>JDK8 中默认这个参数值为 -1，根据其他几个参数计算出阈值：</p><p>​ <code>((100 - MinHeapFreeRatio) + (double)(CMSTriggerRatio * MinHeapFreeRatio) / 100.0)</code></p></li></ol></li></ul><blockquote><p>⚠️ 该参数设置完是不会生效的，必须开启-XX:+UseCMSInitiatingOccupancyOnly 参数。</p></blockquote><h3 id="8-3、实战案例-–-内存调优-GC-调优"><a href="#8-3、实战案例-–-内存调优-GC-调优" class="headerlink" title="8.3、实战案例 – 内存调优 + GC 调优"></a>8.3、实战案例 – 内存调优 + GC 调优</h3><ul><li>背景： 某程序在高峰期经常会出现接口调用时间特别长的现象，如何优化程序的性能？</li><li>思路：<ol><li>生成 GC 报告，通过 Gceasy 工具进行分析，判断是否存在 GC 问题或者内存问题。</li><li>存在内存问题，通过 jmap 或者 arthas 将堆内存快照保存下来。</li><li>通过 MAT 或者在线的 heaphero 工具分析内存问题的原因。</li><li>修复问题，并发布上线进行测试。</li></ol></li></ul><p>1、问题 1： 发生了连续的 FULL GC,堆内存 1g 如果没有请求的情况下，内存大小在 200-300mb 之间。</p><ul><li>分析： 没有请求的情况下，内存大小并没有处于很低的情况，满足缓存对象过多的情况，怀疑内存种 缓存了很多数据。需要将堆内存快照保存下来进行分析。</li></ul><p>2、问题 2： 堆内存快照保存到本地之后，使用 MAT 打开，发现只有几十兆的内存。</p><ul><li>分析： 有大量的对象不在 GC Root 引用链上，可以被回收，使用 MAT 查看这些对象。</li></ul><p>3、问题 3： 由于这些对象已经不在引用链上，无法通过支配树等手段分析创建的位置。</p><ul><li>分析： 在不可达对象列表中，除了发现大量的 byte[]还发现了大量的线程，可以考虑跟踪线程的栈信息 来判断对象在哪里创建。<ul><li>问题产生原因：在定时任务中通过线程创建了大量的对象，导致堆内存一直处于比较高的位置。</li><li>解决方案： 暂时先将这段代码注释掉，测试效果，由于这个服务本身的内存压力比较大，将这段定时任务移动到别的服务中。</li></ul></li></ul><p>4、问题 4： 修复之后内存基本上处于 100m 左右，但是当请求发生时，依然有频繁 FULL GC 的发生。</p><ul><li>分析： 请求产生的内存大小比当前最大堆内存大，尝试选择配置更高的服务器，将-Xmx 和-Xms 参数 调大一些。</li></ul><p><strong>案例总结：</strong></p><ol><li>压力比较大的服务中，尽量不要存放大量的缓存或者定时任务，会影响到服务的内存使用。</li><li>内存分析发现有大量线程创建时，可以使用导出线程栈来查看线程的运行情况。</li><li>如果请求确实创建了大量的内存超过了内存上限，只能考虑减少请求时创建的对象，或者使 用更大的内存。</li><li>推荐使用 g1 垃圾回收器，并且使用较新的 JDK 可以获得更好的性能。</li></ol><h2 id="9、性能调优"><a href="#9、性能调优" class="headerlink" title="9、性能调优"></a>9、性能调优</h2><p>性能优化的步骤总共分为四个步骤，其中修复部分要具体问题具体分析且处理方式各不相同。</p><ol><li>发现问题：通过监控、测试工具发现性能问题。</li><li>诊断问题：通过分析工具，定位到某一部分代码存在性能问题。</li><li>修复问题：内存调优、GC 调优、业务代码优化、SQL 优化等等。</li><li>测试验证：在测试环境运行之后验证问题是否解决。</li></ol><h3 id="9-1、性能调优解决的问题"><a href="#9-1、性能调优解决的问题" class="headerlink" title="9.1、性能调优解决的问题"></a>9.1、性能调优解决的问题</h3><p>应用程序在运行过程中经常会出现性能问题，比较常见的性能问题现象是：</p><ol><li>通过 top 命令查看 CPU 占用率高，接近 100 甚至多核 CPU 下超过 100 都是有可能的。</li><li>请求单个服务处理时间特别长，多服务使用 skywalking 等监控系统来判断是哪一个环节性能低下。</li><li>程序启动之后运行正常，但是在运行一段时间之后无法处理任何的请求（内存和 GC 正常）。</li></ol><h3 id="9-2、性能调优的方法"><a href="#9-2、性能调优的方法" class="headerlink" title="9.2、性能调优的方法"></a>9.2、性能调优的方法</h3><h4 id="9-2-1、线程转储的查看方式"><a href="#9-2-1、线程转储的查看方式" class="headerlink" title="9.2.1、线程转储的查看方式"></a>9.2.1、线程转储的查看方式</h4><p>线程转储（Thread Dump）提供了对所有运行中的线程当前状态的快照。线程转储可以通过 jstack、visualvm 等工 具获取。其中包含了线程名、优先级、线程 ID、线程状态、线程栈信息等等内容，可以用来解决 CPU 占用率高、死 锁等问题。</p><p>线程转储（Thread Dump）中的几个核心内容：</p><ul><li>名称： 线程名称，通过给线程设置合适的名称更容易“见名知意”</li><li>优先级（prio）：线程的优先级</li><li>Java ID（tid）：JVM 中线程的唯一 ID</li><li>本地 ID (nid)：操作系统分配给线程的唯一 ID</li><li>状态：线程的状态，分为：<ul><li>NEW – 新创建的线程，尚未开始执行</li><li>RUNNABLE –正在运行或准备执行</li><li>BLOCKED – 等待获取监视器锁以进入或重新进入同步块&#x2F;方法</li><li>WAITING – 等待其他线程执行特定操作，没有时间限制</li><li>TIMED_WAITING – 等待其他线程在指定时间内执行特定操作</li><li>TERMINATED – 已完成执行</li></ul></li><li>栈追踪： 显示整个方法的栈帧信息</li></ul><p>线程转储的可视化在线分析平台：</p><ul><li><a href="https://jstack.review/">https://jstack.review/</a></li><li><a href="https://fastthread.io/">https://fastthread.io/</a></li></ul><h4 id="9-2-2、案例"><a href="#9-2-2、案例" class="headerlink" title="9.2.2、案例"></a>9.2.2、案例</h4><p><strong>1、CPU 占用率高问题的解决方案</strong></p><p>问题： 监控人员通过 prometheus 的告警发现 CPU 占用率一直处于很高的情况，通过 top 命令看到是由 于 Java 程序引起的，希望能快速定位到是哪一部分代码导致了性能问题。</p><p>解决思路：</p><ol><li>通过 top –c 命令找到 CPU 占用率高的进程，获取它的进程 ID。</li><li>使用 top -p 进程 ID 单独监控某个进程，按 H 可以查看到所有的线程以及线程对应 的 CPU 使用率，找到 CPU 使用率特别高的线程。</li><li>使用 jstack 进程 ID 命令可以查看到所有线程正在执行的栈信息。使用 jstack 进 程 ID &gt; 文件名 保存到文件中方便查看。</li><li>找到 nid 线程 ID 相同的栈信息，需要将之前记录下的十进制线程号转换成 16 进制 。通过 printf ‘%x\n’ 线程 ID 命令直接获得 16 进制下的线程 ID。</li><li>找到栈信息对应的源代码，并分析问题产生原因。</li></ol><p><strong>2、接口响应时间很长的问题</strong></p><p>问题： 在程序运行过程中，发现有几个接口的响应时间特别长，需要快速定位到是哪一个方法的代码 执行过程中出现了性能问题。</p><p>Arthas 的 trace 命令 使用 arthas 的 trace 命令，可以展示出整个方法的调用路径以及每一个方法的执行耗时。</p><p>命令： trace 类名 方法名</p><ul><li>添加 –skipJDKMethod false 参数可以输出 JDK 核心包中的方法及耗时。</li><li>添加 ‘#cost &gt; 毫秒值’ 参数，只会显示耗时超过该毫秒值的调用。</li><li>添加 –n 数值 参数，最多显示该数值条数的数据。</li><li>所有监控都结束之后，输入 stop 结束监控，重置 arthas 增强的对象。</li></ul><p>在使用 trace 定位到性能较低的方法之后，使用 watch 命令监控该方法，可以获得更为详细的方法信息。</p><p>命令： watch 类名 方法名 ‘{params, returnObj}’ ‘#cost&gt;毫秒值’ -x 2</p><ul><li>‘{params, returnObj}‘ 代表打印参数和返回值。</li><li>-x 代表打印的结果中如果有嵌套（比如对象里有属性），最多只展开 2 层。允许设置的最大值为 4。</li></ul><p>总结：</p><ol><li>通过 arthas 的 trace 命令，首先找到性能较差的具体方法，如果访问量比较大，建议设置最 小的耗时，精确的找到耗时比较高的调用。</li><li>通过 watch 命令，查看此调用的参数和返回值，重点是参数，这样就可以在开发环境或者测 试环境模拟类似的现象，通过 debug 找到具体的问题根源。</li><li>使用 stop 命令将所有增强的对象恢复。</li></ol><p><strong>3、定位偏底层的性能问题</strong></p><p>问题： 有一个接口中使用了 for 循环向 ArrayList 中添加数据，但是最终发现执行时间比较长，需要定位 是由于什么原因导致的性能低下。</p><p>Arthas 的 profile 命令</p><p>使用 arthas 的 profile 命令，生成性能监控的火焰图。</p><ol><li>命令 1： profiler start 开始监控方法执行性能。</li><li>命令 2： profiler stop –format html 以 HTML 的方式生成火焰图 火焰图中一般找绿色部分 Java 中栈顶上比较平的部分，很可能就是性能的瓶颈。</li></ol><p>总结：</p><ul><li>偏底层的性能问题，特别是由于 JDK 中某些方法被大量调用导致的性能低下，可以使用火焰图 非常直观的找到原因。</li><li>该案例中是由于创建 ArrayList 时没有手动指定容量，导致使用默认的容量而在添加对象过程 中发生了多次的扩容，扩容需要将原来数组中的元素复制到新的数组中，消耗了大量的时间。 通过火焰图可以看到大量的调用，修复完之后节省了 20% ~ 50%的时间。</li></ul><p><strong>4、线程被耗尽问题</strong></p><p>问题： 程序在启动运行一段时间之后，就无法接受任何请求了。将程序重启之后继续运行，依然会出 现相同的情况。</p><p>解决思路： 线程耗尽问题，一般是由于执行时间过长，分析方法分成两步：</p><ol><li>检测是否有死锁产生，无法自动解除的死锁会将线程永远阻塞。</li><li>如果没有死锁，再使用案例 1 的打印线程栈的方法检测线程正在执行哪个方法，一般这些大 量出现的方法就是慢方法。</li></ol><p>解决方案： 线程死锁可以通过三种方法定位问题</p><ol><li><p>jstack -l 进程 ID &gt; 文件名 将线程栈保存到本地。 在文件中搜索 deadlock 即可找到死锁位置。</p></li><li><p>开发环境中使用 visual vm 或者 Jconsole 工具，都可以检测出死锁。使用线程快照生成工具 就可以看到死锁的根源。生产环境的服务一般不会允许使用这两种工具连接。</p></li><li><p>使用 fastthread 自动检测线程问题。 <a href="https://fastthread.io/">https://fastthread.io/</a></p><p>Fastthread 和 Gceasy 类似，是一款在线的 AI 自动线程问题检测工具，可以提供线程分析报告。 通过报告查看是否存在死锁问题。</p></li></ol><p>JIT 对程序性能的影响：Java 程序在运行过程中，JIT 即时编译器会实时对代码进行性能优化，所以仅凭少量的测试是无法真实反应运行系统最终给用户提供的性能。</p><p>正确地测试代码性能：OpenJDK 中提供了一款叫 JMH（Java Microbenchmark Harness）的工具，可以准确地对 Java 代码进行基准测试，量化方法的执行性能。JMH 会首先执行预热过程，确保 JIT 对代码进行优化之后再进行真正的迭代测试，最后输出测试的结果。</p><blockquote><p>官网地址：<a href="https://github.com/openjdk/jmh">https://github.com/openjdk/jmh</a></p></blockquote><p>JMH 环境搭建：</p><ul><li><p>创建基准测试项目，在 CMD 窗口中，使用以下命令创建 JMH 环境项目：</p></li><li><p>$ mvn archetype:generate \</p><p>-DinteractiveMode&#x3D;false \</p><p>-DarchetypeGroupId&#x3D;org.openjdk.jmh \</p><p>-DarchetypeArtifactId&#x3D;jmh-java-benchmark-archetype \</p><p>-DgroupId&#x3D;org.sample \</p><p>-DartifactId&#x3D;test \</p><p>-Dversion&#x3D;1.0</p></li><li><p>修改 POM 文件中的 JDK 版本号和 JMH 版本号，JMH 最新版本号参考 Github。</p></li><li><p>编写测试方法，几个需要注意的点：</p><ul><li>死代码问题</li><li>黑洞的用法</li></ul></li><li><p>通过 maven 的 verify 命令，检测代码问题并打包成 jar 包。通过 java -jar target&#x2F;benchmarks.jar 命令执行基准测试。</p></li><li><p>测试结果通过<a href="https://jmh.morethan.io/%E7%94%9F%E6%88%90%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82">https://jmh.morethan.io/生成可视化的结果。</a></p></li></ul><p><strong>5、日期格式化方法性能测试</strong></p><p>问题： 在 JDK8 中，可以使用 Date 进行日期的格式化，也可以使用 LocalDateTime 进行格式 化，使用 JMH 对比这两种格式化的性能。</p><p>解决思路：</p><ol><li>搭建 JMH 测试环境。</li><li>编写 JMH 测试代码。</li><li>进行测试。</li><li>比对测试结果。</li></ol><p>总结：</p><ol><li>Date 对象使用的 SimpleDateFormatter 是线程不安全的，所以每次需要重新创建对象或者将对象放入 ThreadLocal 中进行保存。其中每次重新创建对象性能比较差，将对象放入 ThreadLocal 之后性能相对还是比较好的。</li><li>LocalDateTime 对象使用的 DateTimeFormatter 线程安全，并且性能较好，如果能将 DateTimeFormatter 对象保存下来，性能可以得到进一步的提升。</li></ol><h3 id="9-3、实战"><a href="#9-3、实战" class="headerlink" title="9.3、实战"></a>9.3、实战</h3><p>问题： 某项目中有一个获取用户信息的接口性能比较差，如何在该接口代码中进行彻底的优化，提升性能。</p><p>解决思路：</p><ol><li>使用 trace 分析性能瓶颈。</li><li>优化代码，反复使用 trace 测试性能提升的情况。</li><li>使用 JMH 在 SpringBoot 环境中进行测试。</li><li>比对测试结果。</li></ol><p>总结：</p><ol><li>本案例中性能问题产生的原因是两层 for 循环导致的循环次数过多，处理时间在循 环次数变大的情况下变得非常长，考虑将一层循环拆出去，创建 HashMap 用来查询提升性能。</li><li>使用 LocalDateTime 替代 SimpleDateFormat 进行日期的格式化。</li><li>使用 stream 流改造代码，这一步可能会导致性能下降，主要是为了第四次优化准备。</li><li>使用并行流利用多核 CPU 的优势并行执行提升性能。</li></ol><h3 id="9-4、总结"><a href="#9-4、总结" class="headerlink" title="9.4、总结"></a>9.4、总结</h3><ol><li>问题 1：CPU 占用率高的问题<ul><li>解决方案：通过 top 命令找到进程和线程 -&gt; 使用 jstack 打印线程快照 -&gt; 找到线 程快照正在执行的方法 ，并优化性能。</li></ul></li><li>问题 2：接口响应时间特别长<ul><li>解决方案 1：通过 arthas 的 trace 和 watch 命令，监控方法的执行耗时和参数、返回 值等信息，定位性能瓶颈，并优化性能。 解决方案 2：通过 arthas 的 profile 火焰图功能，找到火焰图中顶部较平的方法，一 般就是性能问题产生的根源，并优化性能。</li></ul></li><li>问题 3：线程不可用问题<ul><li>解决方案：通过 jstack 、visualvm 、fastthread.io 等工具，找到线程死锁的 原因，解决死锁问题。</li></ul></li></ol><h2 id="10、GraalVM"><a href="#10、GraalVM" class="headerlink" title="10、GraalVM"></a>10、GraalVM</h2><ol><li>GraalVM 是 Oracle 官方推出的一款高性能 JDK，使用它享受比 OpenJDK 或者 OracleJDK 更好的性能。</li><li>GraalVM 的官方网址：<a href="https://www.graalvm.org/">https://www.graalvm.org/</a></li><li>官方标语：Build faster, smaller, leaner applications。<ul><li>更低的 CPU、内存使用率</li><li>更快的启动速度，无需预热即可获得最好的性能</li><li>更好的安全性、更小的可执行文件</li><li>支持多种框架 Spring Boot、Micronaut、Helidon 和 Quarkus。</li><li>多家云平台支持。</li><li>通过 Truffle 框架运行 JS、Python、Ruby 等其他语言。</li></ul></li></ol><p><strong>GraalVM 社区版环境搭建</strong></p><p>需求：搭建 Linux 下的 GraalVM 社区版本环境。</p><p>步骤：</p><ol><li>使用 arch 查看 Linux 架构。</li><li>根据架构下载社区版的 GraalVM：<a href="https://www.graalvm.org/downloads/">https://www.graalvm.org/downloads/</a></li><li>安装 GraalVM，安装方式与安装 JDK 相同。</li><li>使用 java -version 和 HelloWorld 测试 GraalVM。</li></ol><h3 id="10-1、GraalVM-的运行模式"><a href="#10-1、GraalVM-的运行模式" class="headerlink" title="10.1、GraalVM 的运行模式"></a>10.1、GraalVM 的运行模式</h3><p><strong>JIT(Just-In-Time)模式 ，即时编译模式</strong></p><p>JIT 模式的处理方式与 Oracle JDK 类似，满足两个特点：</p><ul><li>Write Once,Run Anywhere -&gt; 一次编写，到处运行。</li><li>预热之后，通过内置的 Graal 即时编译器优化热点代码，生成比 Hotspot JIT 更高性能的机器码。</li></ul><blockquote><p>GraalVM 性能测试</p><p>需求：分别在 JDK8 、 JDK21 、 GraalVM 21 Graal 即时编译器、GraalVM 21 不开启 Graal 即时编译器运行 Jmh 性能测试用例，对比其性能。</p><p>步骤：</p><ol><li><p>在代码文件夹中找到 GraalVM 的案例代码，将 java-simple-streambenchmark 文件夹下的代码使用 maven 打包成 jar 包。</p></li><li><p>将 jar 包上传到服务器，使用不同的 JDK 进行测试，对比结果。</p><p>注意： -XX:-UseJVMCICompiler 参数可以关闭 GraalVM 中的 Graal 编译器。</p></li></ol></blockquote><p><strong>AOT(Ahead-Of-Time)模式，提前编译模式</strong></p><p>AOT 编译器通过源代码，为特定平台创建可执行文件</p><p>比如，在 Windows 下编译完成之后，会生成 exe 文件。通过这种方式，达到启动之后获得最高性能的目的。但是不具备跨平台特性，不同平台使用需要单独编译。</p><p>该模式生成的文件称之为 Native Image 本地镜像。</p><blockquote><p>GraalVM AOT 模式</p><p>需求： 使用 GraalVM AOT 模式制作本地镜像并运行。</p><p>步骤：</p><ol><li><p>安装 Linux 环境本地镜像制作需要的依赖库：</p><p><a href="https://www.graalvm.org/latest/reference-manual/nativeimage/#prerequisites">https://www.graalvm.org/latest/reference-manual/nativeimage/#prerequisites</a></p></li><li><p>使用 native-image 类名 制作本地镜像。</p></li><li><p>运行本地镜像可执行文件。</p></li></ol></blockquote><h3 id="10-2、应用场景"><a href="#10-2、应用场景" class="headerlink" title="10.2、应用场景"></a>10.2、应用场景</h3><p><strong>GraalVM 存在的问题</strong></p><p>GraalVM 的 AOT 模式虽然在启动速度、内存和 CPU 开销上非常有优势，但是使用该技术会带来几个问题：</p><ol><li>跨平台问题，在不同平台下运行需要编译多次。编译平台的依赖库等环境要与运行平台保持一致。</li><li>使用框架之后，编译本地镜像的时间比较长，同时也需要消耗大量的 CPU 和内存。</li><li>AOT 编译器在编译时，需要知道运行时所有可访问的所有类。但是 Java 中有一些技术可以在运行时创建类， 例如反射、动态代理等。这些技术在很多框架比如 Spring 中大量使用，所以框架需要对 AOT 编译器进行适配解 决类似的问题。</li></ol><p>解决方案：</p><ol><li>使用公有云的 Docker 等容器化平台进行在线编译，确保编译环境和运行环境是一致的，同时解决编译资源问题。</li><li>使用 SpringBoot3 等整合 GraalVM AOT 模式的框架版本。</li></ol><blockquote><p>实战案例 1：使用 SpringBoot3 搭建 GraalVM 环境</p><p>需求： SpringBoot3 对 GraalVM 进行了完整的适配，所以编写 GraalVM 服务推荐使用 SpringBoot3。</p><p>步骤：</p><ol><li>使用 <a href="https://start.spring.io/">https://start.spring.io/</a> spring 提供的在线生成器构建项目。</li><li>编写业务代码。</li><li>执行 mvn -Pnative clean native:compile 命令生成本地镜像。</li><li>运行本地镜像。</li></ol></blockquote><p><strong>什么场景下需要使用 GraalVM 呢？</strong></p><ol><li>对性能要求比较高的场景，可以选择使用收费的企业版提升性能。</li><li>公有云的部分服务是按照 CPU 和内存使用量进行计费的，使用 GraalVM 可以 有效地降低费用。</li></ol><p><strong>GraalVM 企业级应用 - Serverless 架构</strong></p><p>传统的系统架构中，服务器等基础设施的运维、安全、高可用等工作都需要企业自行完成，存在两个主要问题：</p><ol><li>开销大，包括了人力的开销、机房建设的开销。</li><li>资源浪费，面对一些突发的流量冲击，比如秒杀等活动，必须提前规划好容量准备好大量的服务器，这些服 务器在其他时候会处于闲置的状态，造成大量的浪费。</li></ol><p>随着虚拟化技术、云原生技术的愈发成熟，云服务商提供一套称为 Serverless 无服务器化的架构。企业无需进行服务器的任何配置和部署，完全由云服务商提供。比较典型的有亚马逊 AWS、阿里云等。</p><p><strong>函数计算</strong></p><p>Serverless 架构中第一种常见的服务是函数计算（Function as a Service），将一个应用拆分成多个函数， 每个函数会以事件驱动的方式触发。典型代表有 AWS 的 Lambda、阿里云的 FC。</p><p>函数计算主要应用场景有如下几种：</p><ol><li>小程序、API 服务中的接口，此类接口的调用频率不高，使用常规的服务器架构容易产生资源浪费，使用 Serverless 就可以实现按需付费降低成本，同时支持自动伸缩能应对流量的突发情况。</li><li>大规模任务的处理，比如音视频文件转码、审核等，可以利用事件机制当文件上传之后，自动触发对应的任 务。</li></ol><p>函数计算的计费标准中包含 CPU 和内存使用量，所以使用 GraalVM AOT 模式编译出来的本地镜像可以节省更多的成本。</p><blockquote><p>实战案例 2：将程序部署到阿里云函数计算</p><p>步骤：</p><ol><li>在项目中编写 Dockerfile 文件。</li><li>使用服务器制作镜像，这一步会消耗大量的 CPU 和内存资源，同时 GraalVM 相关的镜像服务器在 国外，建议使用阿里云的镜像服务器制作 Docker 镜像。</li><li>使用函数计算将 Docker 镜像转换成函数服务。</li><li>绑定域名并进行测试。</li></ol></blockquote><p>函数计算的服务资源比较受限，比如 AWS 的 Lambda 服务一般无法支持超过 15 分钟的函数执行，所以云服务商提供另外一套方案：基于容器的 Serverless 应用，无需手动配置 K8s 中的 Pod、Service 等内容，只需选择镜 像就可自动生成应用服务。</p><p>Serverless 应用的计费标准中包含 CPU 和内存使用量，所以使用 GraalVM AOT 模式编译出来的本地镜像可以节省更多的成本。</p><blockquote><p>实战案例 3：将程序部署到阿里云 Serverless 应用</p><p>步骤：</p><ol><li>在项目中编写 Dockerfile 文件。</li><li>使用服务器制作镜像，这一步会消耗大量的 CPU 和内存资源，同时 GraalVM 相关的镜像服务器在 国外，建议使用阿里云的镜像服务器制作 Docker 镜像。</li><li>配置 Serverless 应用，选择容器镜像、CPU 和内存。</li><li>绑定外网负载均衡并使用 Postman 进行测试。</li></ol></blockquote><h3 id="10-3、GraalVM-的内存参数"><a href="#10-3、GraalVM-的内存参数" class="headerlink" title="10.3、GraalVM 的内存参数"></a>10.3、GraalVM 的内存参数</h3><p>由于 GraalVM 是一款独立的 JDK，所以大部分 HotSpot 中的虚拟机参数都不适用。常用的参数参考：<a href="https://www.graalvm.org/22.3/reference-manual/native-image/optimizations-and-performance/MemoryManagement/">官方手册</a></p><ul><li>社区版只能使用串行垃圾回收器（Serial GC），使用串行垃圾回收器的默认最大 Java 堆大小会设置为物 理内存大小的 80%，调整方式为使用 -Xmx 最大堆大小。如果希望在编译期就指定该大小，可以在编译时添 加参数-R:MaxHeapSize&#x3D;最大堆大小。</li><li>G1 垃圾回收器只能在企业版中使用，开启方式为添加–gc&#x3D;G1 参数，有效降低垃圾回收的延迟。</li><li>另外提供一个 Epsilon GC，开启方式：–gc&#x3D;epsilon ，它不会产生任何的垃圾回收行为所以没有额外 的内存、CPU 开销。如果在公有云上运行的程序生命周期短暂不产生大量的对象，可以使用该垃圾回收器， 以节省最大的资源。</li></ul><p>-XX:+PrintGC -XX:+VerboseGC 参数打印垃圾回收详细信息。</p><blockquote><p>实战案例 4：内存快照文件的获取、</p><p>需求： 获得运行中的内存快照文件，使用 MAT 进行分析。</p><p>步骤：</p><ol><li>编译程序时，添加 –enable-monitoring&#x3D;heapdump，参数添加到 pom 文件的对应插件中。</li><li>运行中使用 kill -SIGUSR1 进程 ID 命令，创建内存快照文件。</li><li>使用 MAT 分析内存快照文件。</li></ol><p>实战案例 5：运行时数据的获取</p><p>JDK Flight Recorder (JFR) 是一个内置于 JVM 中的工具，可以收集正在运行中的 Java 应用程序的 诊断和分析数据，比如线程、异常等内容。GraalVM 本地镜像也支持使用 JFR 生成运行时数据，导出 的数据可以使用 VisualVM 分析。</p><p>步骤：</p><ol><li>编译程序时，添加 –enable-monitoring&#x3D;jfr，参数添加到 pom 文件的对应插件中。</li><li>运行程序，添加 -XX:StartFlightRecording&#x3D;filename&#x3D;recording.jfr,duration&#x3D;10s 参数。</li><li>使用 VisualVM 分析 JFR 记录文件。</li></ol></blockquote><h2 id="11、新一代的-GC"><a href="#11、新一代的-GC" class="headerlink" title="11、新一代的 GC"></a>11、新一代的 GC</h2><h3 id="11-1、Shenandoah"><a href="#11-1、Shenandoah" class="headerlink" title="11.1、Shenandoah"></a>11.1、Shenandoah</h3><p>Shenandoah 是由 Red Hat 开发的一款低延迟的垃圾收集器，Shenandoah 并发执行大部分 GC 工作，包括并 发的整理，堆大小对 STW 的时间基本没有影响。</p><p><strong>使用方法：</strong></p><ol><li><p>下载：Shenandoah 只包含在 OpenJDK 中，默认不包含在内需要单独构建，可以直接下载构建好的。 下载地址：<a href="https://builds.shipilev.net/openjdk-jdk-shenandoah/">https://builds.shipilev.net/openjdk-jdk-shenandoah/</a></p><p>选择方式如下：</p><ul><li>{aarch64, arm32-hflt, mipsel, mips64el, ppc64le, s390x, x86_32, x86_64}：架构，使用 arch 命令选择对应的的架构</li><li>{server,zero}：虚拟机类型，选择 server，包含所有 GC 的功能</li><li>{release, fastdebug, Slowdebug, optimization}：不同的优化级别，选择 release，性能最高。</li><li>{gcc*-glibc*, msvc*}：编译器的版本，选择较高的版本性能好一些，如果兼容性有问题（无法启动）， 选择较低的版本。</li></ul></li><li><p>、配置：将 OpenJDK 配置到环境变量中，使用 java –version 进行测试。</p></li><li><p>添加参数，运行 Java 程序。</p><p>-XX:+UseShenandoahGC 开启 Shenandoah GC</p><p>-Xlog:gc 打印 GC 日志</p></li></ol><h3 id="11-2、ZGC"><a href="#11-2、ZGC" class="headerlink" title="11.2、ZGC"></a>11.2、ZGC</h3><p>ZGC 是一种可扩展的低延迟垃圾回收器。ZGC 在垃圾回收过程中，STW 的时间不会超过一毫秒，适合需要低延迟的应用。支持几百兆到 16TB 的堆大小，堆大小对 STW 的时间基本没有影响。</p><p>ZGC 降低停顿时间，能降低接口的最大耗时，提升用户体验。但是吞吐量不佳，所以如果 Java 服务比较关注 QPS（每秒的查询次数）那么 G1 是比较不错的选择。</p><p><strong>使用方法：</strong></p><p>OracleJDK 和 OpenJDK 中都支持 ZGC，阿里的 DragonWell 龙井 JDK 也支持 ZGC 但属于其自行对 OpenJDK 11 的 ZGC 进行优化的版本。 建议使用 JDK17 之后的版本，延迟较低同时无需手动配置并行线程数。</p><ul><li>分代 ZGC 添加如下参数启用 -XX:+UseZGC -XX:+ZGenerational</li><li>非分代 ZGC 通过命令行选项启用 -XX:+UseZGC</li></ul><p><strong>参数设置</strong></p><p>ZGC 在设计上做到了自适应，根据运行情况自动调整参数，让用户手动配置的参数最少化。</p><ul><li>自动设置年轻代大小，无需设置-Xmn 参数。</li><li>自动晋升阈值（复制中存活多少次才搬运到老年代），无需设置-XX:TenuringThreshold。</li><li>JDK17 之后支持自动的并行线程数，无需设置-XX:ConcGCThreads。</li></ul><ol><li><p>需要设置的参数：</p><p>-Xmx 值 最大堆内存大小</p><ul><li>这是 ZGC 最重要的一个参数，必须设置。ZGC 在运行过程中会使用一部分内存用来处理垃圾回收，所以尽量保 证堆中有足够的空间。设置多少值取决于对象分配的速度，根据测试情况来决定。</li></ul></li><li><p>可以设置的参数：</p><p>-XX:SoftMaxHeapSize&#x3D;值</p><ul><li><p>ZGC 会尽量保证堆内存小于该值，这样在内存靠近这个值时会尽早地进行垃圾回收，但是依然有可能会超过该值。</p><p>例如，-Xmx5g -XX:SoftMaxHeapSize&#x3D;4g 这个参数设置，ZGC 会尽量保证堆内存小于 4GB，最多不会超过 5GB。</p></li></ul></li></ol><p><strong>调优</strong></p><p>ZGC 中可以使用 Linux 的 Huge Page 大页技术优化性能，提升吞吐量、降低延迟。</p><p>注意：安装过程需要 root 权限，所以 ZGC 默认没有开启此功能。</p><p>操作步骤：</p><ol><li><p>计算所需页数，Linux x86 架构中大页大小为 2MB，根据所需堆内存的大小估算大页数量。</p><p>比如堆空间需要 16G，预留 2G（JVM 需要额外的一些非堆空间），那么页数就是 18G &#x2F; 2MB &#x3D; 9216。</p></li><li><p>配置系统的大页池以具有所需的页数（需要 root 权限）：</p><p>$ echo 9216 &gt; &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;hugepages&#x2F;hugepages-2048kB&#x2F;nr_hugepages</p></li><li><p>添加参数-XX:+UseLargePages 启动程序进行测试</p></li></ol><h3 id="11-3、实战案例"><a href="#11-3、实战案例" class="headerlink" title="11.3、实战案例"></a>11.3、实战案例</h3><p>实战案例：内存不足时的垃圾回收测试</p><p>需求： Java 服务中存在大量软引用的缓存导致内存不足，测试下 g1、Shenandoah、ZGC 这三种垃圾回收 器在这种场景下的回收情况</p><p>步骤：</p><ol><li>启动程序，添加不同的虚拟机参数进行测试。</li><li>使用 Apache Benchmark 测试工具对本机进行压测。</li><li>生成 GC 日志，使用 GcEasy 进行分析。</li><li>对比压测之后的结果。</li></ol><h3 id="11-4、总结"><a href="#11-4、总结" class="headerlink" title="11.4、总结"></a>11.4、总结</h3><p>ZGC 和 Shenandoah 设计的目标都是追求较短的停顿时间，他们具体的使用场景如下：</p><p>两种垃圾回收器在并行回收时都会使用垃圾回收线程占用 CPU 资源</p><ol><li>在内存足够的情况下，ZGC 垃圾回收表现的效果会更好，停顿时间更短。</li><li>在内存不是特别充足的情况下， Shenandoah GC 表现更好，并行垃圾回收的时 间较短，用户请求的执行效率比较高。</li></ol><h2 id="12、Java-工具"><a href="#12、Java-工具" class="headerlink" title="12、Java 工具"></a>12、Java 工具</h2><p>常见的 Java 工具有以下几类：</p><ol><li>诊断类工具，如 Arthas、VisualVM 等。</li><li>开发类工具，如 Idea、Eclipse。</li><li>APM 应用性能监测工具，如 Skywalking、Zipkin 等。</li><li>热部署工具，如 Jrebel 等。</li></ol><h3 id="12-1、Java-Agent-技术"><a href="#12-1、Java-Agent-技术" class="headerlink" title="12.1、Java Agent 技术"></a>12.1、Java Agent 技术</h3><p>Java Agent 技术是 JDK 提供的用来编写 Java 工具的技术，使用这种技术生成一种特殊的 jar 包，这种 jar 包可以让 Java 程序 运行其中的代码。</p><p>Java Agent 技术实现让 Java 程序执行独立的 Java Agent 程序中的代码，执行方式有两种：</p><ul><li>静态加载模式</li><li>动态加载模式</li></ul><p><strong>静态加载模式</strong></p><p>静态加载模式可以在程序启动的一开始就执行我们需要执行的代码，适合用 APM 等性能监测系统从一开始就监控程序的执行性能。静态加载模式需要在 Java Agent 的项目中编写一个 premain 的方法，并打包成 jar 包。</p><ul><li>public static void premain(String agentArgs, Instrumentation inst)</li></ul><p>然后使用以下命令启动 Java 程序，此时 Java 虚拟机将会加载 agent 中的代码并执行。</p><ul><li>java -javaagent:.&#x2F;agent.jar -jar test.jar</li></ul><blockquote><p>premain 方法会在主线程中执行</p></blockquote><p><strong>动态加载模式</strong></p><p>动态加载模式可以随时让 java agent 代码执行，适用于 Arthas 等诊断系统。动态加载模式需要在 Java Agent 的项目中编 写一个 agentmain 的方法，并打包成 jar 包。</p><ul><li>public static void agentmain(String agentArgs, Instrumentation inst)</li></ul><p>然后使用以下代码就可以让 java agent 代码在指定的 java 进程中执行</p><ul><li>VirtualMachine vm &#x3D; VirtualMachine.attach(“24200”); &#x2F;&#x2F; 动态连接到 24200 进程 ID 的 Java 程序</li><li>vm.loadAgent(“goes-jvm-java-agent-with-dependicies.jar”); &#x2F;&#x2F; 加载 JavaAgent</li></ul><blockquote><p>agentmain 方法会在独立线程中执行</p></blockquote><p>搭建 Java agent 静态加载模式的环境</p><p>步骤：</p><ol><li>创建 maven 项目，添加 maven-assembly-plugin 插件，此插件可以打包出 java agent 的 jar 包。</li><li>编写类和 premain 方法，premain 方法中打印一行信息。</li><li>编写 MANIFEST.MF 文件，此文件主要用于描述 java agent 的配置属性，比如使用哪一个类的 premain 方法。</li><li>使用 maven-assembly-plugin 进行打包。</li><li>创建 spring boot 应用，并静态加载上一步打包完的 java agent。</li></ol><p>搭建 java agent 动态加载模式的环境</p><p>步骤：</p><ol><li>创建 maven 项目，添加 maven-assembly-plugin 插件，此插件可以打包出 java agent 的 jar 包。</li><li>编写类和 agentmain 方法， agentmain 方法中打印一行信息。</li><li>编写 MANIFEST.MF 文件，此文件主要用于描述 java agent 的配置属性，比如使用哪一个类的 agentmain 方法。</li><li>使用 maven-assembly-plugin 进行打包。</li><li>编写 main 方法，动态连接到运行中的 java 程序。</li></ol><h3 id="12-2、实战案例-1：简化版的-Arthas"><a href="#12-2、实战案例-1：简化版的-Arthas" class="headerlink" title="12.2、实战案例 1：简化版的 Arthas"></a>12.2、实战案例 1：简化版的 Arthas</h3><p><strong>需求：</strong> 编写一个简化版的 Arthas 程序，具备以下几个功能：</p><ol><li>查看内存使用情况</li><li>生成堆内存快照</li><li>打印栈信息</li><li>打印类加载器</li><li>打印类的源码</li><li>打印方法执行的参数和耗时</li></ol><p>该程序是一个独立的 Jar 包，可以应用于任何 Java 编写的系统中。 具备以下特点：代码无侵入性、操作简单、性能高</p><p><strong>获取运行时信息 - JMX 技术</strong></p><p>JDK 从 1.5 开始提供了 Java Management Extensions (JMX) 技术，通过 Mbean 对象的写入和获取，实现：</p><ul><li>运行时配置的获取和更改</li><li>应用程序运行信息的获取（线程栈、内存、类信息等）</li></ul><p><strong>获取 JVM 默认提供的 Mbean</strong></p><p>可以通过如下的方式，例如获取内存信息：</p><ul><li>ManagementFactory.getMemoryPoolMXBeans()</li></ul><p><strong>获取更多信息：</strong></p><ul><li><p>ManagementFactory.getPlatformMXBeans</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取到了Java虚拟机中分配的直接内存和内存映射缓冲区的大小。</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">bufferPoolMXBeanClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.management.BufferPoolMXBean&quot;</span>);<br>List&lt;bufferPoolMXBean&gt; BufferPoolMXBeans  = ManagementFactory.getPlatformMXBeans(bufferPoolMXBeanClass);<br><br><span class="hljs-comment">// 获取到虚拟机诊断用的MXBean，通过这个Bean对象可以生成内存快照。</span><br><span class="hljs-type">HotSpotDiagnosticMXBean</span> <span class="hljs-variable">hotSpotDiagnot</span> <span class="hljs-operator">=</span> ManagementFactory.getPlatformMXBeans(HotSpotDiagnosticMXBean);<br></code></pre></td></tr></table></figure></li></ul><p><strong>获取类和类加载器的信息–Instumentation 对象</strong></p><p>Java Agent 中可以获得 Java 虚拟机提供的 Instumentation 对象：</p><ul><li>public static void premain(String agentArgs, Instrumentation inst)</li><li>public static void agentmain(String agentArgs, Instrumentation inst)</li></ul><p>该对象有以下几个作用：</p><ol><li>redefine，重新设置类的字节码信息。</li><li>retransform，根据现有类的字节码信息进行增强。</li><li>获取所有已加载的类信息。</li></ol><blockquote><p>Oracle 官方手册：<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html">https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html</a></p></blockquote><p><strong>打印类的源码</strong></p><p>打印类的源码需要分为以下几个步骤</p><ol><li>获得内存中的类的字节码信息。利用 Instrumentation 提供的转换器来获取字节码信息。</li><li>通过反编译工具将字节码信息还原成源代码信息。</li></ol><p>使用 jd-core 依赖库来完成，github 地址：<a href="https://github.com/java-decompiler/jd-core">https://github.com/java-decompiler/jd-core</a></p><p><strong>打印方法执行的参数和耗时</strong></p><p>打印方法执行的参数和耗时需要对原始类的方法进行增强，可以使用类似于 Spring AOP 这类面向切面编程的方式， 但是考虑到并非每个项目都使用了 Spring 这些框架，所以我们选择的是最基础的字节码增强框架。字节码增强框架 是在当前类的字节码信息中插入一部分字节码指令，从而起到增强的作用。</p><p><strong>ASM</strong></p><p>ASM 是一个通用的 Java 字节码操作和分析框架。它可用于直接以二进制形式修改现有类或动态生成类。ASM 重点关注性能。让操作尽可能小且尽可能快，所以它非常适合在动态系统中使用。ASM 的缺点是代码复杂。</p><blockquote><p>ASM 的官方网址：<a href="https://asm.ow2.io/">https://asm.ow2.io/</a></p><p>操作步骤：</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.ow2.com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>asm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>搭建基础框架，此代码为固定代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassWriter</span> <span class="hljs-variable">cw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(<span class="hljs-number">0</span>);<br><span class="hljs-type">classVisitor</span> <span class="hljs-variable">cv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">classVisitor</span>(ASM7, cw) &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MethodVisitor <span class="hljs-title function_">visitMethod</span><span class="hljs-params">(<span class="hljs-type">int</span> access, String name, String descriptor, String signature, String[] exceptions)</span> &#123;<br>        <span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">mv</span>  <span class="hljs-operator">=</span> cv.visitMethod(access, name, descriptor, signature, exceptions);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMethodVisitor</span>(<span class="hljs-built_in">this</span>.api, mv);<br>    &#125;<br>&#125;;<br><span class="hljs-type">ClassReader</span> <span class="hljs-variable">cr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassReader</span>(bytes);<br>cr.accept(cr, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p>编写一个类描述如何去增强类，类需要继承自 MethodVisitor</p></li></ol></blockquote><p><strong>Byte Buddy</strong></p><p>Byte Buddy 是一个代码生成和操作库，用于在 Java 应用程序运行时创建和修改 Java 类，而无需编译器的帮助。 Byte Buddy 底层基于 ASM，提供了非常方便的 API。</p><blockquote><p>Byte Buddy 官网： <a href="https://bytebuddy.net/">https://bytebuddy.net/</a></p><p>操作步骤：</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.bytebuddy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>byte-buddy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.14.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.bytebuddy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>byte-buddy-agent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.14.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>搭建基础框架，此代码为固定代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">AgengBuilder</span>.<span class="hljs-keyword">default</span>().disableClassFormatChanges()<br>    .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)<br>    .with(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AgengBuilder</span>.Listener.WithTransFormationsOnly(<br>        AgengBuilder.Listener.StreamWriting.toSystemOut()<br>    )<br>    ).type(ElementMatchers.named(clazz.getName()))<br>    .transform(builder, type, classloader, moudule, protectionDomain) -&gt;<br>    builder.visit(Advice, to(MyAdvice.class).on(ElementMatchers.any())<br>    ).installOn(inst);<br></code></pre></td></tr></table></figure></li><li><p>编写一个 Advice 通知描述如何去增强类</p></li></ol></blockquote><blockquote><p><strong>Application performance monitor（APM）系统</strong></p><p>Application performance monitor (APM) 应用程序性能监控系统是采集运行程序的实时数据并使用可视化的方式展示， 使用 APM 可以确保系统可用性，优化服务性能和响应时间，持续改善用户体验。常用的 APM 系统有 Apache Skywalking、 Zipkin 等。</p><p>Skywalking 官方网站: <a href="https://skywalking.apache.org/">https://skywalking.apache.org/</a></p></blockquote><blockquote><p><strong>Spring AOP 是不是也可以实现类似的功能呢？</strong></p><p>Spring AOP 确实可以实现统计方法执行时间，打印方法参数等功能，但是使用这 种方式存在几个问题：</p><ol><li>代码有侵入性，AOP 代码必须在当前项目中被引入才能完成相应的功能。</li><li>无法做到灵活地开启和关闭功能。</li><li>与 Spring 框架强耦合，如果项目没有使用 Spring 框架就不可以使用。</li></ol></blockquote><h3 id="12-3、实战案例-2：APM-系统的数据采集"><a href="#12-3、实战案例-2：APM-系统的数据采集" class="headerlink" title="12.3、实战案例 2：APM 系统的数据采集"></a>12.3、实战案例 2：APM 系统的数据采集</h3><p><strong>需求：</strong> 编写一个简化版的 APM 数据采集程序，具备以下几个功能：</p><ol><li>无侵入性获取 spring boot 应用中，controller 层方法的调用时间。</li><li>将所有调用时间写入文件中。</li></ol><p><strong>问题：</strong></p><ul><li>Java agent 采用静态加载模式 还是 动态加载模式？</li><li>一般程序启动之后就需要持续地进行信息的采集，所以采用静态加载模式。</li></ul><p><strong>Java Agent 参数的获取</strong></p><p>在 Java Agent 中，可以通过如下的方式传递参数： java -javaagent:.&#x2F;agent.jar&#x3D;参数 -jar test.jar</p><p>然后通过 premain 参数中的 agentArgs 字段获取： public static void premain(String agentArgs, Instrumentation inst){…}</p><p>如果有多个参数，可以使用如下方式： java -javaagent:.&#x2F;agent.jar&#x3D;param1&#x3D;value1,param2&#x3D;value2 -jar test.jar</p><p>在 Java 代码中使用字符串解析出对应的 key value。</p><p><strong>Byte Buddy 参数的传递</strong></p><p>在 Java Agent 中如果需要传递参数到 Byte Buddy，可以采用如下的方式：</p><ol><li>绑定 Key Value，Key 是一个自定义注解，Value 是参数的值。</li><li>自定义注解。</li><li>通过注解注入。</li></ol><p>Arthas 这款工具用到什么 Java 技术？</p><ul><li>Arthas 主要使用 Java Agent 技术，这种技术可以让运行中的 Java 程序执行 Agent 中编写代码。</li><li>Arthas 使用 Agent 中的动态加载模式，可以选择让某个特定的 Java 进程加载 Agent 并执行其中的监控代码。</li><li>监控方面主要使用的就是 JMX 提供的一些监控指标，同时使用字节码增强技术，对某些类和某些方法进行增强，从而监控方法的执行耗时、参数等内容。</li></ul><h2 id="13、栈存储数据的原理"><a href="#13、栈存储数据的原理" class="headerlink" title="13、栈存储数据的原理"></a>13、栈存储数据的原理</h2><p>Java 虚拟机中的基本数据类型</p><p>在 Java 中有 8 大基本数据类型：</p><p><img src="/images/jvm-stack-primaryDataType.png" alt="primaryDataType"></p><blockquote><p>这里的内存占用指的是堆上或者数组中内存分配的空间大小，栈上的实现更加复杂。</p></blockquote><p>Java 中的 8 大数据类型在虚拟机中的实现：</p><p><img src="/images/jvm-stack-primaryDataType-ComeTrue.png" alt="8大数据类型在虚拟机中的实现"></p><h3 id="13-1、boolean、byte、char、short-在栈上是不是存在空间浪费？"><a href="#13-1、boolean、byte、char、short-在栈上是不是存在空间浪费？" class="headerlink" title="13.1、boolean、byte、char、short 在栈上是不是存在空间浪费？"></a>13.1、boolean、byte、char、short 在栈上是不是存在空间浪费？</h3><ul><li>是的，Java 虚拟机采用的是空间换时间方案，在栈上不存储具体的类型，只根据 slot 槽进行数据的处理，浪费了一些内存空间但是避免不同数据类型不同处理方式 带来的时间开销。</li><li>同时，像 long 型在 64 位系统中占用 2 个 slot，使用了 16 字节空间，但实际上在 Hotspot 虚拟机中，它的高 8 个字节没有使用，这样就满足了 long 型使用 8 个字节 的需要。</li></ul><h3 id="13-2、栈中的数据要保存到堆上或者从堆中加载到栈上时怎么处理？"><a href="#13-2、栈中的数据要保存到堆上或者从堆中加载到栈上时怎么处理？" class="headerlink" title="13.2、栈中的数据要保存到堆上或者从堆中加载到栈上时怎么处理？"></a>13.2、栈中的数据要保存到堆上或者从堆中加载到栈上时怎么处理？</h3><ol><li><p>堆中的数据加载到栈上，由于栈上的空间大于或者等于堆上的空间，所以直接处理但是需要注意下符号位。</p><p>byte、short 为有符号，低位复制，高位非负则补 0，负则补 1</p></li><li><p>栈中的数据要保存到堆上，byte、char、short 由于堆上存储空间较小，需要将高位去掉。boolean 比较特殊，只取低位的最后一位保存。</p></li></ol><h2 id="14、堆存储对象的原理"><a href="#14、堆存储对象的原理" class="headerlink" title="14、堆存储对象的原理"></a>14、堆存储对象的原理</h2><p>对象在堆中的内存布局，指的是对象在堆中存放时的各个组成部分，主要分为以下几个部分：</p><p><img src="/images/jvm-objectHeap.png" alt="堆上对象存储"></p><h3 id="14-1、标记字段"><a href="#14-1、标记字段" class="headerlink" title="14.1、标记字段"></a>14.1、标记字段</h3><p>标记字段相对比较复杂。在不同的对象状态（有无锁、是否处于垃圾回收的标记中）下存放的内容是不同的， 同时在 64 位（又分为是否开启指针压缩）、32 位虚拟机中的布局都不同。以 64 位开启指针压缩为例：</p><p><img src="/images/jvm-signalWord.png" alt="标记字段"></p><blockquote><p>JOL 打印内存布局</p><p>JOL 是用于分析 JVM 中对象布局的一款专业工具。工具中使用 Unsafe、JVMTI 和 Serviceability Agent (SA) 等虚拟机技术来打印实际的对象内存布局。</p><p>使用方法：</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groudId</span>&gt;</span>org.openjdk.jol<span class="hljs-tag">&lt;/<span class="hljs-name">groudId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jol-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用如下代码打印对象内存布局：</p><p>System.out.println(ClassLayout.parseInstance(对象).toPrintable());</p></li></ol></blockquote><p>64 位不开启指针压缩，只是将 Cms 使用这部分弃用。</p><p><img src="/images/jvm-signalWord-noCms.png" alt="noCms"></p><p>32 位虚拟机目前使用的场景已经不多，整体结构与 64 位类似：</p><p><img src="/images/jvm-signalWord-32.png" alt="32sw"></p><p>Klass pointer 元数据的指针指向方法区中保存的 InstanceKlass 对象：</p><p><img src="/images/jvm-klassPointer-InstanceKlass.png" alt="KlassPointer"></p><h3 id="14-2、指针压缩"><a href="#14-2、指针压缩" class="headerlink" title="14.2、指针压缩"></a>14.2、指针压缩</h3><p>在 64 位的 Java 虚拟机中，Klass Pointer 以及对象数据中的对象引用都需要占用 8 个字节，为了减少这部分的内存使用量，64 位 Java 虚拟机使用指针压缩技术，将堆中原本 8 个字节的指针压缩成 4 个字节 ，此功能默认开启， 可以使用-XX:-UseCompressedOops 关闭。</p><p><img src="/images/jvm-pointerCompress.png" alt="指针压缩"></p><p>指针压缩的思想是将寻址的单位放大，比如原来按 1 字节去寻址，现在可以按 8 字节寻址。</p><p>将编号当成地址，就可以用更小的内存访问更多的数据。但是这样的做法有两个问题：</p><ol><li>需要进行内存对齐，指的是将对象的内存占用填充至 8 字节的倍数。存在空间浪费（对于 Hotspot 来说不存 在，即便不开启指针压缩，也需要进行内存对齐）</li><li>寻址大小仅仅能支持 2 的 35 次方个字节（32GB，如果超过 32GB 指针压缩会自动关闭）。不用压缩指针，应 该是 2 的 64 次方 &#x3D; 16EB，用了压缩指针就变成了 8（字节） &#x3D; 2 的 3 次方 * 2 的 32 次方 &#x3D; 2 的 35 次方</li></ol><h3 id="14-3、内存对齐"><a href="#14-3、内存对齐" class="headerlink" title="14.3、内存对齐"></a>14.3、内存对齐</h3><p>内存对齐主要目的是为了解决并发情况下 CPU 缓存失效的问题：</p><p><img src="/images/jvm-memoryAlign.png" alt="内存对齐"></p><p>内存对齐之后，同一个缓存行中不会出现不同对象的属性。在并发情况下，如果让 A 对象一个缓存行失效，是不会影响到 B 对象的缓存行的。</p><p>字段重排列</p><ul><li>在 Hotspot 中，要求每个属性的偏移量 Offset（字段地址 – 起始地址）必须是字段长度的 N 倍。</li><li>如果不满足要求，会尝试使用内存对齐，通过在属性之间插入一块对齐区域达到目的。</li></ul><h3 id="14-4、总结"><a href="#14-4、总结" class="headerlink" title="14.4、总结"></a>14.4、总结</h3><p>对象在堆中的内存布局，指的是对象在堆中存放时的各个组成部分，主要分为以下几个部分：</p><p><img src="/images/jvm-heapMemoryStructures.png" alt="堆内存结构"></p><h2 id="15、方法调用的原理"><a href="#15、方法调用的原理" class="headerlink" title="15、方法调用的原理"></a>15、方法调用的原理</h2><p>方法调用的本质是通过字节码指令的执行，能在栈上创建栈帧，并执行调用方法中的字节码执行。</p><p>以 invoke 开头的字节码指令的作用是执行方法的调用。</p><p>在 JVM 中，一共有五个字节码指令可以执行方法调用：</p><ol><li>invokestatic：调用静态方法。</li><li>invokespecial: 调用对象的 private 方法、构造方法，以及使用 super 关键字调用父类实例的方法、构造方法， 以及所实现接口的默认方法。</li><li>invokevirtual：调用对象的非 private 方法。</li><li>invokeinterface：调用接口对象的方法。</li><li>invokedynamic：用于调用动态方法，主要应用于 lambda 表达式中，机制极为复杂了解即可。</li></ol><blockquote><p>Invoke 方法的核心作用就是找到字节码指令并执行。</p></blockquote><p>Invoke 指令执行时，需要找到方法区中 instanceKlass 中保存的方法相关的字节码信息。</p><h3 id="15-1、静态绑定"><a href="#15-1、静态绑定" class="headerlink" title="15.1、静态绑定"></a>15.1、静态绑定</h3><ol><li>编译期间，invoke 指令会携带一个参数符号引用，引用到常量池中的方法定义。方法定义中包含了类名 + 方 法名 + 返回值 + 参数。</li><li>在方法第一次调用时，这些符号引用就会被替换成内存地址的直接引用，这种方式称之为静态绑定。</li></ol><p>静态绑定适用于处理静态方法、私有方法、或者使用 final 修饰的方法，因为这些方法不能被继承之后重写。</p><h3 id="15-2、动态绑定"><a href="#15-2、动态绑定" class="headerlink" title="15.2、动态绑定"></a>15.2、动态绑定</h3><p>对于非 static、非 private、非 final 的方法，有可能存在子类重写方法，那么就需要通过动态绑定来完成方法地址绑定的工 作。比如在这段代码中，调用的其实是 Cat 类对象的 eat 方法，但是编译完之后虚拟机指令中调用的是 Animal 类的 eat 方法， 这就需要在运行过程中通过动态绑定找到 Cat 类的 eat 方法，这样就实现了多态。</p><p>动态绑定是基于方法表来完成的，invokevirtual 使用虚方法表（vtable），invokeinterface 使用接口方法表 (itable)，整体思路类似。所以接下来使用 invokevirtual 和虚方法表来解释整个过程。 每个类中都有一个虚方法表，本质上它是一个数组，记录了方法的地址。子类方法表中包含父类方法表中的所有方法； 子类如果重写了父类方法，则使用自己类中方法的地址进行替换。</p><p>产生 invokevirtual 调用时，先根据对象头中的类型指针找到方法区中 InstanceClass 对象，获得虚方法表。再根据虚方法表 找到对应的对方，获得方法的地址，最后调用方法。</p><h3 id="15-3、总结"><a href="#15-3、总结" class="headerlink" title="15.3、总结"></a>15.3、总结</h3><p>在 JVM 中，一共有五个字节码指令可以执行方法调用：</p><ol><li>invokestatic：调用静态方法。静态绑定</li><li>invokespecial: 调用对象的 private 方法、构造方法，以及使用 super 关键字调用父类实例的方法、构造方法， 以及所实现接口的默认方法。静态绑定 3、invokevirtual：调用对象的非 private 方法。非 final 方法使用动态绑定，使用虚方法表找到方法的地址，子类 会复制父类的虚方法表，如果子类重写了方法，会替换成重写后方法的地址。</li><li>invokeinterface：调用接口对象的方法。动态绑定，使用接口表找到方法的地址，进行调用。</li><li>invokedynamic：用于调用动态方法，主要应用于 lambda 表达式中，机制极为复杂了解即可。</li></ol><blockquote><p>Invoke 方法的核心作用就是找到字节码指令并执行。</p></blockquote><h2 id="16、异常捕获的原理"><a href="#16、异常捕获的原理" class="headerlink" title="16、异常捕获的原理"></a>16、异常捕获的原理</h2><p>在 Java 中，程序遇到异常时会向外抛出，此时可以使用 try-catch 捕获异常的方式将异常捕获并继续让程序按程序员设计好的方式运行。</p><p>比如如下代码：在 try 代码块中如果抛出了 Exception 对象或者子类对象，则会进入 catch 分支。 异常捕获机制的实现，需要借助于编译时生成的异常表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">publiuc <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">try</span>&#123;<br>        num = x / y;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        num = -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>异常表在编译期生成，存放的是代码中异常的处理信息，包含异常捕获的生效范围以及异常发生后跳转到的字节码指令位置。</p><ul><li>起始&#x2F;结束 PC：此条异常捕获生效的字节码起始&#x2F;结束位置。</li><li>跳转 PC：异常捕获之后，跳转到的字节码位置。</li></ul><p>程序运行中触发异常时，Java 虚拟机会从上至下遍历异常表中的所有条目。</p><p>当触发异常的字节码的索引值在某个异常表条目的监控范围内，Java 虚拟机会判断所抛出的异常和该条目想要捕获的异常是否匹配。</p><ol><li>如果匹配，跳转到“跳转 PC”对应的字节码位置。</li><li>如果遍历完都不能匹配，说明异常无法在当前方法执行时被捕获，此方法栈帧直接弹出，在上一层的栈帧中进 行异常捕获的查询。</li></ol><p>多个 catch 分支情况下，异常表会从上往下遍历，先捕获 RuntimeException，如果捕获不了，再捕获 Exception。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">publiuc <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">try</span>&#123;<br>        num = x / y;<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>        num = -<span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        num = -<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>multi-catch 的写法也是一样的处理过程，多个 catch 分支情况下，异常表会从上往下遍历，先捕获 RuntimeException，如果捕获不了，再捕获 IOException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">publiuc <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">try</span>&#123;<br>        num = x / y;<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException | IOException e) &#123;<br>        num = -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>finally 的处理方式就相对比较复杂一点，分为以下几个步骤：</p><ol><li>finally 中的字节码指令会插入到 try 和 catch 代码块中,保证在 try 和 catch 执行之后一定会执行 finally 中的代码。</li><li>如果抛出的异常范围超过了 Exception，比如 Error 或者 Throwable，此时也要执行 finally，所以异常表中增加了两 个条目。覆盖了 try 和 catch 两段字节码指令的范围，any 代表可以捕获所有种类的异常。在最后需要将异常继续向外抛出。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">publiuc <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">try</span>&#123;<br>        num = x / y;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        num = -<span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        num = -<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17、JIT-即时编译器原理"><a href="#17、JIT-即时编译器原理" class="headerlink" title="17、JIT 即时编译器原理"></a>17、JIT 即时编译器原理</h2><p>在 Java 中，JIT 即时编译器是一项用来提升应用程序代码执行效率的技术。字节码指令被 Java 虚拟机解释执行，如果有一些指令执行频率高，称之为热点代码，这些字节码指令则被 JIT 即时编译器编译成机器码同时进行一些优化， 最后保存在内存中，将来执行时直接读取就可以运行在计算机硬件上。</p><p>在 HotSpot 中，有三款即时编译器，C1、C2 和 Graal。 C1 编译效率比 C2 快，但是优化效果不如 C2。所以 C1 适合优化一些执行时间较短的代码，C2 适合优化服务端程序中长期执行的代码。</p><p><img src="/images/jvm-jit-c1&c2.png" alt="JIT"></p><p>JDK7 之后，采用分层编译的方式，在 JVM 中 C1 和 C2 会一同发挥作用，分层编译将整个优化级别分成 5 个等级。</p><table><thead><tr><th align="center">等级</th><th align="center">使用组件</th><th align="center">描述</th><th align="center">保存的内容</th><th align="center">性能打分（1-5）</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">解释器</td><td align="center">解释执行<br/>记录方法调用次数及循环次数</td><td align="center">无</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">C1 即时编译器</td><td align="center">C1 完整优化</td><td align="center">优化后的机器码</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">C1 即时编译器</td><td align="center">C1 完整优化<br/>记录方法调用次数及循环次数</td><td align="center">优化后的机器码<br/>部分额外信息：方法调用次数及循环次数</td><td align="center">3</td></tr><tr><td align="center">3</td><td align="center">C1 即时编译器</td><td align="center">C1 完整优化<br/>记录所有额外信息</td><td align="center">优化后的机器码<br/>所有额外信息：分 支跳转次数、类型转换等等</td><td align="center">2</td></tr><tr><td align="center">4</td><td align="center">C2 即时编译器</td><td align="center">C2 完整优化</td><td align="center">优化后的机器码</td><td align="center">5</td></tr></tbody></table><p>C1 即时编译器和 C2 即时编译器都有独立的线程去进行处理，内部会保存一个队列，队列中存放需要编译的任务。 一般即时编译器是针对方法级别来进行优化的，当然也有对循环进行优化的设计。</p><p><img src="/images/jvm-jit-c1&c2-queue.png" alt="jit-queue"></p><p>C1 和 C2 是如何进行协作?</p><ol><li><p>先由 C1 执行过程中收集所有运行中的信息，方法执行次数、循环执行次数、分支执行次数等等，然后等待执行 次数触发阈值（分层即时编译由 JVM 动态计算）之后，进入 C2 即时编译器进行深层次的优化。</p><pre><code class=" mermaid">graph LR;0 --&gt; 3:C1即时编译器线程 --&gt; 4:C2即时编译器线程</code></pre></li><li><p>方法字节码执行数目过少，先收集信息，JVM 判断 C1 和 C2 优化性能差不多，那之后转为不收集信息，由 C1 直接 进行优化。</p><pre><code class=" mermaid">graph LR;0 --&gt; 3:C1即时编译器线程 --&gt; 1:C1即时编译器线程</code></pre></li><li><p>C1 线程都在忙碌的情况下，直接由 C2 进行优化。</p><pre><code class=" mermaid">graph LR;0 --&gt; 4:C2即时编译器线程</code></pre></li><li><p>C2 线程忙碌时，先由 2 层 C1 编译收集一些基础信息，多运行一会儿，然后再交由 3 层 C1 处理，由于 3 层 C1 处理效 率不高，所以尽量减少这一层停留时间（C2 忙碌着，一直收集也没有意义），最后 C2 线程不忙碌了再交由 C2 进行 处理。</p><pre><code class=" mermaid">graph LR;0 --&gt; 2:C1即时编译器线程 --&gt; 3:C1即时编译器线程 --&gt; 4:C2即时编译器线程</code></pre></li></ol><blockquote><p>案例：测试 JIT 即时编译器的优化效果</p><p>需求：</p><ol><li><p>编写 JMH 案例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jitTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>        sum = add(sum, <span class="hljs-number">100</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分别采用三种不同虚拟机参数测试 JIT 优化效果：</p><ul><li>不加参数（开启完全 JIT 即时编译）</li><li>-Xint（关 闭 JIT 只使用解释器）</li><li>-XX:TieredStopAtLevel&#x3D;1（分层编译下只使用 1 层 C1 进行编译）</li></ul></li></ol></blockquote><p>常见的 JIT 即时编译器优化手段</p><p>JIT 编译器主要优化手段是方法内联和逃逸分析。</p><ol><li><p>方法内联（Method Inline）：方法体中的字节码指令直接复制到调用方的字节码指令中，节省了创建栈帧的开销</p><blockquote><p>案例：使用 JIT Watch 工具查看方法内联的优化结果</p><p>需求：</p><ol><li>安装 JIT Watch 工具，下载源码：<a href="https://github.com/AdoptOpenJDK/jitwatch/tree/1.4.2">https://github.com/AdoptOpenJDK/jitwatch/tree/1.4.2</a></li><li>使用资料中提供的脚本文件直接启动。</li><li>添加源代码目录，点击沙箱环境 RUN。</li><li>通过 JIT Watch 观察到通过 C1 调用多次收集信息之后，进入 C2 优化。C2 优化之后的机器码大小非常小。</li><li>方法调用进行内联优化，汇编代码中直接使用乘法计算出值再进行累加，如此效率更高。</li></ol></blockquote><p>方法内联的限制并不是所有的方法都可以内联，内联有一定的限制：</p><ol><li>方法编译之后的字节码指令总大小 &lt; 35 字节，可以直接内联。（通过-XX:MaxInlineSize&#x3D;值 控制）</li><li>方法编译之后的字节码指令总大小 &lt; 325 字节，并且是一个热方法。（通过-XX:FreqInlineSize&#x3D;值 控制）</li><li>方法编译生成的机器码不能大于 1000 字节。（通过-XX:InlineSmallCode&#x3D;值 控制）</li><li>一个接口的实现必须小于 3 个，如果大于三个就不会发生内联。</li></ol></li><li><p>逃逸分析指的是如果 JIT 发现在方法内创建的对象不会被外部引用，那么就可以采用锁消除、标量替换等方式进行优化。</p><ul><li><p>锁消除指的是如果对象被判断不会逃逸出去，那么在对象就不存在并发访问问题，对象上的锁处理都不会执行， 从而提高性能。</p><blockquote><p>锁消除优化在真正的工作代码中并不常见，一般加锁的对象都是支持多线程去访问的。</p></blockquote></li><li><p>标量替换：逃逸分析真正对性能优化比较大的方式是标量替换。</p><ul><li>在 Java 虚拟机中，对象中的基本数据类型称为标量，引用的其他对象称为聚合量。</li><li>标量替换指的是如果方法中的对象不会逃逸，那么其中的标量就可以直接在栈上分配。</li></ul></li></ul></li></ol><p>JIT 优化的建议</p><p>根据 JIT 即时编器优化代码的特性，在编写代码时注意以下几个事项，可以让代码执行时拥有更好的性能：</p><ol><li>尽量编写比较小的方法，让方法内联可以生效。</li><li>高频使用的代码，特别是第三方依赖库甚至是 JDK 中的，如果内容过度复杂是无法内联的，可以自行实现一个特定的优化版本。</li><li>注意下接口的实现数量，尽量不要超过 2 个，否则会影响内联的处理。</li><li>高频调用的方法中创建对象临时使用，尽量不要让对象逃逸。</li></ol><h2 id="18、垃圾回收器原理"><a href="#18、垃圾回收器原理" class="headerlink" title="18、垃圾回收器原理"></a>18、垃圾回收器原理</h2><h3 id="18-1、G1-垃圾回收器原理"><a href="#18-1、G1-垃圾回收器原理" class="headerlink" title="18.1、G1 垃圾回收器原理"></a>18.1、G1 垃圾回收器原理</h3><p>G1 垃圾回收有两种方式：</p><ol><li>年轻代回收（Young GC）</li><li>混合回收（Mixed GC）</li></ol><h4 id="18-1-1、年轻代回收"><a href="#18-1-1、年轻代回收" class="headerlink" title="18.1.1、年轻代回收"></a>18.1.1、年轻代回收</h4><ol><li><p>新创建的对象会存放在 Eden 区。当 G1 判断年轻代区不足（max 默认 60%），无法分配对象时需要回收时会执行 Young GC。</p></li><li><p>标记出 Eden 和 Survivor 区域中的存活对象；</p></li><li><p>根据配置的最大暂停时间选择某些区域将存活对象复制到一个新的 Survivor 区中（年龄+1），清空这些区域。</p></li><li><p>后续 Young GC 时与之前相同，只不过 Survivor 区中存活对象会被搬运到另一个 Survivor 区。</p></li><li><p>当某个存活对象的年龄到达阈值（默认 15），将被放入老年代。</p></li><li><p>部分对象如果大小超过 Region 的一半，会直接放入老年代，这类老年代被称为 Humongous 区。</p><p>比如堆内存是 4G，每个 Region 是 2M，只要一个大对象超过了 1M 就被放入 Humongous 区，如果对象过大会横跨多个 Region。</p></li><li><p>多次回收之后，会出现很多 Old 老年代区，此时总堆占有率达到阈值时 （-XX:InitiatingHeapOccupancyPercent 默认 45%）会触发混合回收 MixedGC。回收所有年轻代和 部分老年代的对象以及大对象区。采用复制算法来完成。</p></li></ol><p>年轻代回收只扫描年轻代对象（Eden + Survivor），所以从 GC Root 到年轻代的对象或者年轻代对象引用了其他年 轻代的对象都很容易扫描出来。</p><blockquote><p>年轻代回收只扫描年轻代对象（Eden + Survivor），如果有老年代中的对象引用年轻代中的对象，我们又如何知道呢？</p><ol><li><p>方案 1：从 GC Root 开始，扫描所有对象，如果年轻代对象在引用链上，就标记为存活。</p><p>不可行，需要遍历引用链上所有对象，效率太低。</p></li><li><p>方案 2：维护一个详细的表，记录哪个对象被哪个老年代引用。在年轻代中被引用的对象，不进行回收。</p><p>问题：如果对象太多这张表会占用很大的内存空间。存在错标的情况</p><ul><li><p>第一次优化：只记录 Region 被哪些对象引用。这种引用详情表称为记忆集 RememberedSet（简称 RS 或 RSet）：是一种记录了从非收集区域对象引用收集区域对象的这些关系的数据结构。扫描时将记忆集中的对象也加 入到 GC Root 中，就可以根据引用链判断哪些对象需要回收了。</p><p>问题：如果区域中引用对象很多，还是占用很多内存。</p></li><li><p>第二次优化：将所有区域中的内存按一定大小划分成很多个块，每个块进行编号。记忆集中只记录对块的引 用关系。如果一个块中有多个对象，只需要引用一次，减少了内存开销。</p></li></ul></li></ol></blockquote><p><strong>卡表(Card Table)</strong></p><p>每一个 Region 都拥有一个自己的卡表，如果产生跨代引用（老年代引用年轻代），此时这个 Region 对应的卡表上就会将字节内容进行修改,JDK8 源码中 0 代表被引用称为脏卡。</p><p>这样就可以标记出当前 Region 被老年代中的哪 些部分引用。那么要生成记忆集就比较简单，只需要遍历整个卡表，找到所有脏卡。</p><p>年轻代回收标记时，会将记忆集中的对象也加入到 GC Root 对象中，进行扫描并标记其引用链上的对象。</p><p><strong>写屏障</strong></p><p>JVM 使用写屏障（Write Barrier）技术，在执行引用关系建立的代码时，可以在代码前和代码后插入一段指令， 从而维护卡表。 记忆集中不会记录新生代到新生代的引用，同一个 Region 中的引用也不会记录。</p><p><strong>记忆集的生成流程</strong></p><p>记忆集的生成流程分为以下几个步骤：</p><ol><li>通过写屏障获得引用变更的信息。</li><li>将引用关系记录到卡表中，并记录到一个脏卡队列中。</li><li>JVM 中会由 Refinement 线程定期从脏卡队列中获取数据，生成记忆集。不直接写入记忆集的原因是避免过多线程 并发访问记忆集。</li></ol><p>详细分析下年轻代回收的步骤，整个过程是 STW 的：</p><ol><li>Root 扫描，将所有的静态变量、局部变量扫描出来。</li><li>处理脏卡队列中的没有处理完的信息，更新记忆集的数据，此阶段完成后，记忆集中包含了所有老年代对当前 Region 的引用关系。</li><li>标记存活对象。记忆集中的对象会加入到 GC Root 对象集合中，在 GC Root 引用链上的对象也会被标记为存活对 象。</li><li>根据设定的最大停顿时间，选择本次收集的区域，称之为回收集合 Collection Set。</li><li>复制对象：将标记出来的对象复制到新的区中，将年龄加 1，如果年龄到达 15 则晋升到老年代。老的区域内存直 接清空。</li><li>处理软、弱、虚、终结器引用，以及 JNI 中的弱引用。</li></ol><p><strong>G1 年轻代回收核心技术</strong></p><ol><li><p>卡表 Card Table</p><p>每一个 Region 都拥有一个自己的卡表，卡表是一个字节数组，如果产生了跨代引用（老年代引用年轻代），G1 会将卡表上引用对象所在的位置字节内容进行修改为 0, 称为脏卡。卡表的主要作用是生成记忆集。 卡表会占用一定的内存空间，堆大小是 1G 时，卡表大小为 1G &#x3D; 1024 MB &#x2F; 512 &#x3D; 2MB</p></li><li><p>记忆集 RememberedSet（简称 RS 或 RSet）</p><p>每一个 Region 都拥有一个自己的记忆集，如果产生了跨代引用，记忆集中会记录引用对象所在的卡表位置。标 记阶段将记忆集中的对象加入 GC ROOT 集合中一起扫描，就可以将被引用的对象标记为存活。</p></li><li><p>写屏障 Write Barrier</p><p>G1 使用写屏障技术，在执行引用关系建立的代码执行后插入一段指令，完成卡表的维护工作。</p><p>会损失一部分的性能，大约在 5%~10%之间。</p></li></ol><h4 id="18-1-2、混合回收"><a href="#18-1-2、混合回收" class="headerlink" title="18.1.2、混合回收"></a>18.1.2、混合回收</h4><p>多次回收之后，会出现很多 Old 老年代区，此时总堆占有率达到阈值（默认 45%）时会触发混合回收 MixedGC。</p><p>混合回收会由年轻代回收之后或者大对象分配之后触发，混合回收会回收 整个年轻代 + 部分老年代。</p><p>老年代很多时候会有大量对象，要标记出所有存活对象耗时较长，所以整个标记过程要尽量能做到和用户线程并行执行。</p><p>混合回收的步骤：</p><ol><li>初始标记，STW，采用三色标记法标记从 GC Root 可直达的对象。</li><li>并发标记，并发执行，对存活对象进行标记。</li><li>最终标记，STW，处理 SATB 相关的对象标记。</li><li>清理，STW，如果区域中没有任何存活对象就直接清理。</li><li>转移，将存活对象复制到别的区域。</li></ol><p><strong>初始标记</strong></p><p>初始标记会暂停所有用户线程，只标记从 GC Root 可直达的对象，所以停顿时间不会太长。采用三色标记法进行标记， 三色标记法在原有双色标记（黑也就是 1 代表存活，白 0 代表可回收）增加了一种灰色，采用队列的方式保存标记为灰 色的对象。</p><ul><li>黑色：存活，当前对象在 GC Root 引用链上，同时他引用的其他对象也都已经标记完成。</li><li>灰色：待处理，当前对象在 GC Root 引用链上，他引用的其他对象还未标记完成。</li><li>白色：可回收，不在 GC Root 引用链上。</li></ul><p>三色标记中的黑色和白色是使用位图(bitmap)来实现的,比如 8 个字节使用 1 个 bit 来标识标记的内容，黑色为 1，白色 为 0，灰色不会体现在位图中，会单独放入一个队列中。如果对象超过 8 个字节，仅仅使用第一个 bit 位处理。</p><p><strong>并发标记</strong></p><p>并发标记阶段继续进行未完成的标记任务。此阶段和用户线程并发执行。</p><blockquote><p>步骤：</p><ol><li><p>现在有对象 A、B、C、D、E。</p><pre><code class=" mermaid">graph LR;A --&gt; BA --&gt; CC --&gt; DE</code></pre></li><li><p>首先从灰色队列中获取尚未完成标记的对象 A。然后再标记与对象 A 关联的 B 和 C 对象，如果 B 和 C 对象并未引用其他对象，可以直接标记成黑色，而 A 也完成所有引用对象的标记，也标记为黑色。</p></li><li><p>如果 C 对象引用其他对象 D，可以直接标记成灰色，最后从队列获取 C 对象，标记为黑色，D 也标记为黑色。</p></li><li><p>若剩余对象 E 是白色，可直接回收。</p></li></ol></blockquote><p>三色标记存在一个比较严重的问题，由于用户线程可能同时在修改对象的引用关系，就会出现错标的情况。</p><p>比如： 这个案例中正常情况下，B 和 C 都会被标记成黑色。但是在 BC 标记前，用户线程执行 A.b &#x3D; null；将 A 到 B 的引用去除。同时执行 C.b &#x3D; b; 添加 C 到 B 的引用。此时会出现严重问题(A 到 B 的引用去除的瞬间)，B 是白色可回收，一旦回收代码中再去使用对象会造成重大问题。</p><p><strong>SATB</strong></p><p>G1 为了解决这个问题，使用了 SATB 技术（Snapshot At The Beginning， 初始快照）。SATB 技术是这样处理的：</p><ol><li>标记开始时创建一个快照，记录当前所有对象，标记过程中新生成的对象直接标记为黑色。</li><li>采用前置写屏障技术，在引用赋值前比如 B.c &#x3D; null 之前，将之前引用的对象 c 放入 SATB 待处理队列中。SATB 队 列每个线程都有一个，最终会汇总到一个大的 SATB 队列中。</li></ol><p><strong>最终标记</strong></p><p>最终标记会暂停所有用户线程，主要是为处理 SATB 相关的对象标记。该阶段将所有线程的 SATB 队列中剩余的数据合并到总的 SATB 队列中，然后逐一处理。</p><p>SATB 队列中的对象，默认按照存活处理，同时要处理他们引用的对象</p><p>SATB 的缺点是在本轮清理时可能会将不存活的对象标记成存活对象，产生一些所谓的浮动垃圾，等到下一轮清理时才能回收。</p><p><strong>转移</strong></p><p>A 转移的步骤如下:</p><ol><li>根据最终标记的结果，可以计算出每一个区域的垃圾对象占用内存大小，根据停顿时间，选择转移效率最高（垃圾对象最多）的几个区域。</li><li>转移时先转移 GC Root 直接引用的对象，然后再转移其他对象。</li><li>回收老的区域，如果外部有其他区域对象引用了转移对象，也需要重新设置引用关系。</li></ol><h3 id="18-2、ZGC-原理"><a href="#18-2、ZGC-原理" class="headerlink" title="18.2、ZGC 原理"></a>18.2、ZGC 原理</h3><p>ZGC 是一种可扩展的低延迟垃圾回收器。ZGC 在垃圾回收过程中，STW 的时间不会超过一毫秒，适合需要低延 迟的应用。支持几百兆到 16TB 的堆大小，堆大小对 STW 的时间基本没有影响。</p><p>在 G1 垃圾回收器中，STW 时间的主要来源是在转移阶段：</p><ol><li>初始标记，STW，采用三色标记法标记从 GC Root 可直达的对象。 STW 时间极短</li><li>并发标记，并发执行，对存活对象进行标记。</li><li>最终标记，STW，处理 SATB 相关的对象标记。 STW 时间极短</li><li>清理，STW，如果区域中没有任何存活对象就直接清理。 STW 时间极短</li><li>转移，将存活对象复制到别的区域。 STW 时间较长</li></ol><p><strong>G1 转移时需要停顿的主要原因</strong></p><p>在转移时，能不能让用户线程和 GC 线程同时工作呢？考虑下面的问题：</p><ul><li>转移完之后，需要将 A 对对象的引用更改为新对象的引用。但是在更改前，执行 A.c.count &#x3D; 2，此时更改的是 转移前对象中的属性。</li><li>更改引用之后, A 引用了转移之后的对象，此时获取 A.c.count 发现属性值依然是 1。这样就产生了问题，所以 G1 为了解决问题，在转移过程中需要进行用户线程的停止。ZGC 和 Shenandoah 解决了这个问题，让转移过程也 能够并发执行。</li></ul><p><strong>ZGC 的解决方案</strong></p><p>在 ZGC 中，使用了读屏障 Load Barrier 技术，来实现转移后对象的获取。当获取一个对象引用时，会触发读后的屏障指令，如果对象指向的不是转移后的对象，用户线程会将引用指向转移后的对象。</p><p><strong>着色指针（Colored Pointers）</strong></p><p>访问对象引用时，使用的是对象的地址。在 64 位虚拟机中，是 8 个字节可以表示接近无限的内存空间。所以一般 内存中对象，高几位都是 0 没有使用。着色指针就是利用了这多余的几位，存储了状态信息。</p><p>着色指针将原来的 8 字节保存地址的指针拆分成了三部分：</p><ol><li>最低的 44 位，用于表示对象的地址，所以最多能表示 16TB 的内存空间。</li><li>中间 4 位是颜色位，每一位只能存放 0 或者 1，并且同一时间只有其中一位是 1。<ul><li>终结位：只能通过终结器访问</li><li>重映射位(Remap)：转移完之后，对象的引用关系已经完成变更。</li><li>Marked0 和 Marked1：标记可达对象</li></ul></li><li>16 位未使用</li></ol><p>正常应用程序使用 8 个字节去进行对象的访问，现在只使用了 44 位，不会产生问题吗？</p><p>应用程序使用的对象地址，只是虚拟内存，操作系统会将虚拟内存转换成物理内存。而 ZGC 通过操作系统更改 了这层逻辑。所以不管颜色位变成多少，指针指向的都是同一个对象。</p><p><strong>ZGC 的内存划分</strong></p><p>在 ZGC 中，与 G1 垃圾回收器一样将堆内存划分成很多个区域，这些内存区域被称之为 Zpage。 Zpage 分成三类大中小，管控粒度比 G1 更细，这样更容易去控制停顿时间。 小区域：2M，只能保存 256KB 内的对象。 中区域：32M，保存 256KB – 4M 的对象。 大区域：只保存一个大于 4M 的对象。</p><ol><li>初始标记阶段<ul><li>标记 Gc Roots 引用的对象为存活对象数量不多，所以停顿时间非常短。</li><li>遍历所有对象，标记可以到达的每一个对象是否存活，用户线程使用读屏障，如果发现对象没有完成标记也会 帮忙进行标记。</li></ul></li><li>并发处理阶段<ul><li>选择需要转移的 Zpage，并创建转移表，用于记录转移前对象和转移后对象地址。</li></ul></li><li>转移开始阶段<ul><li>转移 GC Root 直接关联的对象，不转移的对象 remapped 值设置成 1，避免重复进行判断。</li><li>转移 GC Root 直接关联的对象，不转移的对象 remapped 值设置成 1，避免重复进行判断。转移之后将两个对象 的地址记入转移映射表。</li></ul></li><li>并发转移阶段<ul><li>将剩余对象转移到新的 ZPage 中，转移之后将两个对象的地址记入转移映射表。</li><li>转移完之后，转移前的 Zpage 就可以清空了，转移表需要保留下来。</li><li>此时，如果用户线程访问 4‘ 对象引用的 5 对象，会通过读屏障，将 4 对 5 的引用进行重置，修改为对 5’的引用，同 时将 remap 标记为 1 代表已经重新映射完成。</li><li>并发转移阶段结束之后，这一轮的垃圾回收就结束了，但其实并没有完成所有指针的重映射工作，这个工作会 放到下一阶段，与下一阶段的标记阶段一起完成（因为都需要遍历整个对象图）。</li></ul></li></ol><p><strong>ZGC 的执行流程</strong></p><p><img src="/images/jvm-zgcProcess.png" alt="zgc"></p><p><strong>第二次垃圾回收的初始标记阶段</strong></p><p>第二次垃圾回收的初始标记阶段，沿着 GC Root 标记对象。</p><p>如果 Marked 为 1 代表上一轮的重映射还没有完成，先完成重映射从转移表中找到老对象转移后的新对象，再进 行标记。如果 Remap 为 1，只需要进行标记。</p><p>将转移映射表删除，释放内存空间。</p><p><strong>并发转移阶段 – 并发问题</strong></p><p>如果用户线程在帮忙转移时，GC 线程也发现这个对象需要复制，那么就会去尝试写入转移映射表，如果发现映 射表中已经有相同的老对象，直接放弃。</p><p><img src="/images/jvm-zgc-concurrence.png" alt="并发问题"></p><p><strong>分代 ZGC 的设计</strong></p><p>在 JDK21 之后，ZGC 设计了年轻代和老年代，这样可以让大部分对象在年轻代回收，减少老年代的扫描次数， 同样可以提升一定的性能。同时，年轻代和老年代的垃圾回收可以并行执行。</p><p>分代之后的着色指针将原来的 8 字节保存地址的指针拆分成三部分：</p><ul><li>46 位用来表示对象地址，最多可以表示 64TB 的地址空间。</li><li>中间的 12 位为颜色位。</li><li>最低 4 位和最高 2 位未使用 整个分代之后的读写屏障、着色指针的移位使用都变的异常复杂，仅作了解即可。</li></ul><p><img src="/images/jvm-zgc-generationalDesign.png" alt="分代设计"></p><p><strong>ZGC 核心技术</strong></p><ol><li><p>着色指针(Colored Pointers</p><p>着色指针将原来的 8 字节保存地址的指针拆分成三部分，不仅能保存对象的地址，还可以保存当前对象所属的状态。</p><blockquote><p>不支持 32 位系统、不支持指针压缩</p></blockquote></li><li><p>读屏障（Load Barrier）</p><p>在获取对象引用判断对象所属状态，如果所属状态和当前 GC 阶段的颜色状态不一致，由用户线程完成本阶段的 工作。</p><blockquote><p>会损失一部分的性能，大约在 5%~10%之间。</p></blockquote></li></ol><h3 id="18-3、ShenandoahGC-原理"><a href="#18-3、ShenandoahGC-原理" class="headerlink" title="18.3、ShenandoahGC 原理"></a>18.3、ShenandoahGC 原理</h3><p>ShenandoahGC 和 ZGC 不同， ShenandoahGC 很多是使用 G1 源代码改造而成，所以在很多算法、数据结构的定义上，与 G1 十分相像，而 ZGC 是完全重新开发的一套内容。</p><ol><li>ShenandoahGC 的区域定义与 G1 是一样的。</li><li>没有着色指针，通过修改对象头的设计来完成并发转移过程的实现。</li><li>ShenandoahGC 有两个版本：1.0 版本存在于 JDK8 和 JDK11 中；后续的 JDK 版本中均使用 2.0 版本。</li></ol><h4 id="18-3-1、ShenandoahGC-的设计-–-1-0-版本"><a href="#18-3-1、ShenandoahGC-的设计-–-1-0-版本" class="headerlink" title="18.3.1、ShenandoahGC 的设计 – 1.0 版本"></a>18.3.1、ShenandoahGC 的设计 – 1.0 版本</h4><p>1.0 版本，在对象的前 8 个字节，增加一个前向指针。 前向指针指向转移之后的对象，如果没有就指向自己。</p><p><img src="/images/jvm-senandoahGC-1.0-RegularObject.png" alt="常规对象"><img src="/images/jvm-senandoahGC-1.0-object.png" alt="ShenandoahGC对象"></p><p>如果转移阶段未完成，此时转移前的对象和转移后的对象都会存活。如果用户去访问数据，需要使用转移后的 数据。 ShenandoahGC 使用了读前屏障，根据对象的前向指针来获取到转移后的对象并读取。</p><p><img src="/images/jvm-senandoahGC-1.0-transfer.png" alt="转移"></p><p>写入数据时会使用写前屏障，判断 Mark Word 中的 GC 状态，如果 GC 状态为 0 证明没有处于 GC 过程中，直接写 入，如果不为 0 则根据 GC 状态值确认当前处于垃圾回收的哪个阶段，让用户线程执行垃圾回收相关的任务。</p><h4 id="18-3-2、ShenandoahGC-的设计-–-2-0-版本"><a href="#18-3-2、ShenandoahGC-的设计-–-2-0-版本" class="headerlink" title="18.3.2、ShenandoahGC 的设计 – 2.0 版本"></a>18.3.2、ShenandoahGC 的设计 – 2.0 版本</h4><p><strong>1.0 版本的缺点：</strong></p><ol><li>对象内存大大增加，每个对象都需要增加 8 个字节的前向指针，基本上会占用 5% - 10%的空间。</li><li>读屏障中加入了复杂的指令，影响使用效率。 2.0 版本优化了前向指针的位置，仅转移阶段将其放入了 Mark Word 中。</li></ol><p><img src="/images/jvm-senandoahGC-1.0.png" alt="1.0"></p><p><strong>ShenandoahGC 的执行流程</strong></p><p><img src="/images/jvm-senandoahGC-1.0-Process.png" alt="流程"></p><p><strong>并发转移阶段 – 并发问题</strong></p><p>如果用户线程在帮忙转移时，ShenandoahGC 线程也发现这个对象需要复制，那么就会去尝试写入前向指针， 使用了类似 CAS 的方式来实现，只有一个线程能成功修改，其他线程会放弃转移的操作。</p><p><img src="/images/jvm-senandoahGC-1.0-concurrence.png" alt="并发"></p>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos</title>
    <link href="/2024/04/25/Nacos/"/>
    <url>/2024/04/25/Nacos/</url>
    
    <content type="html"><![CDATA[<h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><blockquote><h4 id="Nacos-运行机制"><a href="#Nacos-运行机制" class="headerlink" title="Nacos 运行机制"></a>Nacos 运行机制</h4><p><img src="/images/nacos.png" alt="nacos"></p><h3 id="Nacos-与-Eureka-的区别"><a href="#Nacos-与-Eureka-的区别" class="headerlink" title="Nacos 与 Eureka 的区别"></a>Nacos 与 Eureka 的区别</h3><blockquote><ul><li><p>Nacos 与 eureka 的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos 与 Eureka 的区别</p><ul><li>Nacos 支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos 集群默认采用 AP 方式，当集群中存在非临时实例时，采用 CP 模式；Eureka 采用 AP 方式</li></ul></li></ul></blockquote></blockquote><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p>在 Nacos 的 GitHub 页面，提供有下载链接，可以下载编译好的 Nacos 服务端或者源代码：</p><p>GitHub 主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub 的 Release 下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><blockquote><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul></blockquote><h3 id="1-1、window"><a href="#1-1、window" class="headerlink" title="1.1、window"></a>1.1、window</h3><p>执行启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">startup.cmd -m standalone<br></code></pre></td></tr></table></figure><h3 id="1-2、Linux"><a href="#1-2、Linux" class="headerlink" title="1.2、Linux"></a>1.2、Linux</h3><blockquote><p>注意 ⚠️：Nacos 依赖于 JDK 运行，Linux 需要安装 JDK</p><ol><li><p>配置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/java<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br></code></pre></td></tr></table></figure></li><li><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>执行启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh startup.sh -m standalone<br></code></pre></td></tr></table></figure><h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><h3 id="2-1、引入依赖"><a href="#2-1、引入依赖" class="headerlink" title="2.1、引入依赖"></a>2.1、引入依赖</h3><p>父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- nacos客户端依赖包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2、配置-nacos-地址"><a href="#2-2、配置-nacos-地址" class="headerlink" title="2.2、配置 nacos 地址"></a>2.2、配置 nacos 地址</h3><p>在 application.yml 中添加 nacos 地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nocos服务安装地址IP:8848</span><br></code></pre></td></tr></table></figure><h3 id="2-3、服务分级存储模型"><a href="#2-3、服务分级存储模型" class="headerlink" title="2.3、服务分级存储模型"></a>2.3、服务分级存储模型</h3><blockquote><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，且分布在不同<strong>地区</strong></p></blockquote><p><img src="/images/nacos-FenJi.png" alt="集群"></p><p>在 application.yml 中添加集群配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><blockquote><p>或：在启动配置项中配置 &#x3D;&gt; 在环境配置中的 <code>VM options</code> 添加属性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH<br></code></pre></td></tr></table></figure></blockquote><h3 id="2-4、同集群优先的负载均衡"><a href="#2-4、同集群优先的负载均衡" class="headerlink" title="2.4、同集群优先的负载均衡"></a>2.4、同集群优先的负载均衡</h3><blockquote><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡</p></blockquote><p>在 application.yml 文件中修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">XXXservice:</span> <span class="hljs-comment"># 服务名称（如：userservice）</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="hljs-comment"># 负载均衡规则</span><br></code></pre></td></tr></table></figure><h3 id="2-5、权重配置"><a href="#2-5、权重配置" class="headerlink" title="2.5、权重配置"></a>2.5、权重配置</h3><blockquote><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器的性能问题。因此，Nacos 提供了权重配置来控制访问频率，权重越大则访问频率越高。</p></blockquote><p>在 nacos 控制台，找到 service 的实例列表，点击编辑即可修改权重：</p><blockquote><p><strong>注意</strong>：如果权重修改为 0，则该实例永远不会被访问</p></blockquote><h2 id="3、环境隔离"><a href="#3、环境隔离" class="headerlink" title="3、环境隔离"></a>3、环境隔离</h2><p>Nacos 提供了 namespace 来实现环境隔离功能。</p><ul><li>nacos 中可以有多个 namespace</li><li>namespace 下可以有 group、service 等</li><li>不同 namespace 之间相互隔离，例如不同 namespace 的服务互相不可见</li></ul><p><img src="/images/nacos-GeLi.png" alt="隔离"></p><h3 id="给微服务配置-namespace"><a href="#给微服务配置-namespace" class="headerlink" title="给微服务配置 namespace"></a>给微服务配置 namespace</h3><p>在 application.yml 文件中添加 namespace</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="hljs-comment"># 命名空间 =&gt; 填ID</span><br></code></pre></td></tr></table></figure><h2 id="4、配置管理"><a href="#4、配置管理" class="headerlink" title="4、配置管理"></a>4、配置管理</h2><h3 id="4-1、统一配置管理"><a href="#4-1、统一配置管理" class="headerlink" title="4.1、统一配置管理"></a>4.1、统一配置管理</h3><p>Nacos 一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p><p><img src="/images/nacos-PeiZhi.png" alt="配置"></p><blockquote><p>注意 ⚠️：项目的核心配置、需要热更新的配置才有放到 nacos 管理的必要，基本不会变更的配置仍保存在微服务本地。</p></blockquote><h3 id="4-2、从微服务拉取配置"><a href="#4-2、从微服务拉取配置" class="headerlink" title="4.2、从微服务拉取配置"></a>4.2、从微服务拉取配置</h3><blockquote><p>Nacos 添加配置</p><ol><li><img src="/images/nacos-addpeizhi1.png" alt="配置1"></li><li><img src="/images/nacos-addpeizhi2.png"></li></ol></blockquote><p>微服务要拉取 nacos 中管理的配置，并且与本地的 application.yml 配置合并，才能完成项目启动。</p><p>Spring 引入一种新的配置文件：bootstrap.yaml 文件，会在 application.yml 之前被读取，流程如下：</p><p><img src="/images/nacos-bootstrap.png" alt="bootstrap"></p><h4 id="1）引入-nacos-config-依赖"><a href="#1）引入-nacos-config-依赖" class="headerlink" title="1）引入 nacos-config 依赖"></a>1）引入 nacos-config 依赖</h4><p>在 service 服务中，引入 nacos-config 的客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos配置管理依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2）添加-bootstrap-yaml"><a href="#2）添加-bootstrap-yaml" class="headerlink" title="2）添加 bootstrap.yaml"></a>2）添加 bootstrap.yaml</h4><p>在 service 中添加一个 bootstrap.yaml 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">XXXservice</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 开发环境，这里是dev</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># Nacos地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><p>加载配置时会根据 spring.cloud.nacos.server-addr 获取 nacos 地址，再根据<code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件 id，来读取配置。</p><p>本例中，就是去读取<code>userservice-dev.yaml</code>：</p><p><img src="/images/nacos-jiazai-peizhi.png" alt="加载"></p><h4 id="3）读取-nacos-配置"><a href="#3）读取-nacos-配置" class="headerlink" title="3）读取 nacos 配置"></a>3）读取 nacos 配置</h4><p>在 service 中的 Controller 中添加业务逻辑，读取 <code>pattern.dateformat</code> 配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/xxx&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dateformat;<br><br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));<br>    &#125;<br>    <span class="hljs-comment">// ...略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3、配置热更新"><a href="#4-3、配置热更新" class="headerlink" title="4.3、配置热更新"></a>4.3、配置热更新</h3><blockquote><p><strong>配置热更新</strong>：在修改 nacos 中的配置后，微服务中无需重启即可让配置生效。</p></blockquote><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>在@Value 注入的变量所在类上添加注解@RefreshScope：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/xxx&quot;)</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dateformat;<br><br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));<br>    &#125;<br>    <span class="hljs-comment">// ...略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用@ConfigurationProperties 注解代替@Value 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PatternProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String dateformat;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Controller 中使用该类代替@Value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/xxx&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PatternProperties patternProperties;<br><br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));<br>    &#125;<br><br>    <span class="hljs-comment">// 略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4、配置共享"><a href="#4-4、配置共享" class="headerlink" title="4.4、配置共享"></a>4.4、配置共享</h3><p>其实微服务启动时，会去 nacos 读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><h4 id="4-4-1、添加一个环境共享配置"><a href="#4-4-1、添加一个环境共享配置" class="headerlink" title="4.4.1、添加一个环境共享配置"></a>4.4.1、添加一个环境共享配置</h4><p><img src="/images/nacos-peizhi-share.png" alt="share"></p><h4 id="4-4-2、读取共享配置"><a href="#4-4-2、读取共享配置" class="headerlink" title="4.4.2、读取共享配置"></a>4.4.2、读取共享配置</h4><p>修改 PatternProperties 类，读取新添加的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PatternProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String dateformat;<br>    <span class="hljs-keyword">private</span> String envShareValue;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 Controller，添加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/xxx&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PatternProperties patternProperties;<br><br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));<br>    &#125;<br><br>    <span class="hljs-comment">// 读取环境配置</span><br>    <span class="hljs-meta">@GetMapping(&quot;prop&quot;)</span><br>    <span class="hljs-keyword">public</span> PatternProperties <span class="hljs-title function_">prop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> patternProperties;<br>    &#125;<br><br>    <span class="hljs-comment">// 略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-3、运行两个-XXXApplication，使用不同的-profile-dev、test"><a href="#4-4-3、运行两个-XXXApplication，使用不同的-profile-dev、test" class="headerlink" title="4.4.3、运行两个 XXXApplication，使用不同的 profile(dev、test)"></a>4.4.3、运行两个 XXXApplication，使用不同的 profile(dev、test)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">XXXservice</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 开发环境-dev （dev、test、run）</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><blockquote><h2 id="⚠️-不管是-dev，还是-test-环境，都读取到-envSharedValue-属性的值"><a href="#⚠️-不管是-dev，还是-test-环境，都读取到-envSharedValue-属性的值" class="headerlink" title="⚠️ 不管是 dev，还是 test 环境，都读取到 envSharedValue 属性的值"></a>⚠️ 不管是 dev，还是 test 环境，都读取到 envSharedValue 属性的值</h2></blockquote><h3 id="4-5、配置共享的优先级"><a href="#4-5、配置共享的优先级" class="headerlink" title="4.5、配置共享的优先级"></a>4.5、配置共享的优先级</h3><p>⚠️ 当 nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><p><img src="/images/nacos-peizhi-prior.png" alt="prior"></p><h2 id="5、搭建集群"><a href="#5、搭建集群" class="headerlink" title="5、搭建集群"></a>5、搭建集群</h2><p><strong>官方 Nacos 集群图：</strong></p><p><img src="/images/nacos-jiqun.png" alt="集群"></p><p><strong>搭建的集群结构:</strong></p><p><img src="/images/nacos-JiQunJieGou.png" alt="集群结构"></p><blockquote><p>🔔<strong>搭建集群的基本步骤：</strong></p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载 nacos 安装包</li><li>配置 nacos</li><li>启动 nacos 集群</li><li>nginx 反向代理</li></ul></blockquote><h3 id="5-1-初始化数据库"><a href="#5-1-初始化数据库" class="headerlink" title="5.1.初始化数据库"></a>5.1.初始化数据库</h3><p>Nacos 默认数据存储在内嵌数据库 Derby 中，不属于生产可用的数据库。</p><p>官方推荐的最佳实践是使用带有主从的高可用数据库集群。</p><p>首先新建一个数据库，命名为 nacos，而后导入下面的 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="5-2-下载-nacos"><a href="#5-2-下载-nacos" class="headerlink" title="5.2.下载 nacos"></a>5.2.下载 nacos</h3><p>nacos 在 GitHub 上有下载地址：<a href="https://github.com/alibaba/nacos/tags%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/alibaba/nacos/tags，可以选择任意版本下载。</a></p><p>本例中才用 1.4.1 版本：</p><p><img src="/images/nacos-download.png" alt="image-20210409212119411"></p><h3 id="5-3-配置-Nacos"><a href="#5-3-配置-Nacos" class="headerlink" title="5.3.配置 Nacos"></a>5.3.配置 Nacos</h3><p>进入 nacos 的 conf 目录，修改配置文件 cluster.conf.example，重命名为 cluster.conf：</p><p><img src="/images/nacos-conf-cluster.png" alt="image-20210409212459292"></p><p>然后添加内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">127.0.0.1:8845<br>127.0.0.1.8846<br>127.0.0.1.8847<br></code></pre></td></tr></table></figure><p>然后修改 application.properties 文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="hljs-attr">db.user.0</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password.0</span>=<span class="hljs-string">123</span><br></code></pre></td></tr></table></figure><h3 id="5-4-启动"><a href="#5-4-启动" class="headerlink" title="5.4.启动"></a>5.4.启动</h3><p>将 nacos 文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p><img src="/images/nocos-nocosGroupFiles.png" alt="image-20210409213335538"></p><p>然后分别修改三个文件夹中的 application.properties，</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8845</span><br></code></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8846</span><br></code></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8847</span><br></code></pre></td></tr></table></figure><p>然后分别启动三个 nacos 节点：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span><br></code></pre></td></tr></table></figure><h3 id="5-5-nginx-反向代理"><a href="#5-5-nginx-反向代理" class="headerlink" title="5.5.nginx 反向代理"></a>5.5.nginx 反向代理</h3><p>下载 nginx 解压到任意非中文目录下：</p><p><img src="/images/nacos-nginxFiles.png" alt="image-20210410103322874"></p><p>修改 conf&#x2F;nginx.conf 文件，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> nacos-cluster &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8845</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8846</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8847</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br><br>    <span class="hljs-section">location</span> /nacos &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://nacos-cluster;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而后在浏览器访问：<a href="http://localhost/nacos">http://localhost/nacos</a> 即可。</p><p>项目中的 application.yml 文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:80</span> <span class="hljs-comment"># Nacos地址</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nacos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenFeign</title>
    <link href="/2024/04/25/OpenFeign/"/>
    <url>/2024/04/25/OpenFeign/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h1><p>总体概述</p><blockquote><p>想要远程调用别的服务</p><ol><li>引入 open-feign</li><li>编写一个接口，告诉 SpringCloud 这个接口需要调用远程服务<ol><li>声明接口的每一个方法都是调用哪个远程服务的那个请求</li></ol></li><li>开启远程调用功能</li></ol></blockquote><h2 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h2><p>1、首先，修改 pom.xml 文件，引入 openFeign</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、被远程调用的服务编写被调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试返回会员所有的优惠券信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/member/list&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">memberCoupons</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">CouponEntity</span> <span class="hljs-variable">couponEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CouponEntity</span>();<br>    couponEntity.setCouponName(<span class="hljs-string">&quot;满100减10&quot;</span>);<br>    <span class="hljs-keyword">return</span> R.ok().put(<span class="hljs-string">&quot;coupons&quot;</span>,Arrays.asList(couponEntity));<br>&#125;<br></code></pre></td></tr></table></figure><p>3、使用远程调用的服务编写远程调用的接口及方法</p><p>接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@FeignClient(&quot;shop-coupon&quot;)</span> <span class="hljs-comment">// 被远程调用的nacos注册名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CouponFeignService</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span> <span class="hljs-comment">// 被远程调用的方法的路径</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">memberCoupons</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CouponFeignService couponFeignService;<br><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">MemberEntity</span> <span class="hljs-variable">memberEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberEntity</span>();<br>    memberEntity.setNickname(<span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-type">R</span> <span class="hljs-variable">memberCoupons</span> <span class="hljs-operator">=</span> couponFeignService.memberCoupons();<br>    <span class="hljs-keyword">return</span> R.ok().put(<span class="hljs-string">&quot;member&quot;</span>,memberEntity).put(<span class="hljs-string">&quot;coupon&quot;</span>,memberCoupons.get(<span class="hljs-string">&quot;coupons&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>4、在启动类中添加注解（调用方）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.xxx.xxx.feign&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="2、自定义配置"><a href="#2、自定义配置" class="headerlink" title="2、自定义配置"></a>2、自定义配置</h2><p>Feign 可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http 远程调用的结果做解析，例如解析 json 字符串为 java 对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过 http 请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是 SpringMVC 的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用 Ribbon 的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean 覆盖默认 Bean 即可。</p><h3 id="2-1、配置文件方式"><a href="#2-1、配置文件方式" class="headerlink" title="2.1、配置文件方式"></a>2.1、配置文件方式</h3><p>基于配置文件修改 Feign 的日志级别可以针对单个服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">XXXservice:</span> <span class="hljs-comment"># 针对某个微服务的配置(userservice)</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别</span><br></code></pre></td></tr></table></figure><p>也可以针对所有服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#日志级别</span><br></code></pre></td></tr></table></figure><p>日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL 以及响应状态码和执行时间</li><li>HEADERS：在 BASIC 的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h3 id="2-2、Java-代码方式"><a href="#2-2、Java-代码方式" class="headerlink" title="2.2、Java 代码方式"></a>2.2、Java 代码方式</h3><p>也可以基于 Java 代码来修改日志级别，先声明一个类，然后声明一个 Logger.Level 的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfiguration</span>  &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.BASIC; <span class="hljs-comment">// 日志级别为BASIC</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients 注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span><br></code></pre></td></tr></table></figure><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient 注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;XXXservice&quot;, configuration = DefaultFeignConfiguration .class)</span><br></code></pre></td></tr></table></figure><h2 id="3、Feign-使用优化"><a href="#3、Feign-使用优化" class="headerlink" title="3、Feign 使用优化"></a>3、Feign 使用优化</h2><p>Feign 底层发起 http 请求，依赖于其它的框架。</p><blockquote><p>其底层客户端实现包括：</p><ul><li><p>URLConnection：默认实现，不支持连接池</p></li><li><p>Apache HttpClient ：支持连接池</p></li><li><p>OKHttp：支持连接池</p></li></ul><p>🔔 提高 Feign 的性能主要手段就是使用 <strong>连接池</strong> 代替默认的 URLConnection。</p></blockquote><h4 id="演示实例"><a href="#演示实例" class="headerlink" title="演示实例"></a>演示实例</h4><p>Apache HttpClient</p><p>1）引入依赖</p><p>在 service 的 pom 文件中引入 Apache 的 HttpClient 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--httpClient的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）配置连接池</p><p>在 order-service 的 application.yml 中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># default全局的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span> <span class="hljs-comment"># 日志级别，BASIC就是基本的请求和响应信息</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对HttpClient的支持</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大的连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 每个路径的最大连接数</span><br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>Feign 的优化</p><ol><li>日志级别尽量用 basic</li><li>使用 <code>HttpClient</code> 或 <code>OKHttp</code> 代替 <code>URLConnection</code><ul><li>引入 <code>Feign-httpClient</code> 依赖</li><li>配置文件开启 <code>httpClient</code> 功能，设置连接池参数</li></ul></li></ol></blockquote><h2 id="4、最佳实践"><a href="#4、最佳实践" class="headerlink" title="4、最佳实践"></a>4、最佳实践</h2><h3 id="4-1、继承方式"><a href="#4-1、继承方式" class="headerlink" title="4.1、继承方式"></a>4.1、继承方式</h3><p>1）定义一个 API 接口，利用定义方法，并基于 SpringMVC 注解做声明。</p><p>2）Feign 客户端和 Controller 都集成改接口</p><p><img src="/images/openfeign-clientApplication.png" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此 Controller 中必须再次声明方法、参数列表、注解</p></li></ul><h3 id="4-2、抽取方式"><a href="#4-2、抽取方式" class="headerlink" title="4.2、抽取方式"></a>4.2、抽取方式</h3><p>将 Feign 的 Client 抽取为独立模块，并且把接口有关的 POJO、默认的 Feign 配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将 UserClient、User、Feign 的默认配置都抽取到一个 feign-api 包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="/images/openfeign-userModel" alt="image-20210714214041796"></p><blockquote><h4 id="抽取方式扫描包问题解决方式"><a href="#抽取方式扫描包问题解决方式" class="headerlink" title="抽取方式扫描包问题解决方式"></a>抽取方式扫描包问题解决方式</h4><h5 id="方式一：指定-Feign-应该扫描的包："><a href="#方式一：指定-Feign-应该扫描的包：" class="headerlink" title="方式一：指定 Feign 应该扫描的包："></a>方式一：指定 Feign 应该扫描的包：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span><br></code></pre></td></tr></table></figure><h5 id="方式二：指定需要加载的-Client-接口："><a href="#方式二：指定需要加载的-Client-接口：" class="headerlink" title="方式二：指定需要加载的 Client 接口："></a>方式二：指定需要加载的 Client 接口：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>OpenFeign</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenFeign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2024/04/25/Redis/"/>
    <url>/2024/04/25/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h2><h3 id="NoSQL-介绍"><a href="#NoSQL-介绍" class="headerlink" title="NoSQL 介绍"></a>NoSQL 介绍</h3><p>NoSQL(Not Only SQL)，意即“不仅仅是 SQL”，泛指非关系型的数据库。</p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的 key-value 模式存储。因此大大的增加了数据库的扩展能力。</p><p>在对数据高并发、海量数据的读写的场景下有很高的性能。但是它不遵循 sql 标准，也不支持 ACID。</p><h4 id="解决-CPU-及内存压力"><a href="#解决-CPU-及内存压力" class="headerlink" title="解决 CPU 及内存压力"></a>解决 CPU 及内存压力</h4><p><img src="/images/redis-resolveMemoryStress.png" alt="image-20210708204923132"></p><p>在进行负载均衡的时候，如何让每台服务器都能知道用户的状态？</p><ol><li>存在 cookie 里<ul><li>保存在客户端，不安全</li></ul></li><li>每台服务器都复制一份 session<ul><li>session 数据冗余，节点越多浪费越大</li></ul></li><li>保存在缓存数据库中<ul><li>数据在内存中，速度快，存储结构简单</li></ul></li></ol><h4 id="解决数据库的-IO-压力"><a href="#解决数据库的-IO-压力" class="headerlink" title="解决数据库的 IO 压力"></a>解决数据库的 IO 压力</h4><p>在数据量很大的时候，可以把经常用到的查询的数据放到缓存数据库中，减少对数据库的 IO 读操作。</p><h3 id="Redis-介绍-1"><a href="#Redis-介绍-1" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h3><p>Redis 是一个开源的 key-value 存储系统。它支持存储的 value 类型相对更多，包括 string(字符串)、list(链表)、set(集合)、zset(有序集合) 和 hash(哈希类型)。</p><p>这些数据类型支持 push&#x2F;pop、add&#x2F;remove 及取交集、并集和差集等操作，而且这些操作都是<strong>原子性</strong>的。在此基础上，Redis 支持各种不同方式的排序。为了保证效率，数据都在内存中进行操作，然后会<strong>周期性</strong>的把更新的数据写入磁盘或者把修改操作追加写入到记录文件。并且在此基础上实现了 master-slave**(主从)同步**。</p><blockquote><p>Redis 是单线程+多路 IO 复用技术。而 memcached 使用的是多线程+锁。</p></blockquote><p><strong>多路复用</strong>是指&#x3D;&#x3D;一个线程&#x3D;&#x3D;可以检查&#x3D;&#x3D;多个文件描述符（Socket）&#x3D;&#x3D;的就绪状态（一般是读就绪或者写就绪），一旦某个描述符就绪，能够通知程序进行相应的读写操作。</p><p>多路复用的优势并不是在于单个连接能处理的更快，而是单个线程&#x2F;进程可以处理更多的连接。系统不必创建多个进程&#x2F;线程，从而大大减小了系统的开销。</p><hr><p>应用场景</p><ol><li>配合关系型数据库做高速缓存，降低数据库 IO</li><li>分布式架构中，做 session 共享</li><li>使用结构存储持久化数据</li></ol><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>关于数据库的一些操作：</p><ul><li>select dbid：命令切换数据库。redis 默认有 16 个数据库，类似数组下标从 0 开始，初始默认使用 0 号库<ul><li><code>select 8</code> 使用 8 号数据库</li></ul></li><li>dbsize：查看当前数据库的 key 的数量</li><li>flushdb：清空当前库</li><li>flushall：清空全部库</li></ul><hr><p>关于 key 的一些操作：</p><ul><li>keys pattern：查找所有符合给定模式 pattern，相当于正则<ul><li><code>keys *</code> 匹配数据库中所有 key。</li><li><code>keys h[ae]llo</code> 匹配 hallo 或 hello 的 key</li></ul></li><li>exists key：判断某个 key 是否存在。存在返回 1，否则返回 0</li><li>type key：查看 key 是什么类型</li><li>del key：删除指定的 key 的数据</li><li>unlink key：非阻塞方式删除指定的 key 的数据。先将 key 从 keyspace 元数据中删除，真正的删除在后续的异步操作。</li><li>expire key t：为给定的 key 设置过期时间，单位为秒</li><li>ttl key：查看还有多少秒过期。**-1 表示永不过期，-2 表示已过期**</li></ul><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h4><p>string 类型是以二进制存储的。意味着 Redis 的 string 可以包含任何数据，比如 jpg 图片或者序列化的对象。</p><p>string 的数据结构：</p><ul><li>如果是数字，则直接使用 int。</li><li>否则，使用<strong>简单动态字符串</strong>，内部结构的实现类似于 Java 的 ArrayList，采用 预分配冗余空间 的方式来减少内存的频繁分配。</li></ul><p>当字符串长度小于 1M 时，扩容的大小是原来的一倍；如果超过 1M，每次扩容只会多扩大 1M 的空间。&#x3D;&#x3D;需要注意的是字符串最大长度为 512M&#x3D;&#x3D;。</p><ul><li><code>set k v [nx] [px t]</code>：添加键值对，会替换之前的值。nx 表示 key 不存在才会 set，px t 表示过期时间。</li><li><code>mset k1 v1 k2 v2 k3 v3 .....</code>：同时设置一个或多个 key-value 对</li><li><code>get k</code>：根据 k 查询 value</li><li><code>mget k1 k2 k3 .....</code>：同时获取一个或多个 k 的 v</li><li><code>setnx  k v</code>：只有在 k 不存在时，才会添加成功。等同于<code>set k v nx</code></li><li><code>msetnx k1 v1 k2 v2 k3 v3 .....</code>：同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。<ul><li>原子操作，有一个失败则都失败。</li></ul></li><li><code>append k v</code>：追加 v 到原值的末尾</li><li><code>strlen k</code>：获得值的长度</li><li><code>incr k</code>：将 k 中储存的<strong>数字值</strong>加 1。只能对数字值操作，否则报错。</li><li><code>decr k</code>：将 k 中储存的<strong>数字值</strong>减 1</li><li><code>incrby/decrby k 步长</code>：将 k 中储存的数字值根据步长进行增&#x2F;减。</li><li><code>getrange k s e</code>：获得值的范围，<strong>左闭右闭</strong>。</li><li><code>setrange k s v</code>：用 v 覆写 k 所储存的从 s 开始的字符串值。</li></ul><p>应用场景：</p><ol><li>存储单键</li><li><strong>分布式锁</strong></li></ol><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h4><p>特点：单键多值</p><p>Redis 列表是简单的<strong>字符串列表</strong>。你可以在列表的头部（左边）或者尾部（右边）添加一个元素。</p><p>它的底层类似于双向链表，对两端的操作性能很高，通过索引下标操作中间的节点性能会较差。</p><p>首先在列表元素较少的情况下它会将所有的元素紧挨着一起存储，使用一块连续的内存空间，这个结构是<code>ziplist</code>，即是<strong>压缩列表</strong>。</p><p><img src="/images/redis-list.png" alt="image-20210801102417952"></p><ul><li><strong>zlbytes</strong>表示这个 ziplist 占用的大小</li><li><strong>zltail</strong>表示最后一个元素的偏移量，可以很快速的从后往前找。</li><li><strong>zllen</strong>表示元素个数。</li><li><strong>entry</strong>表示元素</li><li><strong>zlend</strong>标记 ziplist 的结尾</li></ul><p>当数据量比较多的时候会改成<code>quicklist</code>，如下图所示：</p><p><img src="/images/redis-list1.png" alt="image-20210708225035910"></p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</p><ul><li><code>lpush/rpush k v1 v2 v3 …</code>：从左边&#x2F;右边插入一个或多个值。</li><li><code>lpop/rpop k</code>：从左边&#x2F;右边吐出一个值。如果所有的值都被 pop 掉，则 k 也会消失。</li><li><code>rpoplpush k1 k2</code>：从 k1 列表右边吐出一个值，插到 k2 列表左边。</li><li><code>lrange k s e</code>：获得下标为**[s, e]**元素（左闭右闭）<ul><li>若 e 为负数，表示从右边开始取，此时下标从 1 开始。</li><li><code>lrange k1 0 -1</code> 取出左边第一个到右边第一个的元素</li></ul></li><li><code>lindex k index</code>：获取下标为 index 的元素(从左到右)</li><li><code>llen k</code>：获得列表长度</li><li><code>linsert k before/after v1 v2</code>：在 v1 的前面&#x2F;后面插入 v2</li><li><code>lrem k n v</code>：从左边第一个元素开始，删除 n 个 v</li><li><code>lset k index v</code>：将列表 k 下标为 index 的值替换成 v</li></ul><hr><p>应用场景：</p><ol><li>推送消息</li><li>关注列表</li></ol><h4 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h4><p>set 是 string 类型的集合，具有自动排序去重功能，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 可以判断某个成员是否在该 set 里，这个是 list 所不能提供的。</p><blockquote><p>set 的数据结构：</p><ul><li><p>如果是数字，则使用数组，查找的时候二分查找，但插入的复杂度是 O(N)</p></li><li><p>否则使用一个 value 为 null 的 hash 表，此时添加，删除，查找的复杂度都是 O(1)</p></li></ul></blockquote><ul><li><code>sadd k v1 v2 .....</code>：将一个或多个元素加入到集合 key 中，已经存在的元素将被忽略</li><li><code>smembers k</code>：取出该集合的所有值。</li><li><code>sismember k v</code>：判断 k 集合中是否含有 v 值；有则返回 1，没有则返回 0。</li><li><code>scard k</code>：返回该集合的元素个数。</li><li><code>srem k v1 v2 ....</code>：删除 k 集合中的元素。</li><li><code>spop k</code>：<strong>随机</strong>从该集合中吐出一个值。</li><li><code>smove src dst value</code>：把集合 src 中一个值移动到集合 dst 中</li><li><code>sinter k1 k2</code>：返回两个集合的<strong>交集</strong>元素。</li><li><code>sunion k1 k2</code>：返回两个集合的<strong>并集</strong>元素。</li><li><code>sdiff k1 k2</code>：返回两个集合的<strong>差集</strong>元素。(k1 中存在的，不包含 k2 的)</li></ul><hr><p>应用场景：</p><ol><li>抽奖活动</li><li>共同关注</li></ol><h4 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 hash"></a>哈希 hash</h4><p>hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于<strong>存储对象</strong>，类似 Java 里面的 Map&lt;String,Object&gt;。</p><p>hash 类型对应的数据结构是两种：<strong>ziplist，hashtable</strong>。当 field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。</p><ul><li><code>hset k field1 value1 field2 value2 ... </code>：批量设置 field-value<ul><li>k 通常表示一个对象，可以结合 id 使用，如<code>hset user:12 name hjh age 10</code></li></ul></li><li><code>hget k field</code>：从哈希表 k 的 field 取出 value</li><li><code>hexists k field</code>：查看哈希表 k 中，给定域 field 是否存在。</li><li><code>hkeys k</code>：列出该哈希表的所有 field</li><li><code>hvals k</code>：列出该哈希表的所有 value</li><li><code>hincrby k field increment</code>：为哈希表 k 中的 field 的 value 加上 increment</li><li><code>hsetnx k field value</code>：当 field 不存在时，设置哈希表 k 中的 field-value</li></ul><hr><p>应用场景：</p><ol><li>存放对象</li><li>购物车</li><li>收藏</li></ol><h4 id="有序集合-zset"><a href="#有序集合-zset" class="headerlink" title="有序集合 zset"></a>有序集合 zset</h4><p>有序集合 zset 与普通集合 set 非常相似，是一个没有重复元素的字符串集合。</p><p>不同之处是有序集合的每个成员 member 都关联了一个评分 score, zset 按照 score 进行排序（score 可以重复） 。因为元素是有序的，所以你也可以很快的根据评分 score 或者排名 range 来获取一个范围的元素。</p><p>zset 类似于 TreeMap，内部成员 member 会按照评分 score 进行排序。因此可以得到每个 member 的名次，还可以通过 score 的范围来获取 member。</p><ul><li><code>zadd k score1 mem1 score2 mem2 …</code>：将一个或多个 member 元素及其 score 值加入到有序集 k 当中。</li><li><code>zrange k s e [WITHSCORES]</code>：返回有序集 k 中，<strong>排名</strong>在[s, e]之间的 member。带 WITHSCORES，则分数一起返回。</li><li><code>zrangebyscore k min max [withscores] [limit offset count]</code>：返回有序集 k 中，所有 score 值介于 [min, max] 的成员。有序集成员按 <strong>score</strong> 值递增。<ul><li>可通过<code>(</code>指定开区间：<code>zrangebyscore k (1 5</code> 返回 k 中的 1 &lt; score &lt;&#x3D; 5 的成员</li></ul></li><li><code>zrevrangebyscore key maxmin [withscores] [limit offset count]</code>：同上，改为从大到小排列。</li><li><code>zincrby k n member</code>：为 member 的 score 加上 n</li><li><code>zrem k member</code>：删除该集合的 member</li><li><code>zcount k min max</code>：统计该集合，[min, max]区间内的元素个数</li><li><code>zrank k member</code>：返回 member 在集合中的排名，从 0 开始</li></ul><p>应用场景：</p><ol><li>点赞</li><li>排行榜</li></ol><hr><p>zset 底层使用了两个数据结构</p><ol><li><p>ziplist：第一个节点保存 member，第二个节点保存 score。ziplist 内的集合元素按 score 从小到大排序。</p><p><img src="/images/redis-zset.png" alt="image-20210709093008848"></p></li><li><p>skiplist：在 member 个数大于等于 128 时，使用 skiplist 存储数据。由 hash 表跟跳跃表实现。</p><ul><li>跳表的每个节点包含了 层高、score、指针（指向 member 在 hashtable 中地址）</li><li>跳表按 score 从小到大保存所有集合元素</li></ul></li></ol><p>跳跃表结构：</p><p><img src="/images/redis-skip-zset.png" alt="image-20210709093803448"></p><ul><li>每个节点的层高都是随机的</li><li>查询的时间复杂度为 O(logn)</li><li>插入，删除时间复杂度均为 O(logn)，最坏情况下时间复杂度为 O(n)</li><li>插入节点时需要记录每一层是从哪个节点下来的，方便新元素更新层高</li></ul><h3 id="新数据类型"><a href="#新数据类型" class="headerlink" title="新数据类型"></a>新数据类型</h3><h4 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h4><p>Bitmaps 这个“数据类型”可以实现对于 <strong>位</strong> 的操作：</p><p>Bitmaps 本身不是一种数据类型， 实际上它就是字符串，它可以对字符串的位进行操作。</p><p>可以把 Bitmaps 想象成一个以位为单位的数组， 数组的每个单元只能存储 0 和 1， 数组的下标在 Bitmaps 中叫做<strong>偏移量</strong>。</p><p><img src="/images/redis-bitmaps.png" alt="image-20210709165605401"></p><p>Bitmaps 常用于<strong>信息状态的统计</strong>，比如用户每天签到的记录，用户访问量等。</p><ul><li><p><code>setbit key offset value</code>：将 offset 的位置设为 value</p><ul><li><code>setbit users 9 1</code></li><li>在第一次初始化 Bitmaps 时，如果偏移量非常大，那么整个初始化过程执行会比较慢，可能会造成 Redis 阻塞。默认值为 0</li></ul></li><li><p><code>getbit key offset</code>：获取 offset 位置的值</p><ul><li><code>getbit user 9</code></li></ul></li><li><p><code>bitcount key [start] [end]</code>：计算指定范围内的 offset 位置值的和。</p><p>【注意】start 跟 end 表示的是下标，并不是位。</p><p>offset【01000001 01000000 00000000 00100001】对应下标【0，1，2，3】</p><p><code>bitcount k 0 1</code>：计算的是 01000001 01000000，返回 3</p></li><li><p><code>bitop and(or/not/xor) destKey key1 [key2...]</code>：对指定 key 按位进行交、并、非、异或操作并将结果保存在 destkey 中。</p><ul><li><p>比如 2020-11-03 日访问网站的 userid&#x3D;0,1,4,9。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">setbit users:<span class="hljs-number">20201103</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>setbit users:<span class="hljs-number">20201103</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>setbit users:<span class="hljs-number">20201103</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br>setbit users:<span class="hljs-number">20201103</span> <span class="hljs-number">9</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2020-11-04 日访问网站的 userid&#x3D;1,2,5,9。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">setbit users:<span class="hljs-number">20201104</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>setbit users:<span class="hljs-number">20201104</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br>setbit users:<span class="hljs-number">20201104</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br>setbit users:<span class="hljs-number">20201104</span> <span class="hljs-number">9</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后计算出两天都访问过网站的用户数量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">bitop and users:<span class="hljs-number">0403</span> users:<span class="hljs-number">20201103</span> users:<span class="hljs-number">20201104</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><p>Bitmaps 与 set 对比</p><p>假设网站有 1 亿用户， 每天独立访问的用户有 5 千万， 如果每天用集合类型和 Bitmaps 分别存储活跃用户可以得到表：</p><p><img src="/images/redis-bitmaps-set.png" alt="image-20210709172052851"></p><p>可以看出 bitmaps 所占用的内存小很多。但 bitmaps 需要把每个用户都存储下来。所以当该网站每天访问的用户很少时，Bitmaps 就有点不合时宜了</p><h4 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h4><p>HyperLogLog 是用来做基数统计的算法，其优点是：在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。需要注意的是，这里计算的基数是有误差的，不过误差在可以接受的范围内。</p><blockquote><p>何为基数？</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为 5。</p></blockquote><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而<strong>不会储存输入元素本身</strong>，所以 HyperLogLog 不能像集合那样返回输入的各个元素。</p><ul><li><code>pfadd key element1 [element2 ...]</code>：添加数据</li><li><code>pfcount key1 [key2 ...]</code>：统计基数</li><li><code>pfmerge destkey key1 [key2 ...]</code>：将多个 HyperLogLog 的基数合并到 destkey 中</li></ul><p><img src="/images/redis-hyperLog.png" alt="image-20210709174405306"></p><p><img src="/images/redis-hyperlog1.png" alt="image-20210709174411766"></p><h4 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h4><p>Redis 3.2 中增加了对 GEO 类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的 2 维坐标，在地图上就是经纬度。redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度 Hash 等常见操作。</p><ul><li><code>geoadd key 经度1 纬度1 member1 [经度2 纬度2 member2 ...]</code>：设置元素的坐标点</li><li><code>geopos key member1 [member2 ...]</code>：获取元素的坐标点</li><li><code>geodist key member1 member2 [m|km|ft|mi]</code>：计算坐标点的直线距离。可指定单位：m 米（默认值）、km 千米 、mi 英里 、ft 英尺。</li><li><code>georadius key 经度 纬度 r m|km|ft|mi [withcoord] [withdist] [count count]</code>：以给定的经纬度为中心，找出 半径 r 内的元素。</li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p style="text-align:center;">Units</p><ol><li>配置大小单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit</li><li>大小写不敏感</li></ol><p><img src="/images/redis-conf-units.png" alt="image-20210709221458712"></p><p style="text-align:center;">INCLUDE</p><p>导入配置文件，类似于 spring 的 import、jsp 中的 include。</p><p><img src="/images/redis-conf-include.png" alt="image-20210709221823280"></p><p style="text-align:center;">NETWORK</p><p>网络相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> = 127.0.0.1 <span class="hljs-comment"># 默认只接收本机的访问请求</span><br>protected-mode <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 保护模式，默认开启</span><br>port 6379 <span class="hljs-comment"># 端口号</span><br><span class="hljs-built_in">timeout</span> 0 <span class="hljs-comment"># 一个空闲的客户端维持多少秒会关闭，0表示关闭该功能，即不关闭客户端</span><br>tcp-keepalive 300 <span class="hljs-comment"># 每隔n秒检测一次客户端是否还活跃</span><br></code></pre></td></tr></table></figure><p style="text-align:center;">GENERAL</p><p>通用设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">daemonize <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 是否是守护线程，即后台启动。默认为no</span><br>pidfile /var/run/redis_6379.pid <span class="hljs-comment"># 若以后台运行则需要指定一个pid文件</span><br>loglevel notice <span class="hljs-comment"># 日志级别</span><br><span class="hljs-comment"># 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为notice</span><br>databases 16 <span class="hljs-comment"># 数据库的数量</span><br></code></pre></td></tr></table></figure><p style="text-align:center;">SNAPSHOTTING</p><p>快照相关设置：通常进行持久化设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">save 900 1 <span class="hljs-comment"># 900s内，如果至少一个key进行了修改，则进行持久化操作</span><br>save 300 10 <span class="hljs-comment"># 300s内，如果至少十个key进行了修改，则进行持久化操作</span><br>save 60 10000 <span class="hljs-comment"># 60s内，如果至少10000个key进行了修改，则进行持久化操作</span><br>stop-write-no-bgsave-error <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 持久化操作失败，是否继续工作</span><br>rdbchecksum <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 在存储快照后，进行数据校验，但是这样做会增加大约10%的性能消耗</span><br>rdbcompression <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 是否压缩rdb文件</span><br>dbfilename dump.rdb <span class="hljs-comment"># rbd默认的文件名</span><br><span class="hljs-built_in">dir</span> ./ <span class="hljs-comment"># rdb文件保存的目录</span><br></code></pre></td></tr></table></figure><p style="text-align:center;">SECURITY</p><p>安全设置</p><p>设置密码</p><ol><li><p>手动修改配置文件：添加<code>requirepass 密码</code></p><p><img src="/images/redis-conf-security.png" alt="image-20210709225421211"></p></li><li><p>命令的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">config <span class="hljs-built_in">set</span> requirepass 123456<br>config rewrite <span class="hljs-comment"># 写入配置文件中，不然重启就没了</span><br></code></pre></td></tr></table></figure></li></ol><p>当需要输入密码的时候：<code>auth 密码</code></p><p><img src="/images/redis-conf-security1.png" alt="image-20210709225710831"></p><p style="text-align:center;">LIMIT</p><p>限制设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">maxclients 10000 <span class="hljs-comment"># 设置redis同时可以与多少个客户端进行连接</span><br>maxmemory &lt;bytes&gt; <span class="hljs-comment"># 设置redis可以使用的最大内存量</span><br>maxmemory-policy noeviction <span class="hljs-comment"># 内存满了之后执行淘汰策略</span><br></code></pre></td></tr></table></figure><p>在 redis 中，允许用户设置的最大使用内存大小：64 位的电脑默认无限制，32 位的电脑默认不超过 3G。</p><blockquote><p>哪个命令可以查看内存情况？<code>info memory</code></p></blockquote><h3 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h3><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。客户端可以订阅任意数量的频道。</p><p><img src="/images/redis-pubsub-sub.png" alt="发布订阅"></p><p><img src="/images/redis-pubsub-pub.png" alt="发布订阅"></p><p>相关命令：</p><ul><li><code>subscribe channel</code>：订阅一个或者多个频道；</li><li><code>unsubscribe channel</code>：退订一个或者多个频道；</li><li><code>publish channel mes</code>：向通道发送消息；</li></ul><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>Redis 提供 2 个不同形式的持久化方式。</p><ul><li>RDB（Redis DataBase）：根据配置的规则定时将内存中的数据持久化到硬盘上。</li><li>AOF（Append Of File）：在每次执行<strong>写</strong>命令之后将命令记录到文件。</li></ul><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>在指定的<strong>时间间隔内</strong>将内存中的数据写入磁盘生成一个副本，该过程称作”快照”。 Redis 启动时会自动读取 RDB 快照文件。</p><p>Redis 默认会将快照文件存储在 Redis 当前进程的工作目录的 dump.rdb 文件中，可以通过配置文件中的 <code>dir</code> 和 <code>dbfilename</code> 两个参数分别指定快照文件的 存储路径 和 文件名。</p><p>优点：</p><ol><li>适合大规模的数据恢复</li><li>节省磁盘空间</li><li>最大化 redis 性能，因为父进程只需要 fork 子进程去保存文件</li></ol><p>缺点：</p><ol><li>内存中的数据被克隆一份，需要 2 倍的内存</li><li>存在数据丢失的情况</li></ol><h5 id="快照执行的过程"><a href="#快照执行的过程" class="headerlink" title="快照执行的过程"></a>快照执行的过程</h5><ol><li>Redis 使用 fork 函数复制一份当前进程（父进程）的副本（子进程）；</li><li>父进程继续处理来自客户端的请求，子进程开始将内存中的数据写入硬盘中的临时文件；</li><li>当子进程写完所有的数据后，用该临时文件替换旧的 RDB 文件，至此，一次快照操作完成。</li></ol><blockquote><p>fork 创建的新进程被称为子进程，拥有父进程数据空间、堆、栈等资源的副本。由于 RDB 文件存储的是执行 fork 操作那一刻的内存数据，而 fork 之后修改的数据不会写进 RDB 文件，所以 RDB 方式存在数据丢失的情况。</p></blockquote><h5 id="执行快照的场景"><a href="#执行快照的场景" class="headerlink" title="执行快照的场景"></a>执行快照的场景</h5><ol><li>根据配置自动快照</li><li>执行 SAVE 或 BGSAVE 命令<ul><li>当我们需要重启，迁移，备份 Redis 时，我们也可以手动执行 SAVE 或 BGSAVE 命令主动进行快照操作</li><li><strong>SAVE 命令</strong>：当执行 SAVE 命令时，Redis 同步进行快照操作，期间会阻塞所有来自客户端的请求，所以在写入数据较多时，应该避免使用该命令；</li><li><strong>BGSAVE 命令</strong>： 该命令的快照操作是在后台异步进行的，进行快照操作的同时还能处理来自客户端的请求。</li></ul></li><li>执行 FLUSHALL 命令</li><li>执行复制</li></ol><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>在使用 Redis 存储非临时数据时，一般都需要打开 AOF 持久化来降低数据丢失，AOF 可以将 Redis 执行的每一条<strong>写</strong>命令追加到硬盘文件中。redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p>默认情况下，Redis 没有开启 AOF（append only file）持久化功能，需要通过在配置文件中修改配置：<code>appendonly yes</code></p><p>AOF 文件保存路径和 RDB 文件路径是一致的，都是通过 dir 参数配置，默认文件名是：<code>appendonly.aof</code>，可以通过配置 appendonlyfilename 参数修改，如<code>appendonlyfilename appendonly.aof </code></p><blockquote><p>⚠️ 注意：AOF 和 RDB 同时开启，系统默认取 <strong>AOF</strong> 的数据。</p></blockquote><h5 id="AOF-持久化流程"><a href="#AOF-持久化流程" class="headerlink" title="AOF 持久化流程"></a>AOF 持久化流程</h5><ol><li>客户端的请求<strong>写</strong>命令会被 append 追加到 AOF 缓冲区内；</li><li>AOF 缓冲区根据 AOF 持久化策略[always, everysec, no] 将操作同步到磁盘的 AOF 文件中；</li><li>AOF 文件大小超过重写策略或手动重写时，会对 AOF 文件 rewrite 重写，压缩 AOF 文件容量；</li><li>Redis 服务重启时，会重新加载 AOF 文件中的写操作达到数据恢复的目的；</li></ol><h5 id="AOF-持久化策略"><a href="#AOF-持久化策略" class="headerlink" title="AOF 持久化策略"></a>AOF 持久化策略</h5><p>AOF 持久化策略（同步机制）需要在配置文件中进行设置：<code>appendfsync everysec</code></p><ul><li>always：始终同步，每次 Redis 的写入都会立刻记入日志；性能较差但数据完整性比较好。</li><li>everysec：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</li><li>no：redis 不主动进行同步，把同步时机交给操作系统。对大多数 Linux 操作系统，是每 30 秒进行一次 fsync，将缓冲区中的数据写到磁盘上。</li></ul><h5 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h5><p>AOF 采用文件追加方式，文件会越来越大。为避免出现此种情况，新增了重写机制，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩， 只保留可以恢复数据的最小指令集。比如前面两个命令会被第三个命令覆盖，所以 AOF 文件只会保留第三个命令。或者两个命令可以合成一个命令。</p><p>什么时候会重写？</p><p>AOF 大小超过阈值，并且与上一次重写后的大小的比值达到百分比 时触发重写。</p><p><strong>tips</strong>：redis 会记录上一次重写后的大小。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">auto-aof-rewrite-percentage <span class="hljs-number">100</span> # 百分比<br>auto-aof-rewrite-min-size <span class="hljs-number">64</span>mb # 阈值<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 文件达到 70MB 开始重写，降到 50MB，下次什么时候开始重写？100MB</li></ul><hr><p>重写原理：</p><ol><li>Redis 调用 fork 创建子进程执行重写操作，父进程继续处理客户端请求。</li><li>父进程将写命令追加 AOF 缓冲区中，同时缓存到重写空间中。这样可以保证子进程如果重写失败，原文件不会出现问题。</li><li>当子进程完成对新 AOF 文件重写之后通知父进程，父进程就将重写空间中的命令写入到新 AOF 文件中。</li><li>父进程将新 AOF 文件替换旧的 AOF 文件并重命名，后续的命令追加到新的 AOF 文件中。</li></ol><h5 id="文件损坏恢复"><a href="#文件损坏恢复" class="headerlink" title="文件损坏恢复"></a>文件损坏恢复</h5><p>遇到 AOF 文件损坏，通过 redis 目录下的<code>redis-check-aof</code> 的工具，使用命令<code>redis-check-aof --fix 文件名称</code> 进行修复。需要重启 redis。</p><h4 id="用哪个好"><a href="#用哪个好" class="headerlink" title="用哪个好"></a>用哪个好</h4><p>官方推荐两个都启用。</p><p>如果只是做纯内存缓存，可以都不用。</p><p>如果对数据不敏感，可以选单独用 RDB。</p><p>不建议单独用 AOF，因为可能会出现 Bug。</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主机 master 数据更新后根据配置和策略自动同步到从机 slave，<strong>Master</strong>以<strong>写</strong>为主，<strong>Slave</strong>以<strong>读</strong>为主。</p><p>主从刚刚连接的时候，进行全量同步；全量同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p><p>好处：</p><ol><li>读写分离，性能扩展</li><li>可以对数据进行备份。</li><li>容灾快速恢复：一个从机挂了，可以很快速的恢复到与主机同步的数据。</li></ol><p><img src="/images/reids-master-slave-copy.png" alt="image-20210710192938290"></p><h4 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h4><ol><li>Slave 启动成功连接到 master 后会发送一个 sync 命令</li><li>Master 接到命令开始执行 BGSAVE 命令生成 RDB 文件 并 使用缓冲区记录此后执行的所有写命令，BGSAVE 命令执行完之后，master 将快照文件传送到 slave。slave 服务在接收到数据库文件后，将其存盘并加载到内存中。此过程称为<strong>全量同步</strong>。</li><li><strong>增量同步</strong>：全量同步之后，Master 将新的所有收集到的修改命令依次传给 slave，完成增量同步。</li><li>如果有 slave 断线，重启之后不会自动连上 matser，此时自己为 master。手动变成从机之后，会发送 sync 请求和主机全量同步。</li></ol><p>从机也可以有自己的从机，但自己断线之后，自己的从机们都无法接收到主机的数据。假设从机 2 归属于从机 1，此时如果从机 1 断线了，那么从机 2 将无法获取到主机的数据。</p><p><img src="/images/redis-master-slave-copy1.jpg" alt="preview"></p><h4 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">Q</span>：从机可以进行写操作？<br><span class="hljs-selector-tag">A</span>：一般不可以。但可以通过配置文件让从服务器然后支持写操作。<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">Q：主机<span class="hljs-keyword">shutdown</span>后情况如何？从机是上位还是原地待命？<br>A：主机<span class="hljs-keyword">shutdown</span>后，从机不会做任何事情，当主机重新连接之后一切照常。在主机断线的时候，从机可以使用slaveof <span class="hljs-keyword">no</span> one命令成为主机。<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Q：主机会将数据保存在rdb文件中然后发送给<span class="hljs-literal">slave</span>服务器，但是如果主机上的磁盘空间有限怎么办呢？<br>A：<span class="hljs-literal">master</span>直接开启一个socket将rdb文件发送给<span class="hljs-literal">slave</span>服务器。<br></code></pre></td></tr></table></figure><h4 id="搭建主从复制"><a href="#搭建主从复制" class="headerlink" title="搭建主从复制"></a>搭建主从复制</h4><ol><li><p>Appendonly 关掉或者在每个配置文件中修改 appendfilename</p></li><li><p>新建多个配置文件（每个配置文件相当于一台机器），每次文件编写以下配置。</p><p>如 redis6379.conf</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">include /myredis/redis.conf # 固定<br>pidfile /var/run/redis_6379.pid # redis_XXX修改成跟配置文件名一样<br>port <span class="hljs-number">6379</span> # 每个配置文件的端口号<br>dbfilename dump6379.rdb  # dumpXXX.rdb修改成跟配置文件名一样<br></code></pre></td></tr></table></figure><p>redis6380.conf</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">include /myredis/redis.conf # 固定<br>pidfile /var/run/redis_6380.pid # redis_XXX修改成跟配置文件名一样<br>port <span class="hljs-number">6380</span> # 每个配置文件的端口号<br>dbfilename dump6380.rdb  # dumpXXX.rdb修改成跟配置文件名一样<br></code></pre></td></tr></table></figure><p>redis6381.conf</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">include /myredis/redis.conf # 固定<br>pidfile /var/run/redis_6381.pid # redis_XXX修改成跟配置文件名一样<br>port <span class="hljs-number">6381</span> # 每个配置文件的端口号<br>dbfilename dump6381.rdb  # dumpXXX.rdb修改成跟配置文件名一样<br></code></pre></td></tr></table></figure></li><li><p>启动三台 redis 服务器</p><p><img src="/images/redis-master-slave-copy2.png" alt="image-20210710203241308"></p><p>可以使用<code>info replication</code>命令打印主从复制的相关信息</p></li><li><p>配置从机：<code>slaveof ip port</code></p><p>在 6380 和 6381 上执行: <code>slaveof 127.0.0.1 6379</code> 此时这两台主机变成 6379 的从机</p></li><li><p>搭建完成。</p></li></ol><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>Redis 主从复制的作用有数据热备、负载均衡、故障恢复等；但<strong>主从复制存在的一个问题是故障恢复无法自动化</strong>。</p><p>哨兵（sentinel）是基于 Redis 主从复制，<strong>解决主机故障恢复的自动化问题</strong>，进一步提高系统的高可用性。</p><p>哨兵是一个独立的进程，通过发送 PING 命令，让 Redis 服务器返回其运行状态。当哨兵监测到 master 断线之后，会自动将 slave 切换成 master，然后通过<strong>发布订阅模式</strong>通知其他的 slave 修改配置文件，让它们更改主机。</p><p>一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵对 Redis 服务器进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img src="/images/redis-sentinel.webp" alt="多哨兵模式"></p><p>哨兵模式下，主从服务器的切换过程：</p><p>假设主服务器断线，哨兵 1 先检测到这个结果，系统并不会马上进行主从切换，仅仅是哨兵 1 主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。</p><p>当后面的哨兵也检测到主服务器不可用，并且达到一定数量时，就会认为该服务器是真的不可以用了，这个现象称为<strong>客观下线</strong>。</p><p>此时哨兵之间会进行一次投票选出一个哨兵，它会在断线的 master 下所有 slave 中选取一个 slave 作为新 master。切换成功后，向剩余的 slave 节点发送命令，让他们成为新 master 节点的 slave 节点。（原来的 master 会变成 slave）</p><p>选取 slave 作为 master 的依据：</p><ol><li>选择 replica-priority(slave 节点优先级)最高的 slave 节点，如果存在则返回,不存在则继续下一步判断</li><li>选择偏移量最大(获得原主机数据最全的)的 slave 节点，如果存在则返回，不存在则继续</li><li>选择 runId 最小的 slave 节点(启动最早的节点)</li></ol><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>在哨兵模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis 3.0 上加入了 无中心化集群(Cluster) 集群模式，实现了 Redis 的分布式存储，也就是说每台 Redis 节点上存储不同的内容。</p><p>Redis 集群实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布存储在这 N 个节点中，每个节点存储总数据的 1&#x2F;N。即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><blockquote><p>使用集群时需要在配置文件中做如下配置：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cluster-enabled yes  # 打开集群模式<br>cluster-config-file nodes-<span class="hljs-number">6379</span>.conf # 设定节点配置文件名<br>cluster-node-timeout <span class="hljs-number">15000</span> # 设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换<br></code></pre></td></tr></table></figure></blockquote><p>集群的工作方式</p><p>在 Redis 的每一个节点上都有一个插槽（slot），插槽总的取值范围是：0-16383，插槽的数量平均分布到每个节点。</p><p><img src="/images/redis-cluster.png" alt="image-20210710232850359"></p><p>当我们的存取的 Key 到达的时候，Redis 会根据 crc16 算法得出一个值，然后对 16384 取余。这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，找到对应的插槽所对应的节点，然后自动跳转到这个对应的节点上进行操作。</p><p>为了保证高可用，集群引入了主从模式，一个主节点对应一个或者多个从节点，当主节点断线的时候，就会启用从节点。当其它主节点 ping 此主节点时，如果半数以上的主节点与此主节点通信超时，那么认为主节点 A 断线了，此时会进行主从切换。</p><p>好处：</p><ol><li>实现扩容</li><li>分摊压力</li><li>无中心配置相对简单</li></ol><p>缺点：</p><ol><li><strong>多键操作是不被支持的</strong></li><li>lua 脚本不被支持</li><li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至 redis cluster，需要整体迁移而不是逐步过渡，复杂度较大</li></ol><h2 id="Redis-应用"><a href="#Redis-应用" class="headerlink" title="Redis 应用"></a>Redis 应用</h2><h3 id="整合-springboot"><a href="#整合-springboot" class="headerlink" title="整合 springboot"></a>整合 springboot</h3><ol><li><p>在 pom.xml 文件中引入 redis 相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>application.properties 配置 redis 配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Redis服务器地址</span><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">IP地址</span><br><span class="hljs-comment"># Redis服务器连接端口</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">端口</span><br><span class="hljs-comment"># Redis数据库索引（默认为0）</span><br><span class="hljs-attr">spring.redis.database</span>= <span class="hljs-string">0</span><br><span class="hljs-comment"># 连接超时时间（毫秒）</span><br><span class="hljs-attr">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-comment"># 最大阻塞等待时间(负数表示没限制)</span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment"># 连接池中的最大空闲连接</span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"># 连接池中的最小空闲连接</span><br><span class="hljs-attr">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure></li><li><p>添加 redis 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        template.setConnectionFactory(factory);<br><span class="hljs-comment">// key序列化方式</span><br>        template.setKeySerializer(redisSerializer);<br><span class="hljs-comment">// value序列化</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br><span class="hljs-comment">// value hashmap序列化</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(<br>            Object.class<br>        );<br><span class="hljs-comment">// 解决查询缓存转换异常的问题</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br><span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig()<br>            .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>            .serializeKeysWith(<br>            RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer)<br>        ).serializeValuesWith(<br>            RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)<br>        ).disableCachingNullValues();<br><br>        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试使用：使用<code>redisTemplate.opsForValue()</code>来操作 redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/redisTest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTestController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedis</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置值到redis</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;hjh&quot;</span>);<br>        <span class="hljs-comment">// 从redis获取值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="redis-JavaAPI"><a href="#redis-JavaAPI" class="headerlink" title="redis-JavaAPI"></a>redis-JavaAPI</h3><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透：key 对应的数据在数据源中并不存在，那么每次针对此 key 的请求在缓存中都获取不到，接着会去请求数据源，从而可能压垮数据源。比如用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p><img src="/images/redis-cache-chuanTou.png" alt="缓存穿透"></p><p>解决方案：</p><ol><li><strong>对空值缓存</strong>：如果一个查询返回的数据为空（不管 key 是否存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</li><li><strong>采用布隆过滤器</strong>：将所有存在的 key 哈希到一个足够大的 bitmaps 中，一个一定不存在的数据会被 这个 bitmaps 拦截掉，从而避免了对底层存储系统的查询压力。<ul><li>查询一个 key 时，将 key 映射到 bitmaps 上，只要映射的位置有一个 bit 为 0，说明此 key 肯定不存在。</li></ul></li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿：key 对应的数据存在，但在 redis 中过期，若此时有大量并发请求此 key 的数据，由于 redis 中该 key 已过期，不得不去访问数据源，此时可能会瞬间把数据库压垮。</p><p><img src="/images/redis.cache-jiChuan.png" alt="缓存击穿"></p><p>解决方案：</p><ol><li><strong>预先设置热门数据</strong>：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</li><li><strong>过期前先去获取数据</strong>：在热门数据过期前，先去数据库中获取数据放入缓存中。</li><li><strong>使用锁</strong>：缓存失效后重新获取缓存时进行上锁。</li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是多个 key 的缓存击穿版本。即缓存雪崩是多个 key 缓存过期的情况，而缓存击穿是某一个 key 缓存过期。</p><p>解决方案：</p><ol><li><strong>构建多级缓存架构</strong>：nginx 缓存 + redis 缓存 +其他缓存</li><li><strong>将缓存失效时间分散开</strong>：在原有的失效时间基础上增加一个随机失效时间，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li></ol><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><strong>场景</strong>：在分布式系统中，需要操作共享资源。</p><p>Java 中的锁，只能保证在同一个 JVM 进程内中执行。如果在分布式集群环境下呢，不同的主机要怎么知道这把锁？</p><p>实现分布式锁的方式：</p><ol><li>redis 的方式实现分布式锁。已有线程框架 Redission 实现。</li><li>基于 zookeeper</li><li>Mysql 的主键或唯一键</li></ol><hr><p>其实 redis 实现分布式锁很简单，就是采用<code>set</code> 命令生成一把锁，然后我们利用这把锁进行操作而已。</p><p>生成锁：<code>SET lock_key random_value nx px t</code></p><ul><li><p>lock_key：锁的名字</p></li><li><p>random_value：锁的值。最好弄成随机的，例如 uuid，不然会造成锁的误删。</p></li><li><p>nx：相当于 setnx。只在键不存在时，才对键进行设置操作。</p></li><li><p>px t：设置过期时间，t 的单位是<strong>毫秒</strong>。</p></li><li><p><input checked="" disabled="" type="checkbox"> 问题来了：</p></li></ul><ol><li><p>为什么要设置过期时间？<strong>防止锁一直不释放</strong>。</p></li><li><p>为什么不直接使用 setnx 的方式？<strong>因为 setnx 跟 expire t 是两个操作，并不是一个原子操作，多线程下会出错</strong>。</p></li><li><p>为什么要锁的值最好要设为 uuid？如果不判断锁的 value 直接解锁的话，当这台服务器卡住了之后，并且锁的过期时间到了，此时这把锁被其他服务器的线程获取，接着这台服务器恢复了，继续操作，操作完释放锁，此时释放的是其他服务器的线程的锁，因为没有对锁的 value 进行判断，所以所有请求使用的锁都是同一把。</p></li></ol><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-comment">// set命令的参数</span><br>    <span class="hljs-type">SetParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> SetParams.setParams().nx().px(<span class="hljs-number">3000</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;lock_key&quot;</span>, uuid, params);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;OK&quot;</span>.equals(lock))&#123;<br>        System.out.println(<span class="hljs-string">&quot;获取到了锁，可以进行操作&quot;</span>);<br>        <span class="hljs-comment">// 对锁的value值进行判断。</span><br>        <span class="hljs-keyword">if</span>(uuid.equals(jedis.get(<span class="hljs-string">&quot;lock_key&quot;</span>)))&#123;<br>            System.out.println(<span class="hljs-string">&quot;正在释放锁。。。&quot;</span>);<br>            jedis.del(<span class="hljs-string">&quot;lock_key&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目前有锁，请等待&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种极端的情况就是，在第 10 行或者删除 key 的过程中（此时 key 还没删掉），电脑卡机了，然后到了过期时间，这把锁被其他线程获取了，接着电脑好了，继续执行删除 key 的操作。此时就会出现删错 key 的情况。虽然这种情况很极端，也很少出现，但是存在。</p><p>解决方案是 在 key 没有被主动 del 的情况下，开启一个线程定时的给 key 加过期时间。该方法可以用 lua 脚本实现，&#x3D;&#x3D;redisson 这个框架已经帮我们封装好了，可以直接像 lock 一样直接加锁解锁即可&#x3D;&#x3D;。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">redisson.lock();<br><span class="hljs-comment">// 业务逻辑</span><br>redisson.unlock();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZookKeeper</title>
    <link href="/2024/04/25/ZookKeeper/"/>
    <url>/2024/04/25/ZookKeeper/</url>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><ol><li><p>Zookeeper 是 Apache Hadoop 项目下的一个子项目，是一个树形目录服务。</p></li><li><p>Zookeeper 翻译过来就是 动物园管理员，他是用来管 Hadoop（大象）、Hive(蜜蜂)、Pig(小 猪)的管理员。简称 zk</p></li><li><p>Zookeeper 是一个分布式的、开源的分布式应用程序的协调服务。</p></li><li><p>Zookeeper 提供的主要功能包括：</p><blockquote><ul><li>配置管理</li><li>分布式锁</li><li>集群管理</li></ul></blockquote></li></ol><h3 id="1-1、解压"><a href="#1-1、解压" class="headerlink" title="1.1、解压"></a>1.1、解压</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxvf apache-ZooKeeper-x.x.x-bin.tar.gz<br></code></pre></td></tr></table></figure><h3 id="1-2、配置"><a href="#1-2、配置" class="headerlink" title="1.2、配置"></a>1.2、配置</h3><blockquote><p>配置 <code>zoo.cfg</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">1、步骤<br><span class="hljs-comment">#进入到 conf 目录</span><br><span class="hljs-built_in">cd</span> /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/<br><span class="hljs-comment">#拷贝</span><br><span class="hljs-built_in">cp</span> zoo_sample.cfg  zoo.cfg<br><br>2、步骤<br><span class="hljs-comment">#打开目录</span><br><span class="hljs-built_in">cd</span> /opt/zooKeeper/<br><span class="hljs-comment">#创建 zooKeeper 存储目录</span><br><span class="hljs-built_in">mkdir</span> zkdata<br><span class="hljs-comment">#修改 zoo.cfg</span><br>vim /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/zoo.cfg<br><br>3、步骤<br><span class="hljs-comment"># 修改存储目录</span><br>dataDir=/opt/zookeeper/zkdata<br></code></pre></td></tr></table></figure><p>启动 <code>ZooKeeper</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#启动</span><br>./zkServer.sh start<br><br><span class="hljs-comment"># 查看ZooKeeper状态</span><br>./zkServer.sh status<br></code></pre></td></tr></table></figure></blockquote><h2 id="2、ZooKeeper-命令操作"><a href="#2、ZooKeeper-命令操作" class="headerlink" title="2、ZooKeeper 命令操作"></a>2、ZooKeeper 命令操作</h2><h3 id="2-1、ZooKeeper-数据模型"><a href="#2-1、ZooKeeper-数据模型" class="headerlink" title="2.1、ZooKeeper 数据模型"></a>2.1、ZooKeeper 数据模型</h3><ol><li><p><code>ZooKeeper</code> 是一个树形目录服务,其数据模型和 Unix 的文件系统目录树很类似，拥有一个层次化结构。</p></li><li><p>这里面的每一个节点都被称为： <code>ZNode</code>，每个节点上都会保存自己的数据和节点信息。</p></li><li><p>节点可以拥有子节点，同时也允许少量（1MB）数据存储在该节点之下。</p></li><li><p>节点可以分为四大类：</p><blockquote><ul><li>PERSISTENT 持久化节点</li><li>EPHEMERAL 临时节点 ：-e</li><li>PERSISTENT_SEQUENTIAL 持久化顺序节点 ：-s</li><li>EPHEMERAL_SEQUENTIAL 临时顺序节点 ：-es</li></ul></blockquote></li></ol><h3 id="2-2、Zookeeper-服务端常用命令"><a href="#2-2、Zookeeper-服务端常用命令" class="headerlink" title="2.2、Zookeeper 服务端常用命令"></a>2.2、Zookeeper 服务端常用命令</h3><ul><li>启动 <code>ZooKeeper</code> 服务: .&#x2F;zkServer.sh start</li><li>查看 <code>ZooKeeper</code> 服务状态: .&#x2F;zkServer.sh status</li><li>停止 <code>ZooKeeper</code> 服务: .&#x2F;zkServer.sh stop</li><li>重启 <code>ZooKeeper</code> 服务: .&#x2F;zkServer.sh restart</li></ul><h3 id="2-3、Zookeeper-客户端常用命令"><a href="#2-3、Zookeeper-客户端常用命令" class="headerlink" title="2.3、Zookeeper 客户端常用命令"></a>2.3、Zookeeper 客户端常用命令</h3><h4 id="2-3-1、结点数据信息解析"><a href="#2-3-1、结点数据信息解析" class="headerlink" title="2.3.1、结点数据信息解析"></a>2.3.1、结点数据信息解析</h4><blockquote><ul><li>czxid：节点被创建的事务 ID</li><li>ctime: 创建时间</li><li>mzxid: 最后一次被更新的事务 ID</li><li>mtime: 修改时间</li><li>pzxid：子节点列表最后一次被更新的事务 ID</li><li>cversion：子节点的版本号</li><li>dataversion：数据版本号</li><li>aclversion：权限版本号</li><li>ephemeralOwner：用于临时节点，代表临时节点的事务 ID，如果为持久节点则为 0</li><li>dataLength：节点存储的数据的长度</li><li>numChildren：当前节点的子节点个数</li></ul></blockquote><h4 id="2-3-2、命令"><a href="#2-3-2、命令" class="headerlink" title="2.3.2、命令"></a>2.3.2、命令</h4><blockquote><ul><li><p>连接<code>ZooKeeper</code>服务端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./zkCli.sh –server ip:port<br></code></pre></td></tr></table></figure></li><li><p>断开连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">quit<br></code></pre></td></tr></table></figure></li><li><p>查看命令帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure></li><li><p>显示指定目录下节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> 目录<br></code></pre></td></tr></table></figure></li><li><p>创建节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">create /节点path value<br></code></pre></td></tr></table></figure></li><li><p>获取节点值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">get /节点path<br></code></pre></td></tr></table></figure></li><li><p>设置节点值</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">set</span> /节点<span class="hljs-built_in">path</span> value<br></code></pre></td></tr></table></figure></li><li><p>删除单个节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">delete /节点path<br></code></pre></td></tr></table></figure></li><li><p>删除带有子节点的节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">deleteall /节点path<br></code></pre></td></tr></table></figure></li><li><p>创建临时节点</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> -<span class="hljs-built_in">e</span> /节点<span class="hljs-keyword">path</span> <span class="hljs-keyword">value</span><br></code></pre></td></tr></table></figure></li><li><p>创建顺序节点</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">create</span> -s /节点<span class="hljs-built_in">path</span> value<br></code></pre></td></tr></table></figure></li><li><p>查询节点详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> –s /节点path<br></code></pre></td></tr></table></figure></li></ul></blockquote><h2 id="3、Java-API-操作"><a href="#3、Java-API-操作" class="headerlink" title="3、Java API 操作"></a>3、Java API 操作</h2><h3 id="3-1、Curator"><a href="#3-1、Curator" class="headerlink" title="3.1、Curator"></a>3.1、Curator</h3><p>官网：<a href="http://curator.apache.org/">Curator </a></p><ol><li><p>Curator 是 Apache <code>ZooKeeper</code> 的 Java 客户端库。</p></li><li><p>常见的<code>ZooKeeper</code> Java API ：</p><blockquote><ul><li>原生 Java API</li><li>ZkClient</li><li>Curator</li></ul></blockquote></li><li><p>Curator 项目的目标是简化 <code>ZooKeeper</code> 客户端的使用。</p></li></ol><h3 id="3-2、Curator-API-常用操作"><a href="#3-2、Curator-API-常用操作" class="headerlink" title="3.2、Curator API 常用操作"></a>3.2、Curator API 常用操作</h3><h4 id="3-2-1、建立连接"><a href="#3-2-1、建立连接" class="headerlink" title="3.2.1、建立连接"></a>3.2.1、建立连接</h4><h4 id="3-2-2、添加节点"><a href="#3-2-2、添加节点" class="headerlink" title="3.2.2、添加节点"></a>3.2.2、添加节点</h4><h4 id="3-2-3、删除节点"><a href="#3-2-3、删除节点" class="headerlink" title="3.2.3、删除节点"></a>3.2.3、删除节点</h4><h4 id="3-2-4、修改节点"><a href="#3-2-4、修改节点" class="headerlink" title="3.2.4、修改节点"></a>3.2.4、修改节点</h4><h4 id="3-2-5、查询节点"><a href="#3-2-5、查询节点" class="headerlink" title="3.2.5、查询节点"></a>3.2.5、查询节点</h4><h4 id="3-2-6、Watch-事件监听"><a href="#3-2-6、Watch-事件监听" class="headerlink" title="3.2.6、Watch 事件监听"></a>3.2.6、Watch 事件监听</h4><ol><li><p><code>ZooKeeper</code> 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，<code>ZooKeeper</code> 服务端会将事件通知到感兴趣的客户端上去，该机制是 <code>ZooKeeper</code> 实现分布式协调服务的重要特性。</p></li><li><p><code>ZooKeeper</code> 中引入了 Watcher 机制来实现了发布&#x2F;订阅功能能，能够让多个订阅者同时监听某一个对象，当一个对象自身状态变化时，会通知所有订阅者</p></li><li><h4 id="ZooKeeper-提供了三种-Watcher"><a href="#ZooKeeper-提供了三种-Watcher" class="headerlink" title="ZooKeeper 提供了三种 Watcher"></a><code>ZooKeeper</code> 提供了三种 Watcher</h4></li></ol><blockquote><ul><li>NodeCache : 只是监听某一个特定的节点</li><li>PathChildrenCache : 监控一个 ZNode 的子节点.</li><li>TreeCache : 可以监控整个树上的所有节点，类似于 PathChildrenCache 和 NodeCache 的组合</li></ul></blockquote><h4 id="3-2-7、分布式锁"><a href="#3-2-7、分布式锁" class="headerlink" title="3.2.7、分布式锁"></a>3.2.7、分布式锁</h4><p>Curator 的五种锁方案：</p><blockquote><ul><li>InterProcessSemaphoreMutex：分布式排它锁（非可重入锁）</li><li>InterProcessMutex：分布式可重入排它锁</li><li>InterProcessReadWriteLock：分布式读写锁</li><li>InterProcessMultiLock：将多个锁作为单个实体管理的容器</li><li>InterProcessSemaphoreV2：共享信号量</li></ul></blockquote><h3 id="3-3、分布式锁"><a href="#3-3、分布式锁" class="headerlink" title="3.3、分布式锁"></a>3.3、分布式锁</h3><p>⚠️ 分布式锁的应用场景：处理种跨机器的进程之间的数据同步问题</p><p>ZooKeeper 分布式锁原理</p><blockquote><h6 id="核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点。"><a href="#核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点。" class="headerlink" title="核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点。"></a>核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点。</h6><ol><li>客户端获取锁时，在 lock 节点下创建临时顺序节点。</li><li>然后获取 lock 下面的所有子节点，客户端获取到所有的子节点之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。使用完锁后，将该节点删除。</li><li>如果发现自己创建的节点并非 lock 所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，同时对其注册事件监听器，监听删除事件。</li><li>如果发现比自己小的那个节点被删除，则客户端的 Watcher 会收到相应通知，此时再次判断自己创建的节点是否是 lock 子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听。</li></ol></blockquote><h2 id="4、集群搭建"><a href="#4、集群搭建" class="headerlink" title="4、集群搭建"></a>4、集群搭建</h2><h3 id="4-1、集群介绍"><a href="#4-1、集群介绍" class="headerlink" title="4.1、集群介绍"></a>4.1、集群介绍</h3><h4 id="4-1-1、Leader-选举"><a href="#4-1-1、Leader-选举" class="headerlink" title="4.1.1、Leader 选举"></a>4.1.1、Leader 选举</h4><blockquote><ol><li><p>Serverid：服务器 ID</p><p>比如有三台服务器，编号分别是 1、2、3。编号越大在选择算法中的权重越大。</p></li><li><p>Zxid：数据 ID</p><p>服务器中存放的最大数据 ID 值越大说明数据越新，在选举算法中数据越新权重越大。</p></li><li><p>在 Leader 选举的过程中，如果某台 ZooKeeper 获得了超过半数的选票，则此 ZooKeeper 就可以成为 Leader 了。</p></li></ol></blockquote><h4 id="4-1-2、集群角色"><a href="#4-1-2、集群角色" class="headerlink" title="4.1.2、集群角色"></a>4.1.2、集群角色</h4><blockquote><p>ZooKeeper 集群服务中的三种角色：</p><ol><li><p>Leader 领导者</p><ul><li><p>处理事务请求</p></li><li><p>集群内部各服务器的调度者</p></li></ul></li><li><p>Follower 跟随者</p><ul><li><p>处理客户端非事务请求，转发事务请求给 Leader 服务器</p></li><li><p>参与 Leader 选举投票</p></li></ul></li><li><p>Observer 观察者：</p><ul><li>处理客户端非事务请求，转发事务请求给 Leader 服务器</li></ul></li></ol></blockquote><h3 id="4-2、集群搭建"><a href="#4-2、集群搭建" class="headerlink" title="4.2、集群搭建"></a>4.2、集群搭建</h3><h4 id="4-2-1、准备"><a href="#4-2-1、准备" class="headerlink" title="4.2.1、准备"></a>4.2.1、准备</h4><blockquote><ol><li><p>将解压后目录复制多份</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> -r  apache-zookeeper-x.x.x-bin /usr/local/zookeeper-cluster/zookeeper-1<br><span class="hljs-built_in">cp</span> -r  apache-zookeeper-x.x.x-bin /usr/local/zookeeper-cluster/zookeeper-2<br><span class="hljs-built_in">cp</span> -r  apache-zookeeper-x.x.x-bin /usr/local/zookeeper-cluster/zookeeper-3<br></code></pre></td></tr></table></figure></li><li><p>修改启动端口及存储目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cfg"># 启动端口<br>clientPort=2181<br># 存储目录<br>dataDir=/usr/local/zookeeper-cluster/zookeeper-1/data<br></code></pre></td></tr></table></figure></li></ol></blockquote><h4 id="4-2-2、配置集群"><a href="#4-2-2、配置集群" class="headerlink" title="4.2.2、配置集群"></a>4.2.2、配置集群</h4><ol><li><p>在每个 zookeeper 的 data 目录下创建一个 myid 文件（记录每个服务器的 ID）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 1 &gt;/usr/local/zookeeper-cluster/zookeeper-1/data/myid<br><span class="hljs-built_in">echo</span> 2 &gt;/usr/local/zookeeper-cluster/zookeeper-2/data/myid<br><span class="hljs-built_in">echo</span> 3 &gt;/usr/local/zookeeper-cluster/zookeeper-3/data/myid<br></code></pre></td></tr></table></figure></li><li><p>在每一个 zookeeper 的 zoo.cfg 配置客户端访问端口（clientPort）和集群服务器 IP 列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg<br>vim /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg<br>vim /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg<br><br>server.1=x.x.x.x:2881:3881<br>server.2=x.x.x.x:2882:3882<br>server.3=x.x.x.x:2883:3883<br></code></pre></td></tr></table></figure><p>解释：server.服务器 ID &#x3D; 服务器 IP 地址 : 服务器之间通信端口 : 服务器之间投票选举端口</p></li></ol><p>server.服务器 ID&#x3D;服务器 IP 地址：服务器之间通信端口：服务器之间投票选举端口</p><h4 id="4-2-3、启动集群"><a href="#4-2-3、启动集群" class="headerlink" title="4.2.3、启动集群"></a>4.2.3、启动集群</h4><ul><li><p>启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start<br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start<br>/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start<br></code></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status<br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status<br>/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status<br></code></pre></td></tr></table></figure></li><li><p>停止</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh stop<br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh stop<br>/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh stop<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>ZookKeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zuul-Gateway</title>
    <link href="/2024/04/25/Zuul-Gateway/"/>
    <url>/2024/04/25/Zuul-Gateway/</url>
    
    <content type="html"><![CDATA[<h1 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h1><h2 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h2><p>Zuul 提供了动态路由、监控、弹性负载和安全功能。Zuul 底层利用各种 Filter 实现如下功能：</p><ul><li>认证和安全：识别每个需要认证的资源，拒绝不符合要求的请求。</li><li>性能监测：在服务边界追踪并统计数据，提供精确的生产视图。</li><li>动态路由：根据需要将请求动态路由到后端集群。</li><li>压力测试：逐渐增加对集群的流量以了解其性能。</li><li>负载卸载：预先为每种类型的请求分配容量，当请求超过容量时自动丢弃。</li><li>静态资源处理：直接在边界返回某些响应。</li></ul><h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><h4 id="1、创建-zuul-gateway-的工程并引入依赖"><a href="#1、创建-zuul-gateway-的工程并引入依赖" class="headerlink" title="1、创建 zuul-gateway 的工程并引入依赖"></a>1、创建 zuul-gateway 的工程并引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--zuul的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--eureka-client--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、创建应用主类"><a href="#2、创建应用主类" class="headerlink" title="2、创建应用主类"></a>2、创建应用主类</h4><p>使用 @EnableZuulProxy 注解开启 Zuul 的 API 网关服务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableZuulProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZuulGatewayApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(ZuulGatewayApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 application.yaml 配置文件中配置 Zuul 应用的基础信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9010</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">zuul-gateway</span><br><br><span class="hljs-comment"># 指定Eureka server的注册中心的位置，出来将Zuul的注册成服务之外，也让Zuul能够获取注册中心的实例清单</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka-server:9001/eureka/</span><br><br><span class="hljs-comment">#Zuul实现的传统的路由配置</span><br><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">hello-server-url:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/hello-server/**</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">http://localhost:9000</span><br><br><span class="hljs-comment"># Zuul面向服务的配置服务</span><br><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">api-hello-server:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/hello-server/**</span><br>      <span class="hljs-attr">service-id:</span> <span class="hljs-string">hello-server</span><br>    <span class="hljs-attr">api-customer-server:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/customer-server/**</span><br>      <span class="hljs-attr">service-id:</span> <span class="hljs-string">customer-server</span><br></code></pre></td></tr></table></figure><h1 id="SpringCloudGateway"><a href="#SpringCloudGateway" class="headerlink" title="SpringCloudGateway"></a>SpringCloudGateway</h1><blockquote><p>Spring Cloud Gateway 是 Spring Cloud 生态系统中的一个组件，它是一个基于 Spring Framework 5，Spring Boot 2 和 Project Reactor 的构建的非阻塞 API 网关，用于处理所有进入应用程序的 HTTP 请求。它基于过滤器链(Filter Chain)的概念，允许开发者以非常灵活的方式来处理 HTTP 请求，比如路由、过滤、限流、重试等。</p></blockquote><h2 id="1、简单介绍-1"><a href="#1、简单介绍-1" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h2><p>网关的 <strong>核心功能特性</strong> ：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><blockquote><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过 gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p></blockquote><p><img src="/images/gateway-framework.png" alt="image-20210714210131152"></p><p>在 SpringCloud 中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul 是基于 Servlet 的实现，属于阻塞式编程。而 SpringCloudGateway 则是基于 Spring5 中提供的 WebFlux，属于响应式编程的实现，具备更好的性能。</p><h2 id="2、快速入门-1"><a href="#2、快速入门-1" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><blockquote><p>网关搭建步骤：</p><ol><li><p>创建项目，引入 nacos 服务发现和 gateway 依赖</p></li><li><p>配置 application.yml，包括服务基本信息、nacos 地址、路由</p></li></ol><p>路由配置包括：</p><ol><li><p>路由 id：路由的唯一标示</p></li><li><p>路由目标（uri）：路由的目标地址，http 代表固定地址，lb 代表根据服务名负载均衡</p></li><li><p>路由断言（predicates）：判断路由的规则，</p></li><li><p>路由过滤器（filters）：对请求或响应做处理</p></li></ol></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--网关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--nacos服务发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(GatewayApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写基础配置和路由规则"><a href="#编写基础配置和路由规则" class="headerlink" title="编写基础配置和路由规则"></a>编写基础配置和路由规则</h3><p>创建 application.yml 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <span class="hljs-comment"># 网关端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment"># 网关路由配置</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <span class="hljs-comment"># 路由id，自定义，只要唯一即可</span><br>          <span class="hljs-comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <span class="hljs-comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span><br></code></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><blockquote><h3 id="网关路由的流程图"><a href="#网关路由的流程图" class="headerlink" title="网关路由的流程图"></a>网关路由的流程图</h3><p>整个访问的流程如下：</p><p><img src="/images/gateway-liuCheng.png" alt="image-20210714211742956"></p></blockquote><h2 id="3、断言工厂"><a href="#3、断言工厂" class="headerlink" title="3、断言工厂"></a>3、断言工厂</h2><p>在配置文件中写的断言规则（字符串）会被 Predicate Factory 读取并处理，转变为路由判断的条件</p><p>例如 Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配</p><p>所有断言规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理</p><blockquote><h2 id="SpringCloudGateway-的断言工厂列表"><a href="#SpringCloudGateway-的断言工厂列表" class="headerlink" title="SpringCloudGateway 的断言工厂列表"></a>SpringCloudGateway 的断言工厂列表</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver], 2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些 cookie</td><td>- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些 header</td><td>- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个 host（域名）</td><td>- Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method&#x3D;GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query&#x3D;name, Jack 或者- Query&#x3D;name</td></tr><tr><td>RemoteAddr</td><td>请求者的 ip 必须是指定范围</td><td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table></blockquote><h2 id="4、过滤器工厂"><a href="#4、过滤器工厂" class="headerlink" title="4、过滤器工厂"></a>4、过滤器工厂</h2><p>GatewayFilter 是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="/images/spring-gateway-filterFacotry.png" alt="image-20210714212312871"></p><h3 id="4-1、路由过滤器的种类"><a href="#4-1、路由过滤器的种类" class="headerlink" title="4.1、路由过滤器的种类"></a>4.1、路由过滤器的种类</h3><p>Spring 提供了 31 种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><h3 id="4-2、请求头过滤器"><a href="#4-2、请求头过滤器" class="headerlink" title="4.2、请求头过滤器"></a>4.2、请求头过滤器</h3><p>下面我们以 AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入 userservice 的请求添加一个请求头：Truth&#x3D;itcast is freaking awesome!</p></blockquote><p>只需要修改 gateway 服务的 application.yml 文件，添加路由过滤即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>          <span class="hljs-attr">filters:</span> <span class="hljs-comment"># 过滤器</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span> <span class="hljs-comment"># 添加请求头</span><br></code></pre></td></tr></table></figure><p>当前过滤器写在 userservice 路由下，因此仅仅对访问 userservice 的请求有效。</p><h3 id="4-3、默认过滤器"><a href="#4-3、默认过滤器" class="headerlink" title="4.3、默认过滤器"></a>4.3、默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到 default 下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>      <span class="hljs-attr">default-filters:</span> <span class="hljs-comment"># 默认过滤项</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span><br></code></pre></td></tr></table></figure><h3 id="4-4、总结"><a href="#4-4、总结" class="headerlink" title="4.4、总结"></a>4.4、总结</h3><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters 的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><h2 id="5、全局过滤器"><a href="#5、全局过滤器" class="headerlink" title="5、全局过滤器"></a>5、全局过滤器</h2><h3 id="5-1、全局过滤器作用"><a href="#5-1、全局过滤器作用" class="headerlink" title="5.1、全局过滤器作用"></a>5.1、全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与 GatewayFilter 的作用一样。区别在于 GatewayFilter 通过配置定义，处理逻辑是固定的；而 GlobalFilter 的逻辑需要自己写代码实现。</p><p>定义方式是实现 GlobalFilter 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  处理当前请求，有必要的话通过&#123;<span class="hljs-doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain 用来把请求委托给下一个过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span><br><span class="hljs-comment">     */</span><br>    Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 filter 中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h3 id="5-2、自定义全局过滤器"><a href="#5-2、自定义全局过滤器" class="headerlink" title="5.2、自定义全局过滤器"></a>5.2、自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有 authorization，</p></li><li><p>authorization 参数值是否为 admin</p></li></ul><p>如果同时满足则放行，否则拦截</p><p>实现</p><p>在 gateway 中定义一个过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-meta">@Order(-1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">// 1.获取请求参数</span><br>        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();<br>        <span class="hljs-comment">// 2.获取authorization参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> params.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">// 3.校验</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(auth)) &#123;<br>            <span class="hljs-comment">// 放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">// 4.拦截</span><br>        <span class="hljs-comment">// 4.1.禁止访问，设置状态码</span><br>        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);<br>        <span class="hljs-comment">// 4.2.结束处理</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3、过滤器执行顺序"><a href="#5-3、过滤器执行顺序" class="headerlink" title="5.3、过滤器执行顺序"></a>5.3、过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和 DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="/images/spring-gateway-filterProcess" alt="image-20210714214228409"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个 int 类型的 order 值，<strong>order 值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter 通过实现 Ordered 接口，或者添加@Order 注解来指定 order 值，由我们自己指定</li><li>路由过滤器和 defaultFilter 的 order 由 Spring 指定，默认是按照声明顺序从 1 递增。</li><li>当过滤器的 order 值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter 的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载 defaultFilters，然后再加载某个 route 的 filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据 order 排序，组织过滤器链</p><h2 id="6、跨域问题"><a href="#6、跨域问题" class="headerlink" title="6、跨域问题"></a>6、跨域问题</h2><h3 id="6-1、什么是跨域问题"><a href="#6-1、什么是跨域问题" class="headerlink" title="6.1、什么是跨域问题"></a>6.1、什么是跨域问题</h3><p><img src="/images/gateway-cors.png" alt="cors"></p><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li><p>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</p></li><li><p>域名相同，端口不同：localhost:8080 和 localhost8081</p></li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域 ajax 请求，请求被浏览器拦截的问题</p><p>解决方案：CORS &#x3D;&gt; <a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h3 id="6-2、解决跨域问题"><a href="#6-2、解决跨域问题" class="headerlink" title="6.2、解决跨域问题"></a>6.2、解决跨域问题</h3><p>在 gateway 服务的 application.yml 文件中，添加下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-comment"># 。。。</span><br>      <span class="hljs-attr">globalcors:</span> <span class="hljs-comment"># 全局的跨域处理</span><br>        <span class="hljs-attr">add-to-simple-url-handler-mapping:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 解决options请求被拦截问题</span><br>        <span class="hljs-attr">corsConfigurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-comment"># 允许哪些网站的跨域请求</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;http://localhost:8090&#x27;</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-comment"># 允许的跨域ajax的请求方式</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;GET&#x27;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;POST&#x27;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;DELETE&#x27;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;PUT&#x27;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;OPTIONS&#x27;</span><br>            <span class="hljs-attr">allowedHeaders:</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-comment"># 允许在请求中携带的头信息</span><br>            <span class="hljs-attr">allowCredentials:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否允许携带cookie</span><br>            <span class="hljs-attr">maxAge:</span> <span class="hljs-number">360000</span> <span class="hljs-comment"># 这次跨域检测的有效期</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zuul, Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2024/04/25/Spring/"/>
    <url>/2024/04/25/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1、Bean-生命周期"><a href="#1、Bean-生命周期" class="headerlink" title="1、Bean 生命周期"></a>1、Bean 生命周期</h2><blockquote><p>IOC 中 Bean 的生命周期：生产、使用、销毁</p><p>步骤：</p><ol><li>解析 xml 配置或者注解配置的类获取 BeanDefinition</li><li>通过 BeanDefinition 反射创建 Bean 对象</li><li>对 Bean 对象进行属性填充</li><li>回调实现 Aware 接口的方法，比如 BeanNameAware</li><li>调用 BeanPostProcessor 的初始化前方法</li><li>调用 init 初始化方法</li><li>调用 BeanPostProcessor 的初始化后方法，该方法会进行 AOP</li><li>将创建的 Bean 对象放入 Map 集合中</li><li>业务中使用 Bean 对象</li><li>Spring 容器关闭时调用 DisposableBean 的 destory 方法。</li></ol></blockquote><h3 id="1-1、生产"><a href="#1-1、生产" class="headerlink" title="1.1、生产"></a>1.1、生产</h3><ol><li><p>启动 Spring 项目</p></li><li><p>“加载 Bean 定义”loadBeanDefinitions，并放在容器中的“Bean 定义”BeanDefinitionMap 集合中</p><p>大致流程如下图所示：</p><pre><code class=" mermaid">graph LR;run --&gt; refreshContext --&gt; refresh --&gt; obtainFreshBeanFactory --&gt; refreshBeanFactory --&gt; loadBeanDefinition</code></pre></li><li><p>创建 Bean 对象：构造对象、填充属性、初始化实例、注册销毁</p><p>大致流程如下图所示：</p><pre><code class=" mermaid">graph LR;run --&gt; refreshContext --&gt; finishBeanFactoryInitialization --&gt; preInstantiateSingletons --&gt; doGetBean --&gt; createBean</code></pre><ol><li><p>构造对象：createBeanInstance，先通过反射机制从“Bean 定义”中 BeanClass 获取该类的构造方法</p><ol><li>获取构造方法：<ol><li>单构造方法：无论该构造方法是否有参数都只能获取</li><li>多构造方法：<ol><li>首先选择获取带有@Autowired 注解的构造方法（若有多个构造方法带有该注解会因此而报错！）</li><li>其次选择优先获取无参数的构造方法（若没有无参构造方法，并且有多个有参的构造方法则会因此而报错）</li></ol></li></ol></li><li>准备参数：在容器的单例池中根据参数的 Class 类进行查找，若该类在容器中含有多个实例则会根据参数名进行再匹配，若没有找到则会报构造信息不完整的错误。</li><li>Bean 构造：通过反射创建 Bean 对象，即实例化</li></ol></li><li><p>填充属性：populateBean，通过该方法为 Bean 内部所需的属性进行赋值填充，通常是@Autowired 注解的变量。</p><ul><li>通过“三级缓存”机制进行填充，即依赖注入</li></ul></li><li><p>初始化实例：InitializeBean</p><ol><li><p>初始化容器相关信息，通过 InvokeAwareMethods 方法为实现各种 Aware 接口的 Bean 设置诸如：beanName、beanFactory 等容器信息</p><blockquote><p>Aware 接口代表“信息感知”接口，一旦实现该接口，就可以在 bean 实例中感知并获取对应的信息</p></blockquote></li><li><p>通过 invokeInitMethods 方法执行 Bean 的初始化方法，Bean 的初始化方法是通过实现 InittializingBean 接口而实现的 afterPropertiesSet 方法</p></li><li><p>接着执行在 Bean 上自定义的 initMethod 方法，在执行该方法的前后还需要对“Bean 后置处理器”BeanPostProcessors 进行处理，可通过 applyBeanPostProcessorsBeforeInitialization、applyBeanPostProcessorsAfterInitialization 在初始化方法前后处理各种 Bean 的后置处理器（包括：Spring 自身提供的负责“AOP 处理”的 AnnotationAwareAspectJAutoProxyCreator、负责“构造后@PostConstruct 和销毁前@PreDestroy 处理”的 InitDestroyAnnotationBeanPostProcessor 等“系统级”处理器以及项目自定义实现 BeanPostProcessor 接口的“自定义处理器”，自定义处理器可通过实现 PriorityOrdered 接口来指定顺序进行逐一处理</p></li></ol></li><li><p>注册销毁：RegistryDisposabeBean</p><ol><li>通过 RegistryDisposabeBean 方法将实现销毁接口 DisposabeBean 的 Bean 进行注册，在销毁时就可执行 destroy 方法</li></ol></li></ol></li><li><p>将 Bean 放入单例池：将创建好的完整 Bean 对象通过 addSingleton 方法放入单例池 singletonObjects 中即可获取或使用</p></li></ol><p>生产总流程</p><pre><code class=" mermaid">graph TD;启动 -- 准备容器/环境等... --&gt; loadBeanDefinitionsloadBeanDefinitions -- 遍历BeanDefinitionMap集合 --&gt; cteateBean -- 构造对象-填充属性-初始化实例-注册销毁 --&gt; addSingleton -- 将Bean放入单例池 --&gt; singletonObjects</code></pre><h3 id="1-2、使用"><a href="#1-2、使用" class="headerlink" title="1.2、使用"></a>1.2、使用</h3><p>生产完成后即可在容器内使用 Bean 对象们！</p><h3 id="1-3、销毁"><a href="#1-3、销毁" class="headerlink" title="1.3、销毁"></a>1.3、销毁</h3><p>在执行 close()方法时</p><ol><li>在销毁前先执行“销毁前处理器”postProcessBeforeDectruction，该过程会执行 Bean 中@PreDestroy 注解的方法。</li><li>接着通过 destroyBeans 方法逐一销毁容器内的所有 Bean，销毁时会执行 destroy 方法。</li><li>最后通过“客户销毁方法”invokeCustomDestroyMethod 方法执行项目中自定义 Bean 中自定义的 destroyMethod 方法。</li></ol><h2 id="2、启动流程"><a href="#2、启动流程" class="headerlink" title="2、启动流程"></a>2、启动流程</h2><h3 id="2-1、服务构建"><a href="#2-1、服务构建" class="headerlink" title="2.1、服务构建"></a>2.1、服务构建</h3><blockquote><p>目标：SpringApplication</p><p>总结：SpringApplication.run()</p><ol><li><p>创建 ApplicationContext 实例，即创建 Ioc 容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span>  <span class="hljs-operator">=</span> createApplicationContext();<br></code></pre></td></tr></table></figure></li><li><p>加载源配置类（通常是 main 方法所在的类，而被注解@SpringBootApplication 所修饰的类称为主类）：将主类（primaryClass）注解到 Ioc 容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">loadSourceClass(context, primaryClass);<br></code></pre></td></tr></table></figure></li><li><p>递归加载并处理所有的配置类：“自动配置”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">processConfigurationClasses(context);<br></code></pre></td></tr></table></figure><ol><li><p>从 Ioc 容器中取出当前存在的源配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; sourceConfigurationClass =  getSourceConfigurationClass(context);<br></code></pre></td></tr></table></figure></li><li><p>创建配置类解析器，然后递归加载并处理应用中所有的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConfigClassParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigClassParser</span>(context);<br>parser.parse(sourceConfigurationClass);<br></code></pre></td></tr></table></figure><p><code>parse()</code>方法解析程序：</p><ol><li><p>处理@ComponentScan：根据@ComponentScan 扫描指定的 package 得到一系列配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(hasComponentScan(confiClas)) &#123;<br>    <span class="hljs-keyword">for</span>(Class&lt;?&gt; clazz : doScan(configClass)) &#123;<br>        <span class="hljs-built_in">this</span>.parse(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>处理注解@Import：根据@Import 得到一系列被导入的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(hasImportClasses(confiClas)) &#123;<br>    <span class="hljs-keyword">for</span>(Class&lt;?&gt; clazz : getImports(configClass)) &#123;<br>        <span class="hljs-built_in">this</span>.parse(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>处理@Bean 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">processBeanMethods(configClass);<br></code></pre></td></tr></table></figure></li><li><p>处理 Import 导入的 Import 导入的 ImportBeanDefinitionRegistrar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">processRegistrars(configClass);<br></code></pre></td></tr></table></figure></li><li><p>加入全局的配置类集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.configurationClasses.add(configClass);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>向 Ioc 容器中注解@Bean 方法对应的 BeanDefinition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">loadBeanDefinitionsFromBeanMethods(parser.configurationClasses);<br></code></pre></td></tr></table></figure></li><li><p>向 Ioc 容器中注解 ImportBeanDefinitionRegistrar 导入的 BeanDefinition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">loadBeanDefinitionsFromRegistrars(parser.configurationClasses);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>实例化所有的单例 Bean：“依赖注入” 和 “自动装配”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">instantiateSingletonBeans(context);<br></code></pre></td></tr></table></figure></li><li><p>启动服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">startServer(context);<br></code></pre></td></tr></table></figure></li></ol><p>两种配置注解</p><ol><li><p>@ComponentScan</p><ul><li>对指定的 package 进行扫描，找到其中符合条件的类，默认是搜索被注解@Component 修饰的配置类</li><li>通过属性 basePackages 或 basePackageClasses，来指定要进行扫描的 package</li><li>如果为指定 package，则默认扫描当前@ComponentScan 所修饰的类所在的 package</li></ul></li><li><p>@Import</p><ul><li>提供一种显示地从其他地方加载配置类的方式，该方式可避免使用性能较差的组件扫描（Component Scan）</li><li>支持导入：<ol><li>普通类（相对后两种方式而言）</li><li>接口 ImportSelector 的实现类</li><li>接口 ImportBeanDefinitionRegistrar 的实现类</li></ol></li></ul></li><li><p>@Conditional</p><p>它的作用是实现：只有在特定条件满足时，才会向 Ioc 容器注册知道你过的组件。也可以将@Conditional 理解为某种 IF 语句</p><p>常用的 Conditional 扩展注解：</p><ul><li>ConditionalOnBean：当容器中存在指定的 Bean 时，满足条件</li><li>ConditionalOnMissingBean：当容器中不存在指定的 Bean 时，满足条件</li><li>ConditionalOnClass：当 classpath 中存在指定的类时，满足条件</li><li>ConditionalOnMissingClass：当 classpath 中不存在指定的类时，满足条件</li><li>ConditionalOnProperty：当指定的属性具备指定的值时，满足条件</li><li>ConditionalOnWebApplication：当应用程序是 web 应用时，满足条件</li></ul></li></ol></blockquote><p>SpringApplication 构造方法：public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;… primarySources)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 1、将资源加载器、主方法类记录在内存中</span><br>    <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>    Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br>    <span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(Arrays.asList(primarySources));<br><br>    <span class="hljs-comment">// 2、注意判断对应的服务类是否存在：确定web服务的类型（servlet[默认]\reactive\node\...）</span><br>    <span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br><br>    <span class="hljs-comment">// 3、加载初始化类：读取所有META-INF/spring.factories文件中的三类配置：</span><br>    <span class="hljs-comment">// 注册初始化：BootstrapRegistryInitializer</span><br>    <span class="hljs-comment">// 上下文初始化：ApplicationContextInitializer</span><br>    <span class="hljs-comment">// 监听器：ApplicationListener</span><br>    <span class="hljs-comment">// 无默认的注册初始化配置, 但spring-boot和spring-boot-autoconfigure两工程中配置有7个“上下文初始化”及8个“监听器”</span><br>    <span class="hljs-built_in">this</span>.bootstrapRegistryInitializers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<br>        getSpringFactoriesInstances(BootstrapRegistryInitializer.class)<br>    );<br>    <span class="hljs-built_in">this</span>.setInitializers(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer.class));<br>    <span class="hljs-built_in">this</span>.setListeners(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br><br>    <span class="hljs-comment">// 4、运行栈stackTrack判断main方法所在类（启动类本身）的位置</span><br>    <span class="hljs-built_in">this</span>.mainApplicationClass = <span class="hljs-built_in">this</span>.deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、环境准备"><a href="#2-2、环境准备" class="headerlink" title="2.2、环境准备"></a>2.2、环境准备</h3><blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">SpringApplication.<span class="hljs-keyword">run</span>(Application.<span class="hljs-keyword">class</span>, <span class="hljs-keyword">args</span>);<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.nanoTime();<br><br>    <span class="hljs-comment">// 1、加载“启动注册初始化器”BootstrapRegistryInitializer的initialize()方法</span><br>    <span class="hljs-comment">// 由于无默认BootstrapRegistryInitializer，即默认不执行</span><br>    <span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br><br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 2、将java.awtheadless该值设置为true：无输入设备启动（即缺少显示器、键盘等输入设备也可以正常启动）</span><br>    <span class="hljs-built_in">this</span>.configureHeadlessProperty();<br><br>    <span class="hljs-comment">// 3.1、启动“运行监听器”SpringApplicationRunListener</span><br>    <span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getRunListeners(args);<br>    <span class="hljs-comment">// 3.2、发布启动事件：获取并加载spring-boot工程的spring.factories配置文件中EventPublishingRunListener及另外8个监听器</span><br>    listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br>        <span class="hljs-comment">// 4、组装启动参数：prepareEnvironment方法进行构造“可配置环境”ConfigurableEnvironment</span><br>        <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.prepareEnvironment(<br>            listeners,<br>            bootstrapContext,<br>            applicationArguments<br>        );<br>        <span class="hljs-comment">// 5、将“spring.beaninfo.ignore”设为true：表示不加载Bean的元数据信息</span><br>        <span class="hljs-built_in">this</span>.configureIgnoreBeanInfo(environment);<br>        <span class="hljs-comment">// 6、打印Banner图</span><br>        <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.printBanner(environment);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>4、组装启动参数：prepareEnvironment 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ConfigurableEnvironment <span class="hljs-title function_">prepareEnvironment</span><span class="hljs-params">(</span><br><span class="hljs-params"> SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments)</span> &#123;<br> <span class="hljs-comment">// 1、根据不同的web服务类型构造不同的环境：默认servlet</span><br> <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getOrCreateEnvironment();<br> <span class="hljs-comment">// 2.1、通过“配置环境”configureEnvironment, 加载“系统环境变量”systemEnvironment、</span><br> <span class="hljs-comment">//    “Jvm系统属性”systemProperties等在内的4组配置信息到propertySources的内存集合</span><br> <span class="hljs-comment">// 2.2、以及通过“配置环境”configureEnvironment，将启动时传入的环境参数args进行设置（“开发/生产”环境配置）</span><br> <span class="hljs-built_in">this</span>.configureEnvironment((ConfigurableEnvironment)environment, applicationArguments.getSourceArgs());<br><br> <span class="hljs-comment">// 3、在propertySources集合的首个位置添加一个值为空的配置内容“configurationProperties”</span><br> ConfigurationPropertySources.attach((Environment)environment);<br><br> <span class="hljs-comment">// 4、发布“环境准备完成”事件（之前加载的8个监听器会监听到该事件，并且部分监听器会进行相应的处理）</span><br> <span class="hljs-comment">// 诸如：“环境配置后处理监听器”EnvironmentPostProcessorApplicationListener会去加载spring.factories</span><br> <span class="hljs-comment">//       配置文件中“环境配置后处理器”EnvironmentPostProcessor</span><br><span class="hljs-comment">// 注意：“监听器”通过观察者设计模式会逐一“串行”执行（即需要等待所有监听器的处理完成后才会继续执行后续的逻辑）</span><br> listeners.environmentPrepared((ConfigurableEnvironment)environment);<br><br> <span class="hljs-comment">// 5、将环境配置跟容器绑定</span><br> <span class="hljs-built_in">this</span>.bindToSpringApplication((ConfigurableEnvironment)environment);<br> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isCustomEnvironment) &#123;<br>     environment = (<br>         <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentConverter</span>(<span class="hljs-built_in">this</span>.getClassLoader())<br>     ).convertEnvironmentIfNecessary(<br>         (ConfigurableEnvironment)environment,<br>         <span class="hljs-built_in">this</span>.deduceEnvironmentClass()<br>     );<br> &#125;<br> <span class="hljs-comment">// 6、考虑到刚创建的“可配置环境”在一系列过程中可能会发生变化，通过二次更新保证匹配</span><br> ConfigurationPropertySources.attach((Environment)environment);<br> <span class="hljs-keyword">return</span> (ConfigurableEnvironment)environment;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="2-3、容器创建"><a href="#2-3、容器创建" class="headerlink" title="2.3、容器创建"></a>2.3、容器创建</h3><blockquote><p>“容器”ApplicationContext：指各种属性、集合以及配套功能的结构体，也成为“上下文”。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// 1、根据服务类型创建”容器“ConfigurableApplicationContext</span><br>        context = <span class="hljs-built_in">this</span>.createApplicationContext();<br><br>        context.setApplicationStartUp(<span class="hljs-built_in">this</span>.applicationStarpUp);<br><br>        <span class="hljs-comment">// 2、对容器中的部分属性进行初始化</span><br>        <span class="hljs-built_in">this</span>.prepareContext(context, environment, listeners, applicationArguments, printedBanner);<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、根据服务类型创建”容器“ConfigurableApplicationContext，由于默认服务类型为 servlet，故创建的是”注解配置的 Servler-Web 服务容器“，即 AnnotationConfigServletWebServerApplicationContext。在此过程中会构造诸如：存放或生产“Bean 实例的”Bean 工厂”DefaultListableBeanFactory</p><p>诸如：</p><ul><li>用以解析@Conponent、@ComponentSan 等注解的“配置类后处理器”ConfigurationClassPostProcessor</li><li>用以解析@Autowired、@Value、@Inject 等注解的“自动注解后处理器”AutowiredAnnotationBeanPostProcessor 等在内的属性对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> ConfigurableApplicationContext <span class="hljs-title function_">createApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    Class&lt;?&gt; contextClass = <span class="hljs-built_in">this</span>.applicationContextClass;<br>    <span class="hljs-keyword">if</span> (contextClass == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.webApplicationType) &#123;<br>                <span class="hljs-keyword">case</span> SERVLET:<br>                    contextClass = Class.forName(<span class="hljs-string">&quot;org.springframework.boot.web.servlet.context. &quot;</span> +<br>                                                 + <span class="hljs-string">&quot;AnnotationConfigServletWebServerApplicationContext&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> REACTIVE:<br>                    contextClass = Class.forName(<span class="hljs-string">&quot;org.springframework.boot.web.reactive.context.&quot;</span> +<br>                                                 + <span class="hljs-string">&quot;AnnotationConfigReactiveWebServerApplicationContext&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    contextClass = Class.forName(<span class="hljs-string">&quot;org.springframework.context.annotation.&quot;</span> +<br>                                                 + <span class="hljs-string">&quot;AnnotationConfigApplicationContext&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Unable create a default ApplicationContext, &quot;</span> +<br>                                                 + <span class="hljs-string">&quot;please specify an ApplicationContextClass&quot;</span>, var3);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (ConfigurableApplicationContext)BeanUtils.instantiateClass(contextClass);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、对容器中的部分属性进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareContext</span><span class="hljs-params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span><br><span class="hljs-params">                            SpringApplicationRunListeners llisteners,</span><br><span class="hljs-params">                            ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;<br>    context.setEnvironment(environment);<br><br>    <span class="hljs-comment">// 1、设置“Bean名称生成器”BeanNameGenerator、“资源加载器”ResourceLoader、“类型转换器”ConversionService等</span><br>    <span class="hljs-built_in">this</span>.postProcessApplicationContext(context);<br><br>    <span class="hljs-comment">// 2、执行之前加载的“上下文初始化”ApplicationContextInitializer，默认加载7个，</span><br>    <span class="hljs-comment">//  容器ID、警告日志处理、日志监听等都是在此时实现的</span><br>    <span class="hljs-built_in">this</span>.applyInitializers(context);<br><br>    <span class="hljs-comment">// 3、发布“容器准备完成”监听事件</span><br>    listeners.contextPrepared(context);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>        <span class="hljs-built_in">this</span>.logStartupInfo(context.getParent() == <span class="hljs-literal">null</span>);<br>        <span class="hljs-built_in">this</span>.logStartupProfileInfo(context);<br>    &#125;<br><br>    <span class="hljs-comment">// 4、陆续为容器注册“启动参数”、“Banner”、“Bean引用策略”、“懒加载策略”和“属性排序”等等</span><br>    <span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> context.getBeanFactory();<br>    beanFactory.registerSingleton(<span class="hljs-string">&quot;springApplicationArguments&quot;</span>, applicationArguments);<br>    <span class="hljs-keyword">if</span> (printedBanner != <span class="hljs-literal">null</span>) &#123;<br>        beanFactory.registerSingleton(<span class="hljs-string">&quot;springBootBanner&quot;</span>, printedBanner);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory) &#123;<br>        ((DefaultListableBeanFactory)beanFactory).setAllowBeanDefinitionOverriding(<br>            <span class="hljs-built_in">this</span>.allowBeanDefinitionOverriding<br>        );<br>    &#125;<br><br><br>    Set&lt;Object&gt; sources = <span class="hljs-built_in">this</span>.getAllSources();<br>    Assert.notEmpty(sources, <span class="hljs-string">&quot;Sources must not be empty&quot;</span>);<br><br>    <span class="hljs-comment">// 5、通过“Bean定义加载器”将“启动类”在内的资源加载到“Bean定义池”BeanDefinitionMap中</span><br>    <span class="hljs-built_in">this</span>.load(context, sources.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]));<br><br>    <span class="hljs-comment">// 6、发布“资源加载完成”事件</span><br>    listeners.contextLoaded(context);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="2-4、填充容器"><a href="#2-4、填充容器" class="headerlink" title="2.4、填充容器"></a>2.4、填充容器</h3><p>1、生产 Spring 自身提供的以及项目自定义的所有 Bean 对象，并存放在“容器”中，该过程也成为“自动装配”，包含 12 个步骤。</p><p>2、发布“启动完成”事件并回调自定义实现的 Runner 接口</p><h3 id="2-5、总结"><a href="#2-5、总结" class="headerlink" title="2.5、总结"></a>2.5、总结</h3><ol><li><p>加载各种配置信息，初始化各种配置对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringApplication(primarySources)<br></code></pre></td></tr></table></figure><ol><li><p>初始化资源加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br></code></pre></td></tr></table></figure></li><li><p>初始化配置类的类名信息（格式转换）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<br></code></pre></td></tr></table></figure></li><li><p>确认当前容器加载的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br></code></pre></td></tr></table></figure></li><li><p>获取系统配置引导信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.bootstrapRegistryInitializers = getBootstrapRegistryInitializersFromSpringFactories();<br></code></pre></td></tr></table></figure></li><li><p>获取 ApplicationContextInitializer.class 对应的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<br></code></pre></td></tr></table></figure></li><li><p>初始化监听器，对初始化过程及运行过程进行干预</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br></code></pre></td></tr></table></figure></li><li><p>初始化引导类类名信息，备用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br></code></pre></td></tr></table></figure></li></ol></li><li><p>初始化容器，得到 ApplicationContext 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources).run(args)<br></code></pre></td></tr></table></figure><ol><li><p>设置计时器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br></code></pre></td></tr></table></figure></li><li><p>计时开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">stopWatch.start();<br></code></pre></td></tr></table></figure></li><li><p>系统引导信息对应的上下文对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br></code></pre></td></tr></table></figure></li><li><p>模拟输入输出信号，避免出现因缺少外设导致的信号传输失败，进而引发错误（模拟显示器，键盘，鼠标…）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">configureHeadlessProperty();<br></code></pre></td></tr></table></figure></li><li><p>获取当前注册的所有监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br></code></pre></td></tr></table></figure></li><li><p>监听器执行了对应的操作步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br></code></pre></td></tr></table></figure></li><li><p>获取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br></code></pre></td></tr></table></figure></li><li><p>将前期读取的数据加载成了一个环境对象，用来描述信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br></code></pre></td></tr></table></figure></li><li><p>做了一个配置，备用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">configureIgnoreBeanInfo(environment);<br></code></pre></td></tr></table></figure></li><li><p>初始化 logo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br></code></pre></td></tr></table></figure></li><li><p>创建容器对象，根据前期配置的容器类型进行判定并创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">context = createApplicationContext();<br></code></pre></td></tr></table></figure></li><li><p>设置启动模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br></code></pre></td></tr></table></figure></li><li><p>对容器进行设置，参数来源于前期的设定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br></code></pre></td></tr></table></figure></li><li><p>刷新容器环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">refreshContext(context);<br></code></pre></td></tr></table></figure></li><li><p>刷新完毕后做后处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">afterRefresh(context, applicationArguments);<br></code></pre></td></tr></table></figure></li><li><p>计时结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">stopWatch.stop();<br></code></pre></td></tr></table></figure></li><li><p>判定是否记录启动时间的日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建日志对应的对象，输出日志信息，包含启动时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);<br></code></pre></td></tr></table></figure></li><li><p>监听器执行了对应的操作步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">listeners.started(context);<br></code></pre></td></tr></table></figure></li><li><p>监听器执行了对应的操作步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">listeners.running(context);<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="3、循环依赖"><a href="#3、循环依赖" class="headerlink" title="3、循环依赖"></a>3、循环依赖</h2><blockquote><p><strong>问题：</strong>当 Bean 对象 A 内部注入 Bean 对象 B，而 Bean 对象 B 内部也注入 Bean 对象 A，此时就会出现循环依赖问题，Spring 容器一般不支持该现象。</p><p><strong>解决方法：</strong>application 中配置 allow-circular-references 的值为 true，sb2.6 之后版本默认为 false。即：与其解决循环依赖在技术层面的实现问题，不如在设计时避免循环依赖。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-circular-references:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="3-1、循环依赖大概流程"><a href="#3-1、循环依赖大概流程" class="headerlink" title="3.1、循环依赖大概流程"></a>3.1、循环依赖大概流程</h3><ol><li>Spring 进行扫描 -&gt; 反射后封装成 beanDefinition 对象 -&gt; 放入 beanDefinitionMap</li><li>遍历 beanDefinitionMap<ol><li>验证(是否单例&#x2F;是否延迟加载&#x2F;是否抽象)</li><li>推断构造方法</li><li>准备开始进行实例</li><li>在单例池中查找-没有</li><li>在二级缓存中查找-没有提前暴露</li><li>生成 objectFactory 对象暴露到二级缓存中</li></ol></li><li>属性注入-发现依赖 Y</li><li>进行 Y 的生命周期直到属性注入-发现依赖 X</li><li>进行 X 生命周期<ol><li>当在二级缓存中查找时找到 X</li><li>往 Y 中注入 X 的 objectFactory 对象</li></ol></li><li>完成循环依赖</li></ol><p><strong>某些疑问</strong></p><p>1、为什么要使用 X 的 objectFacory 对象而不是直接使用 X 对象？</p><ul><li>利于拓展，开发者可通过 beanPostProcess 接口操作 objectFactory 对象生成自定义对象</li></ul><p>2、是不是只能支持单例(scope&#x3D;singleton)而不支持原型(scope&#x3D;prototype)？</p><ul><li>是。因为单例是 spring 在启动时进行 bean 加载放入单例池中，在依赖的 bean 开始生命周期后，可以直接从二级缓存中取到它所依赖的 bean 的 objectFactory 对象从而结束循环依赖。</li><li>而原型只有在用到时才会走生命周期流程，但是原型不存在一个已经实例化好的 bean，所以会无限的创建-&gt;依赖-&gt;创建-&gt;依赖-&gt;…。</li></ul><p>3、循环依赖是不是只支持非构造方法？</p><ul><li>是。类似死锁问题</li></ul><h2 id="4、自动配置"><a href="#4、自动配置" class="headerlink" title="4、自动配置"></a>4、自动配置</h2><blockquote><p>自动配置：Auto-Configuration</p><p>配置类：ConfigurationClass</p><ul><li>广义”配置类“：被注解@Component 直接或间接修饰的某个类</li><li>狭义”配置类“：特指被注解@Configuration 所修饰的某个类</li></ul></blockquote><p>在 Springboot 项目的启动类中会添加注解<code>@SpringBootApplication</code>，而该注解的关系图如下</p><pre><code class=" mermaid">graph LR;SpringBootApplication注解 --&gt; SpringBootConfiguration注解 --&gt; Configuration注解SpringBootApplication注解 --&gt; EnableAutoConfiguration注解 -- 导入 --&gt; AutoConfigurationImportSelector类SpringBootApplication注解 --&gt; ComponentScan注解AutoConfigurationImportSelector类 -- 实现 --&gt; DeferredImportSelector接口AutoConfigurationImportSelector类 -- 实现 --&gt; BeanClassLoaderAware接口AutoConfigurationImportSelector类 -- 实现 --&gt; ResourceLoaderAware接口AutoConfigurationImportSelector类 -- 实现 --&gt; BeanFactoryAware接口AutoConfigurationImportSelector类 -- 实现 --&gt; EnvironmentAware接口</code></pre><p>SpringFactories 机制：它的核心是从 classpath 中读取到所有 Jar 包的中的配置文件 META-IF&#x2F;spring.factories，然后根据指定的 key 从配置文件中解析出对应的 value 值。其中 key 是指定的某个类名，value 是逗号隔开的多个类名。</p><p>AutoConfigurationImportSelector 的实现流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动配置源码分析</span><br><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isEnabled(annotationMetadata)) &#123;<br>        <span class="hljs-keyword">return</span> NO_IMPORTS;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-type">AutoConfigurationMetadata</span> <span class="hljs-variable">autoConfigurationMetadata</span> <span class="hljs-operator">=</span> AutoConfigurationMetadataLoader.loadMetadata(<br>            <span class="hljs-built_in">this</span>.beanClassLoader<br>        );<br><br>        <span class="hljs-comment">// SpringBoot自动配置入口</span><br>        <span class="hljs-type">AutoConfigurationEntry</span> <span class="hljs-variable">autoConfigurationEntry</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getAutoConfigurationEntry(<br>            autoConfigurationMetadata,<br>            annotationMetadata<br>        );<br>        <span class="hljs-keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// SpringBoot自动配置入口</span><br><span class="hljs-keyword">protected</span> AutoConfigurationEntry <span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AutoConfigurationMetadata autoConfigurationMetadata,</span><br><span class="hljs-params">                                                           AnnotationMetadata annotationMetadata)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isEnabled(annotationMetadata)) &#123;<br>        <span class="hljs-keyword">return</span> EMPTY_ENTRY;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 1、获取 annotationMetadata 的注解 @EnableAutoConfiguration 的属性</span><br>        <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getAttributes(annotationMetadata);<br><br>        <span class="hljs-comment">// 2、从资源文件 spring.factories 中获取 EnableAutoConfiguration 对应的所有的类</span><br>        List&lt;String&gt; configurations = <span class="hljs-built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);<br>        configurations = <span class="hljs-built_in">this</span>.removeDuplicates(configurations);<br><br>        <span class="hljs-comment">// 3、通过在注解 @EnableAutoConfiguration 设置 exclude 的相关属性，可以排除指定的自动配置类</span><br>        Set&lt;String&gt; exclusions = <span class="hljs-built_in">this</span>.getExclusions(annotationMetadata, attributes);<br>        <span class="hljs-built_in">this</span>.checkExcludedClasses(configurations, exclusions);<br>        configurations.removeAll(exclusions);<br><br>        <span class="hljs-comment">// 4、根据注解 @Conditional 来判断是否需要排除某些自动配置类</span><br>        configurations = <span class="hljs-built_in">this</span>.filter(configurations, autoConfigurationMetadata);<br><br>        <span class="hljs-comment">// 5、触发 AutoConfiguration 导入的相关事件</span><br>        <span class="hljs-built_in">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationEntry</span>(configurations, exclusions);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 3、从资源文件 spring.factories 中获取 EnableAutoConfiguration 对应的所有的类</span><br><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata,</span><br><span class="hljs-params">                                                  AnnotationAttributes attributes)</span> &#123;<br>    <span class="hljs-comment">// 通过 SpringFactories 机制，从配置文件 spring.factories 中找出所有的自动配置类</span><br>    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<br>        EnableAutoConfiguration.class,<br>        <span class="hljs-built_in">this</span>.getBeanClassLoader()<br>    );<br>    Assert.notEmpty(<br>        configurations,<br>        <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. &quot;</span> +<br>        <span class="hljs-string">&quot;If you are using a custom packaging, make sure that file is correct.&quot;</span><br>    );<br>    <span class="hljs-keyword">return</span> configurations;<br>&#125;<br><br><span class="hljs-comment">// 加载工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryClass, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">factoryClassName</span> <span class="hljs-operator">=</span> factoryClass.getName();<br>    <span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());<br>&#125;<br><br><span class="hljs-comment">// 加载Spring工厂</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">loadSpringFactories</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);<br>    <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Enumeration&lt;URL&gt; urls = classLoader != <span class="hljs-literal">null</span> ?<br>                classLoader.getResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>)<br>                :<br>            ClassLoader.getSystemResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>);<br><br>            MultiValueMap&lt;String, String&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>();<br>            <span class="hljs-keyword">while</span>(urls.hasMoreElements()) &#123;<br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (URL)urls.nextElement();<br>                <span class="hljs-type">UrlResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(url);<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> PropertiesLoaderUtils.loadProperties(resource);<br>                <span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> properties.entrySet().iterator();<br>                <span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>                    Map.Entry&lt;?, ?&gt; entry = (Map.Entry)var6.next();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">factoryClassName</span> <span class="hljs-operator">=</span> ((String)entry.getKey()).trim();<br>                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var9.length;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var11 &lt; var10; ++var11) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">factoryName</span> <span class="hljs-operator">=</span> var9[var11];<br>                        result.add(factoryClassName, factoryName.trim());<br>                    &#125;<br>                &#125;<br>            &#125;<br>            cache.put(classLoader, result);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var13) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                <span class="hljs-string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>,<br>                var13<br>            );<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AutoConfigurationImportSelector.selectImports(…) 实现流程：</p><ol><li>通过 SpringFactories 机制加载配置文件：通过 ClassLoader 去获取 classpath 中的配置文件 META&#x2F;spring.factories</li><li>找出所有的自动配置类：在所有的配置文件 META&#x2F;spring.factories 中筛选出以 EnableAutoConfiguration.class 为 key 的、符合条件的配置类</li><li>根据注解@Conditional 过滤掉不必要的自动配置类</li></ol><p>总统流程：</p><p><img src="/images/springboot-autoConfiguration.png" alt="自动配置"></p><h2 id="5、自动装配"><a href="#5、自动装配" class="headerlink" title="5、自动装配"></a>5、自动装配</h2><blockquote><p>自动装配：Autowire</p></blockquote><p>Spring 的自动装配是指 Spring 框架根据一定的规则，自动将应用程序中的组件（例如 bean）装配到需要它们的地方，而无需手动进行显式的配置。</p><p>Spring 的自动装配可以通过在 XML 配置文件中使用 <code>&lt;context:annotation-config&gt;</code> 或 <code>&lt;context:component-scan&gt;</code> 来启用，或者通过在 Java 配置类上使用@ComponentScan 和@Autowired 注解来实现。如此 Spring 会自动扫描并装配应用程序中标记特定注解（例如@Component、@Service、@Repository 等）的类。</p><h3 id="1、三种自动装配模式"><a href="#1、三种自动装配模式" class="headerlink" title="1、三种自动装配模式"></a>1、三种自动装配模式</h3><h4 id="1、基于类型的自动装配（byType）"><a href="#1、基于类型的自动装配（byType）" class="headerlink" title="1、基于类型的自动装配（byType）"></a>1、基于类型的自动装配（byType）</h4><p>Spring 会检查应用程序上下文中所有的 bean，并尝试将某个属性的类型与另一个 bean 的类型匹配。如果找到唯一匹配的 bean，则自动装配成功。如果存在多个匹配项，Spring 将抛出异常，表示无法确定要使用哪个 bean。</p><h4 id="2、基于名称的自动装配（byName）"><a href="#2、基于名称的自动装配（byName）" class="headerlink" title="2、基于名称的自动装配（byName）"></a>2、基于名称的自动装配（byName）</h4><blockquote><p>该模式要求所有的 Bean 都有唯一的名称</p></blockquote><p>Spring 会将一个 bean 的属性名与其他 bean 的名称进行匹配。如果找到与属性名相同的 bean，则自动装配成功。</p><h4 id="3、构造函数自动装配（constructor）"><a href="#3、构造函数自动装配（constructor）" class="headerlink" title="3、构造函数自动装配（constructor）"></a>3、构造函数自动装配（constructor）</h4><blockquote><p>该模式适用于通过构造函数注入依赖的情况</p></blockquote><p>Spring 会检查应用程序上下文中所有的 bean，并尝试根据构造函数参数的类型进行匹配。如果某个 bean 的构造函数参数类型与另一个 bean 的类型匹配，则自动装配成功。</p><h3 id="2、自动装配原理"><a href="#2、自动装配原理" class="headerlink" title="2、自动装配原理"></a>2、自动装配原理</h3><p>自动装配原理基于依赖注入（DI）和反射机制。</p><h4 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h4><blockquote><p>优点：对象之间的耦合度降低，更易于测试和维护</p></blockquote><p>在依赖注入中，对象不再负责创建或查找依赖对象，而是由外部容器（即 Spring 容器）负责在创建对象时将依赖项传递给它。</p><h4 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h4><p>反射机制允许在运行时动态地检查类的结构并调用类的方法、访问或修改字段。Spring 通过反射来检查类的属性、构造函数以及方法，以确定它们的依赖关系，并在需要时自动注入依赖项。</p><h4 id="在-Spring-的自动装配流程"><a href="#在-Spring-的自动装配流程" class="headerlink" title="在 Spring 的自动装配流程"></a>在 Spring 的自动装配流程</h4><h5 id="1、组件扫描"><a href="#1、组件扫描" class="headerlink" title="1、组件扫描"></a>1、组件扫描</h5><blockquote><p>Component Scanning</p></blockquote><p>Spring 容器会扫描指定包及其子包下的类，查找带有特定注解的类（如<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>等）。被标记的类会被 Spring 识别为组件，可以被自动装配。</p><h5 id="2、自动装配规则"><a href="#2、自动装配规则" class="headerlink" title="2、自动装配规则"></a>2、自动装配规则</h5><p>Spring 会根据自动装配的模式（byType、byName、constructor）以及注解上的元数据，决定如何进行装配。如果一个类的属性被标记<code>@Autowired</code>注解，Spring 就会尝试自动将与该属性类型相匹配的 bean 装配进来。</p><h5 id="3、依赖解析"><a href="#3、依赖解析" class="headerlink" title="3、依赖解析"></a>3、依赖解析</h5><blockquote><p>Dependency Resolution</p></blockquote><p>当 Spring 确定要自动装配一个组件时，它会去容器中查找相应的 bean。如果找到了一个匹配的 bean，则将其装配到目标位置；如果找不到或者存在多个匹配项，Spring 可能会抛出异常或者选择一个默认的装配策略（如优先选择首选 bean）。</p><h5 id="4、装配过程"><a href="#4、装配过程" class="headerlink" title="4、装配过程"></a>4、装配过程</h5><blockquote><p>Assembly Process</p></blockquote><p>一旦确定了要装配的 bean，Spring 会使用反射机制将 bean 注入到目标组件中。</p><p>通过调用目标组件的 setter 方法、直接赋值给字段，或者通过构造函数注入等方式来实现。</p><h2 id="6、常见事务传播行为"><a href="#6、常见事务传播行为" class="headerlink" title="6、常见事务传播行为"></a>6、常见事务传播行为</h2><p>事务传播行为是指在一个方法调用另一个方法时，如何处理被调用方法的事务。</p><p>在使用事务管理器时，可以指定事务的传播行为来控制事务的行为。</p><h3 id="1、PROPAGATION-REQUIRED"><a href="#1、PROPAGATION-REQUIRED" class="headerlink" title="1、PROPAGATION_REQUIRED"></a>1、PROPAGATION_REQUIRED</h3><blockquote><p>默认传播行为</p></blockquote><p>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</p><h3 id="2、PROPAGATION-REQUIRES-NEW"><a href="#2、PROPAGATION-REQUIRES-NEW" class="headerlink" title="2、PROPAGATION_REQUIRES_NEW"></a>2、PROPAGATION_REQUIRES_NEW</h3><p>每次都会创建一个新的事务。如果当前存在事务，则将当前事务挂起。</p><h3 id="3、PROPAGATION-SUPPORTS"><a href="#3、PROPAGATION-SUPPORTS" class="headerlink" title="3、PROPAGATION_SUPPORTS"></a>3、PROPAGATION_SUPPORTS</h3><p>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式执行。</p><h3 id="4、PROPAGATION-NOT-SUPPORTED"><a href="#4、PROPAGATION-NOT-SUPPORTED" class="headerlink" title="4、PROPAGATION_NOT_SUPPORTED"></a>4、PROPAGATION_NOT_SUPPORTED</h3><p>以非事务的方式执行，并挂起当前存在的事务（如果有）。</p><h3 id="5、PROPAGATION-MANDATORY"><a href="#5、PROPAGATION-MANDATORY" class="headerlink" title="5、PROPAGATION_MANDATORY"></a>5、PROPAGATION_MANDATORY</h3><p>强制要求当前存在事务，并加入该事务；如果当前没有事务，则抛出异常。</p><h3 id="6、PROPAGATION-NEVER"><a href="#6、PROPAGATION-NEVER" class="headerlink" title="6、PROPAGATION_NEVER"></a>6、PROPAGATION_NEVER</h3><p>强制要求当前不存在事务；如果当前存在事务，则抛出异常。</p><h3 id="7、PROPAGATION-NESTED"><a href="#7、PROPAGATION-NESTED" class="headerlink" title="7、PROPAGATION_NESTED"></a>7、PROPAGATION_NESTED</h3><p>如果当前存在事务，则在嵌套事务中执行；如果当前没有事务，则创建一个新的事务。</p><h2 id="7、Spring-中事务失效场景"><a href="#7、Spring-中事务失效场景" class="headerlink" title="7、Spring 中事务失效场景"></a>7、Spring 中事务失效场景</h2><h3 id="1、数据库引擎不支持事务"><a href="#1、数据库引擎不支持事务" class="headerlink" title="1、数据库引擎不支持事务"></a>1、数据库引擎不支持事务</h3><blockquote><p><strong>Database Engine Doesn’t Support Transactions</strong></p></blockquote><p>在某些情况下，数据库引擎可能不支持事务，或者数据库的配置不正确，导致事务无法正常工作。例如，某些轻量级数据库或特殊配置下的数据库可能不支持事务。</p><p>MyISAM 引擎是不支持事务操作的，一般要支持事务都会使用 InnoDB 引擎，根据 MySQL 的官方文档说明，从 MySQL 5.5.5 开始的默认存储引擎是 InnoDB，之前默认的都是 MyISAM。</p><h3 id="2、没有被-Spring-管理"><a href="#2、没有被-Spring-管理" class="headerlink" title="2、没有被 Spring 管理"></a>2、没有被 Spring 管理</h3><blockquote><p><strong>Not Managed by Spring</strong></p></blockquote><p>Spring 的事务管理器只能管理由 Spring 容器管理的 Bean 上的事务。如果在没有通过 Spring 容器创建的对象上使用了<code>@Transactional</code>注解或者 Spring 的事务管理功能，事务将不会生效。</p><p>假设创建一个普通的 Java 类，并在其中使用<code>@Transactional</code>注解，但是这个类没有被 Spring 容器管理。</p><p>示例：在下述情况下，<code>@Transactional</code>注解将不会生效，由于<code>@Service</code> 被注释使得 <code>Spring</code> 无法管理<code>MyService</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @Service // 配置该类由Spring管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyRepository repository;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里执行数据库操作</span><br>        repository.save(someEntity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、方法并非-public-修饰"><a href="#3、方法并非-public-修饰" class="headerlink" title="3、方法并非 public 修饰"></a>3、方法并非 public 修饰</h3><blockquote><p><strong>Non-Public Methods</strong></p></blockquote><p>Spring 只能代理公共方法上的事务注解。如果一个方法不是 public 的，并且被注解<code>@Transactional</code>，那么事务注解将不会生效。</p><p>例如：在下述情况下，<code>@Transactional</code>注解同样不会生效，因为 Spring 只能代理公共方法上的事务注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyRepository repository;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里执行数据库操作</span><br>        repository.save(someEntity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、发生自身调用"><a href="#4、发生自身调用" class="headerlink" title="4、发生自身调用"></a>4、发生自身调用</h3><blockquote><p><strong>Self Invocation</strong></p></blockquote><p>当一个事务方法内部调用另一个事务方法时，事务失效可能发生。因为 Spring 默认使用基于代理的 AOP 来实现事务，内部自调用将会绕过代理对象，导致事务不被拦截。</p><p>示例：在下述情况下，<code>anotherTransactionalMethod()</code>方法内的事务将不会被激活。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyRepository repository;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里执行一些操作</span><br>        anotherTransactionalMethod();<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">anotherTransactionalMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里执行另一些操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、没有配置事务管理器"><a href="#5、没有配置事务管理器" class="headerlink" title="5、没有配置事务管理器"></a>5、没有配置事务管理器</h3><blockquote><p><strong>Missing Transaction Manager Configuration</strong></p></blockquote><p>如果应用程序中没有配置 Spring 的事务管理器，或者没有正确配置事务管理器，事务将无法正常工作。Spring 需要一个事务管理器来管理事务的开始、提交和回滚。</p><p>在 Spring 配置文件中配置事务管理器，如下所示：下述配置告诉 Spring 使用指定的数据源来管理事务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6、设置了不支持事务"><a href="#6、设置了不支持事务" class="headerlink" title="6、设置了不支持事务"></a>6、设置了不支持事务</h3><blockquote><p><strong>Unsupported Transaction Setting</strong></p></blockquote><p>如果在应用程序中设置了不支持事务的配置，如<code>@EnableTransactionManagement</code>注解的<code>mode</code>属性设置为<code>AdviceMode.PROXY</code>，而应用程序却使用了基于 AspectJ 的事务管理器，事务可能会失效。</p><p>示例：在下述情况下，事务可能会失效，因为配置了不支持事务的模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement(mode = AdviceMode.PROXY)</span> <span class="hljs-comment">// 设置了不支持事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br>    <span class="hljs-comment">// 其他配置...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、异常没有被抛出"><a href="#7、异常没有被抛出" class="headerlink" title="7、异常没有被抛出"></a>7、异常没有被抛出</h3><blockquote><p><strong>Unthrown Exception</strong></p></blockquote><p>Spring 的事务管理默认只会回滚受检异常（checked exception）。如果在方法中发生异常但没有被正确抛出，则事务可能不会回滚。</p><p>例如：在下述情况下，虽然发生异常，但由于没有将其正确抛出，事务可能不会回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 这里可能会抛出异常</span><br>        someMethod();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">// 异常被捕获，但没有被抛出</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 这里可能会抛出异常</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、异常类型不匹配"><a href="#8、异常类型不匹配" class="headerlink" title="8、异常类型不匹配"></a>8、异常类型不匹配</h3><blockquote><p><strong>Mismatched Exception Types</strong></p></blockquote><p>如果事务管理器配置捕获特定类型的异常进行回滚，但实际抛出的异常类型与配置不匹配，事务可能不会按预期回滚。</p><p>例如：在下述情况下，由于抛出<code>OtherException</code>而不是<code>MyCustomException</code>，事务可能不会回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = MyCustomException.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 这里可能会抛出其他类型的异常</span><br>        someMethod();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">// 这里捕获了异常，但是类型不匹配</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> OtherException &#123;<br>    <span class="hljs-comment">// 这里可能会抛出 OtherException</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>designModel</title>
    <link href="/2024/04/25/designModel/"/>
    <url>/2024/04/25/designModel/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><h3 id="1、开放封闭原则"><a href="#1、开放封闭原则" class="headerlink" title="1、开放封闭原则"></a>1、开放封闭原则</h3><blockquote><p><strong>Open Close Principle</strong></p></blockquote><p>OCP：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</p><p>OCP 原则要求设计者在需要修改现有代码时，不应该直接修改已有的代码，而是应该通过扩展现有代码来实现新的功能或修改。</p><p>代码实例：</p><p>实现计算机：<code>Operation</code> 是策略接口，定义一个 <code>calculate</code> 方法用于执行数学运算。<code>Addition</code> 和 <code>Subtraction</code> 是具体策略类，分别实现了加法和减法运算。<code>Calculator</code> 是上下文类，持有一个 <code>Operation</code> 对象，可以通过设置不同的策略对象来改变其行为。当需要添加新的数学运算时，只需要创建新的具体策略类，并在上下文中设置新的策略对象，而不需要修改现有的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Operation</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体策略类：加法操作</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Addition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Operation</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-keyword">return</span> num1 + num2;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略类：减法操作</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subtraction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Operation</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-keyword">return</span> num1 - num2;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-keyword">private</span> Operation operation;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOperation</span><span class="hljs-params">(Operation operation)</span> &#123;<br>        <span class="hljs-built_in">this</span>.operation = operation;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">performOperation</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (operation == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Operation not set&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> operation.calculate(num1, num2);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br><br>        <span class="hljs-comment">// 使用加法操作</span><br>        calculator.setOperation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Addition</span>());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> calculator.performOperation(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;5 + 3 = &quot;</span> + result1);<br><br>        <span class="hljs-comment">// 使用减法操作</span><br>        calculator.setOperation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Subtraction</span>());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> calculator.performOperation(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;8 - 4 = &quot;</span> + result2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、里氏代换原则"><a href="#2、里氏代换原则" class="headerlink" title="2、里氏代换原则"></a>2、里氏代换原则</h3><blockquote><p><strong>Liskov Substitution Principle</strong></p></blockquote><p>LSP：在使用基类的任何地方都可以替换为使用其继承的子类，即完美的替换基类。</p><p>LSP 原则要求子类型（派生类或子类）必须能够替换其基类型（基类或父类）的任何地方，而不破坏程序的正确性。</p><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog barks&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat meows&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br>        <span class="hljs-comment">// 里氏代换原则：可以在任何需要 Animal 类型的地方使用 Dog 或 Cat 类的对象</span><br>        dog.makeSound();<br>        cat.makeSound();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、依赖倒转原则"><a href="#3、依赖倒转原则" class="headerlink" title="3、依赖倒转原则"></a>3、依赖倒转原则</h3><blockquote><p><strong>Dependence Inversion Principle</strong></p></blockquote><p>DIP 原则：</p><ol><li>高层模块不应该依赖于低层模块，二者都应该依赖于抽象。</li><li>抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</li></ol><p>DIP 原则指导着建立松耦合的软件架构，使得高层模块不依赖于低层模块的具体实现细节，而是依赖于抽象。</p><p>该原则的核心思想是通过抽象来实现模块之间的松耦合，从而提高代码的灵活性和可维护性。当系统需要进行变更时，可以通过替换具体实现而不影响高层模块的代码。</p><p>代码实例：</p><p>考虑一个简单的电灯类和电灯开关类的依赖关系，根据依赖倒转原则，我们应该抽象出一个开关接口，电灯类依赖于这个开关接口，而不是具体的开关实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开关接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Switch</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOn</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOff</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 电灯类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br>    <span class="hljs-keyword">private</span> Switch switcher;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Light</span><span class="hljs-params">(Switch switcher)</span> &#123;<br>        <span class="hljs-built_in">this</span>.switcher = switcher;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toggle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (switcher != <span class="hljs-literal">null</span>) &#123;<br>            switcher.turnOn();<br>            switcher.turnOff();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 电灯开关类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightSwitch</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Switch</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is on&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOff</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is off&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Switch</span> <span class="hljs-variable">lightSwitch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightSwitch</span>();<br>        <span class="hljs-type">Light</span> <span class="hljs-variable">light</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>(lightSwitch);<br><br>        light.toggle();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、接口隔离原则"><a href="#4、接口隔离原则" class="headerlink" title="4、接口隔离原则"></a>4、接口隔离原则</h3><blockquote><p><strong>Interface Segregation Principle</strong></p></blockquote><p>ISP 原则强调接口的独立性和单一性，即客户端不应该强制依赖于其不需要的接口。</p><p>ISP 原则要求将大接口拆分为多个小接口，客户端只依赖于它们需要的接口，而不需要依赖于不需要的接口。如此可避免不必要的依赖，降低耦合度，提高代码的灵活性和可维护性。</p><p>代码实例：</p><p>考虑一个简单的打印机应用程序，它有一个打印机类 <code>Printer</code>，可以打印文本和图像。按照接口隔离原则，我们应该将打印文本和打印图像的功能分别定义在两个接口中，而不是定义在同一个接口中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打印文本接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">TextPrinter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printText</span><span class="hljs-params">(String text)</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印图像接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImagePrinter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printImage</span><span class="hljs-params">(String imageUrl)</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印机类实现打印文本接口和打印图像接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Printer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TextPrinter</span>, ImagePrinter &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printText</span><span class="hljs-params">(String text)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Printing text: &quot;</span> + text);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printImage</span><span class="hljs-params">(String imageUrl)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Printing image: &quot;</span> + imageUrl);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Printer</span> <span class="hljs-variable">printer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>();<br><br>        <span class="hljs-comment">// 打印文本</span><br>        printer.printText(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br><br>        <span class="hljs-comment">// 打印图像</span><br>        printer.printImage(<span class="hljs-string">&quot;https://example.com/image.png&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、迪米特法则"><a href="#5、迪米特法则" class="headerlink" title="5、迪米特法则"></a>5、迪米特法则</h3><blockquote><p><strong>Demeter Principle</strong></p><p><strong>迪米特法则，又称为最少知道原则（Law of Demeter，LoD）</strong></p></blockquote><p>该原则的核心思想是一个对象应当对其他对象有尽可能少的了解，即对象之间应该保持松散的耦合关系。</p><p>迪米特法则可以概括为以下几点：</p><ol><li>每个单元（类、模块、函数等）只应该与其密切相关的对象进行交互，而不是与一大堆不相关的对象进行交互。</li><li>类之间的通信应该通过最直接的方式进行，避免通过中间多层的对象进行传递消息。</li><li>不要让一个单元了解整个系统的结构，而应该只关注与之直接交互的对象。</li></ol><p>迪米特法则的目的是降低系统的耦合度，提高系统的灵活性和可维护性。通过减少对象之间的直接联系，可以使得系统的各个模块更容易被独立开发、测试、维护和重用。</p><p>代码实例：</p><p>考虑一个购物车系统，其中包含商品、购物车和订单三个类。按照迪米特法则，购物车类应该尽可能少地了解商品类和订单类的内部结构，而是通过商品类和订单类提供的接口进行交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 商品类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Product</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法...</span><br>&#125;<br><br><span class="hljs-comment">// 订单类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Product&gt; products;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Order</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.products = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">(Product product)</span> &#123;<br>        products.add(product);<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法...</span><br>&#125;<br><br><span class="hljs-comment">// 购物车类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCart</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Product&gt; products;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShoppingCart</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.products = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">(Product product)</span> &#123;<br>        products.add(product);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Order order)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Product product : products) &#123;<br>            order.addProduct(product);<br>        &#125;<br>        products.clear();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-string">&quot;iPhone&quot;</span>, <span class="hljs-number">999.99</span>);<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-number">699.99</span>);<br><br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>        cart.addProduct(product1);<br>        cart.addProduct(product2);<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        cart.checkout(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、单一职责原则"><a href="#6、单一职责原则" class="headerlink" title="6、单一职责原则"></a>6、单一职责原则</h3><blockquote><p><strong>Principle of single responsibility</strong></p></blockquote><p>SRP 原则指出一个类或模块应该有且只有一个引起它变化的原因，或者说一个类或模块应该只负责一种职责。</p><p>SRP 原则要求一个类或模块只做一件事情，并且做好这件事情。如果一个类或模块负责了多个不同的职责，那么它的设计就不够清晰，也不够灵活。</p><p>遵循 SRP 原则有助于提高代码的内聚性，即相关功能应该放在一起，不相关功能应该分开。</p><p>代码实例：</p><p>考虑一个简单的日志记录器类 <code>Logger</code>，它负责将日志信息记录到文件和控制台。按照单一职责原则，我们应该将文件日志记录和控制台日志记录分别放在两个类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 日志记录器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logToFile</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到文件</span><br>        System.out.println(<span class="hljs-string">&quot;Log to file: &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logToConsole</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到控制台</span><br>        System.out.println(<span class="hljs-string">&quot;Log to console: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 文件日志记录器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLogger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到文件</span><br>        System.out.println(<span class="hljs-string">&quot;Log to file: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 控制台日志记录器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsoleLogger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到控制台</span><br>        System.out.println(<span class="hljs-string">&quot;Log to console: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileLogger</span> <span class="hljs-variable">fileLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileLogger</span>();<br>        fileLogger.log(<span class="hljs-string">&quot;Error: File not found&quot;</span>);<br><br>        <span class="hljs-type">ConsoleLogger</span> <span class="hljs-variable">consoleLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleLogger</span>();<br>        consoleLogger.log(<span class="hljs-string">&quot;Warning: Memory is running low&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="GRASP-模式"><a href="#GRASP-模式" class="headerlink" title="GRASP 模式"></a>GRASP 模式</h2><blockquote><p>General Responsibility Assignment Software Patterns ，即”通用责任分配软件模式”</p><p>面向对象设计中常用的设计原则</p></blockquote><p>GRASP 模式旨在帮助设计者更好地分配类（对象）的职责，使得系统更加易于理解、扩展和维护</p><h3 id="专家模式"><a href="#专家模式" class="headerlink" title="专家模式"></a>专家模式</h3><p>任务应该分配给具有最多所需信息的类。即一个对象应该包含或掌握与其任务相关的信息。</p><h3 id="创造者原则"><a href="#创造者原则" class="headerlink" title="创造者原则"></a>创造者原则</h3><p>当一个类 A 需要创建另一个类 B 的实例时，类 A 应该是类 B 的聚合体，组合体，或者类 A 持有类 B 的引用。避免在类 A 中直接实例化类 B。</p><h3 id="低耦合原则"><a href="#低耦合原则" class="headerlink" title="低耦合原则"></a>低耦合原则</h3><blockquote><p><strong>耦合（Coupling）</strong>：耦合描述模块之间的依赖关系。</p><p>高耦合意味着模块之间的依赖性很强，一个模块的修改可能会导致其他模块的修改。</p><p>低耦合意味着模块之间的依赖性很弱，一个模块的修改不太可能影响其他模块。</p></blockquote><p>在软件设计中，耦合指的是模块间的依赖关系。低耦合意味着模块间的依赖关系越少越好，这样修改一个模块不会影响其他模块。</p><h3 id="高内聚原则"><a href="#高内聚原则" class="headerlink" title="高内聚原则"></a>高内聚原则</h3><blockquote><p><strong>内聚（Cohesion）</strong>：内聚描述模块内部元素之间的关联程度，即一个模块内部各个元素（如方法、属性等）彼此之间的联系。</p><p>高内聚意味着模块内的元素彼此之间关联紧密，每个模块只负责一项清晰的任务。</p><p>低内聚意味着模块内的元素关联性较弱，模块可能会包含多种不相关的功能。</p></blockquote><p>一个模块内的各个元素彼此关联紧密，只负责一个清晰的任务。高内聚的模块更容易理解、维护和重用。</p><h3 id="控制器原则"><a href="#控制器原则" class="headerlink" title="控制器原则"></a>控制器原则</h3><p>确定哪个类或对象负责接收用户输入、协调系统操作，并作出相应的响应。控制器将用户请求转发给适当的对象来处理。</p><h3 id="多态原则"><a href="#多态原则" class="headerlink" title="多态原则"></a>多态原则</h3><p>通过继承和接口实现多态性，允许不同的对象对同一消息作出不同的响应。</p><h3 id="纯虚构"><a href="#纯虚构" class="headerlink" title="纯虚构"></a>纯虚构</h3><p>为了降低耦合度，创建一个新的类或对象来处理系统中的特定任务，而不受现有领域对象的限制。</p><h3 id="中介原则"><a href="#中介原则" class="headerlink" title="中介原则"></a>中介原则</h3><p>引入一个中介者来管理对象之间的通信，减少对象之间的直接依赖关系。</p><h3 id="受保护变量原则"><a href="#受保护变量原则" class="headerlink" title="受保护变量原则"></a>受保护变量原则</h3><p>通过封装和抽象，保护系统中易变的部分，使得系统对变化的影响最小化。</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ol><li>工厂方法模式：将对象的创建和使用分离开来，客户端只需要知道工厂方法，而不需要知道具体的产品类。</li><li>抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体的类。</li><li>建造者模式：将一个复杂对象的构建过程与其表示分离开来，使得同样的构建过程可以创建不同的表示。</li><li>单例模式：确保某个类只有一个实例，并提供一个全局访问点来访问该实例。</li><li>原型模式：通过复制现有对象来创建新对象，而不是通过实例化类来创建对象。</li></ol><h4 id="1、工厂方法模式"><a href="#1、工厂方法模式" class="headerlink" title="1、工厂方法模式"></a>1、工厂方法模式</h4><p>将对象的创建和使用分离开来，客户端只需要知道工厂方法，而不需要知道具体的产品类。</p><p>工厂方法模式包括以下几个角色：</p><ol><li><strong>抽象产品（Product）</strong>：定义了产品的接口，是工厂方法所创建的对象的父类。</li><li><strong>具体产品（Concrete Product）</strong>：实现了抽象产品接口的具体类。</li><li><strong>抽象工厂（Creator）</strong>：定义了一个抽象的工厂方法，用于创建产品对象。通常是一个抽象类，其中可能包含一些通用的逻辑代码。</li><li><strong>具体工厂（Concrete Creator）</strong>：继承自抽象工厂，实现了工厂方法，用于创建具体的产品对象。</li></ol><p>以下是一个简单的工厂方法模式的示例（以创建不同类型的日志记录器为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象产品</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品 - 文件日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to file: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品 - 数据库日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to database: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerFactory</span> &#123;<br>    <span class="hljs-keyword">abstract</span> Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂 - 文件日志记录器工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLoggerFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LoggerFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileLogger</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂 - 数据库日志记录器工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLoggerFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LoggerFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseLogger</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、抽象工厂模式"><a href="#2、抽象工厂模式" class="headerlink" title="2、抽象工厂模式"></a>2、抽象工厂模式</h4><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体的类。</p><p>抽象工厂模式包含以下几个角色：</p><ol><li><strong>抽象工厂（Abstract Factory）</strong>：定义了创建产品对象的方法接口，它是工厂方法模式的升级版，用于创建一系列相关或依赖对象的家族。</li><li><strong>具体工厂（Concrete Factory）</strong>：实现了抽象工厂接口，用于创建具体的产品对象。</li><li><strong>抽象产品（Abstract Product）</strong>：定义了产品对象的接口，是具体产品对象的父类。</li><li><strong>具体产品（Concrete Product）</strong>：实现了抽象产品接口，是被具体工厂创建的对象。</li></ol><p>抽象工厂模式将每个具体工厂与一组具体产品相关联，这样客户端就可以通过选择不同的具体工厂来创建不同类型的产品对象，从而实现了一种产品族的配置。</p><p>以下是一个简单的抽象工厂模式的示例（以创建不同类型的手机和配件为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象产品A - 手机</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品A - 苹果手机</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplePhone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Make Apple Phone&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品A - 华为手机</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiPhone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Make Huawei Phone&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象产品B - 手机配件</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PhoneAccessory</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">produce</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品B - 苹果手机配件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleAccessory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneAccessory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Produce Apple Accessory&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品B - 华为手机配件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiAccessory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneAccessory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Produce Huawei Accessory&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PhoneFactory</span> &#123;<br>    Phone <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span>;<br>    PhoneAccessory <span class="hljs-title function_">createPhoneAccessory</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂A - 苹果手机工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplePhone</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PhoneAccessory <span class="hljs-title function_">createPhoneAccessory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppleAccessory</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂B - 华为手机工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaweiPhone</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PhoneAccessory <span class="hljs-title function_">createPhoneAccessory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaweiAccessory</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、建造者模式"><a href="#3、建造者模式" class="headerlink" title="3、建造者模式"></a>3、建造者模式</h4><p>将一个复杂对象的构建过程与其表示分离开来，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式包含以下几个角色：</p><ol><li><strong>产品（Product）</strong>：表示被构建的复杂对象。在建造过程完成后，通常会返回一个包含所有属性的最终产品对象。</li><li><strong>抽象建造者（Builder）</strong>：定义了构建产品对象的抽象方法，包括设置各个属性的方法。</li><li><strong>具体建造者（Concrete Builder）</strong>：实现了抽象建造者接口，负责构建和装配产品的各个部件，并定义了具体的构建步骤。</li><li><strong>指挥者（Director）</strong>：负责调用具体建造者来构建产品对象。它不直接创建产品对象，而是通过调用具体建造者的方法来构建产品。</li></ol><p>建造者模式通常适用于以下情况：</p><ul><li>创建对象的构建过程比较复杂，需要很多步骤或者涉及到很多部件。</li><li>希望将对象的构建过程和表示分离开来，以便能够灵活地组合不同的部件和构建步骤。</li></ul><p>以下是一个简单的建造者模式的示例（以创建一个电脑对象为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 产品类 - 电脑</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-keyword">private</span> String cpu;<br>    <span class="hljs-keyword">private</span> String memory;<br>    <span class="hljs-keyword">private</span> String hardDisk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCpu</span><span class="hljs-params">(String cpu)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cpu = cpu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemory</span><span class="hljs-params">(String memory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.memory = memory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHardDisk</span><span class="hljs-params">(String hardDisk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hardDisk = hardDisk;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法...</span><br>&#125;<br><br><span class="hljs-comment">// 抽象建造者</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ComputerBuilder</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCpu</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMemory</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHardDisk</span><span class="hljs-params">()</span>;<br>    Computer <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体建造者 - 高配版电脑建造者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HighConfigComputerBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ComputerBuilder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCpu</span><span class="hljs-params">()</span> &#123;<br>        computer.setCpu(<span class="hljs-string">&quot;Intel i9&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMemory</span><span class="hljs-params">()</span> &#123;<br>        computer.setMemory(<span class="hljs-string">&quot;32GB&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHardDisk</span><span class="hljs-params">()</span> &#123;<br>        computer.setHardDisk(<span class="hljs-string">&quot;1TB SSD&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> computer;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 指挥者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span> &#123;<br>    <span class="hljs-keyword">private</span> ComputerBuilder builder;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuilder</span><span class="hljs-params">(ComputerBuilder builder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.builder = builder;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">construct</span><span class="hljs-params">()</span> &#123;<br>        builder.buildCpu();<br>        builder.buildMemory();<br>        builder.buildHardDisk();<br>        <span class="hljs-keyword">return</span> builder.getResult();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、单例模式"><a href="#4、单例模式" class="headerlink" title="4、单例模式"></a>4、单例模式</h4><p>确保某个类只有一个实例，并提供一个全局访问点来访问该实例。</p><p>实现单例模式的一般步骤包括：</p><ol><li><strong>私有构造函数</strong>：确保外部不能通过构造函数来创建该类的实例。</li><li><strong>静态成员变量</strong>：在类中定义一个静态成员变量来保存该类的唯一实例。</li><li><strong>静态方法</strong>：提供一个静态方法来访问该唯一实例，并确保在需要时进行实例化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-comment">// 私有构造函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">// 静态方法获取唯一实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、原型模式"><a href="#5、原型模式" class="headerlink" title="5、原型模式"></a>5、原型模式</h4><p>通过复制现有对象来创建新对象，而不是通过实例化类来创建对象。</p><p>原型模式包含以下几个角色：</p><ol><li><strong>原型接口（Prototype）</strong>：声明了一个克隆自身的方法，用于复制自身来创建新对象。</li><li><strong>具体原型类（Concrete Prototype）</strong>：实现了原型接口，负责实现克隆自身的方法。</li><li><strong>客户端（Client）</strong>：负责使用原型对象来创建新对象的客户端代码。</li></ol><p>原型模式通常适用于以下情况：</p><ul><li>当创建对象的成本比较高昂，或者对象的创建过程比较复杂，但新对象与现有对象相似度很高时。</li><li>当需要避免通过子类进行复杂的初始化配置时，而是希望通过复制一个已有的实例来创建新实例时。</li></ul><p>以下是一个简单的原型模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 原型接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Prototype</span> &#123;<br>    Prototype <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体原型类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcretePrototype</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Prototype</span> &#123;<br>    <span class="hljs-keyword">private</span> String field;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcretePrototype</span><span class="hljs-params">(String field)</span> &#123;<br>        <span class="hljs-built_in">this</span>.field = field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getField</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Prototype <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建一个新对象，并将当前对象的属性复制给新对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(<span class="hljs-built_in">this</span>.field);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcretePrototype</span> <span class="hljs-variable">prototype</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(<span class="hljs-string">&quot;data&quot;</span>);<br>        <span class="hljs-type">ConcretePrototype</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> (ConcretePrototype) prototype.clone();<br><br>        System.out.println(<span class="hljs-string">&quot;Original Object: &quot;</span> + prototype.getField());<br>        System.out.println(<span class="hljs-string">&quot;Cloned Object: &quot;</span> + clone.getField());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ol><li>适配器模式：将一个类的接口转换成客户端所期待的另一个接口，使得原本由于接口不兼容而不能一起工作的类能够协同工作。</li><li>装饰器模式：允许向一个对象动态地添加新的功能，而无需修改其源代码。</li><li>代理模式：通过代理对象控制对原始对象的访问。</li><li>外观模式：提供一个统一的接口，用于访问子系统中的一组接口。</li><li>桥接模式：将抽象部分与实现部分分离，使它们可以独立变化，从而可以动态地组合不同的抽象和实现。</li><li>组合模式：允许将对象组合成树形结构以表示“部分-整体”的层次结构。</li><li>享元模式：通过共享对象来减少内存使用和提高性能。在享元模式中，对象被分为内部状态（Intrinsic State）和外部状态（Extrinsic State），其中内部状态可以被多个对象共享，而外部状态需要在对象之间单独维护。</li></ol><h4 id="1、适配器模式"><a href="#1、适配器模式" class="headerlink" title="1、适配器模式"></a>1、适配器模式</h4><p>将一个类的接口转换成客户端所期待的另一个接口，使得原本由于接口不兼容而不能一起工作的类能够协同工作。</p><p>适配器模式包含以下几个角色：</p><ol><li><strong>目标接口（Target）</strong>：定义客户端使用的接口，客户端期待的接口。</li><li><strong>适配器（Adapter）</strong>：实现了目标接口，并包装了一个需要适配的类的对象，在目标接口中调用被包装对象的方法。</li><li><strong>被适配者（Adaptee）</strong>：需要被适配的类，其接口与目标接口不兼容。</li><li><strong>客户端（Client）</strong>：通过目标接口与适配器交互，调用适配器的方法来实现需要的功能。</li></ol><p>适配器模式通常适用于以下情况：</p><ul><li>当需要使用一个已经存在的类，而它的接口不符合需求时。</li><li>当需要创建一个可复用的类，与一些不相关或不可预见的类协作时。</li></ul><p>以下是一个简单的适配器模式的示例（以一个日志记录器适配器为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 目标接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体目标 - 文件日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to file: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 适配器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">private</span> DatabaseLogger databaseLogger;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoggerAdapter</span><span class="hljs-params">(DatabaseLogger databaseLogger)</span> &#123;<br>        <span class="hljs-built_in">this</span>.databaseLogger = databaseLogger;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        databaseLogger.writeLog(message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 被适配者 - 数据库日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLogger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLog</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to database: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">fileLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileLogger</span>();<br>        fileLogger.log(<span class="hljs-string">&quot;This is a log message to file.&quot;</span>);<br><br>        <span class="hljs-comment">// 使用适配器将数据库日志记录器适配成目标接口</span><br>        <span class="hljs-type">DatabaseLogger</span> <span class="hljs-variable">databaseLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseLogger</span>();<br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">dbLoggerAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggerAdapter</span>(databaseLogger);<br>        dbLoggerAdapter.log(<span class="hljs-string">&quot;This is a log message to database.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、装饰器模式"><a href="#2、装饰器模式" class="headerlink" title="2、装饰器模式"></a>2、装饰器模式</h4><p>允许向一个对象动态地添加新的功能，而无需修改其源代码。</p><p>装饰器模式包含以下几个角色：</p><ol><li><strong>抽象构件（Component）</strong>：定义了一个对象接口，可以给这些对象动态地添加新的职责。</li><li><strong>具体构件（Concrete Component）</strong>：实现了抽象构件接口，是被装饰的对象，可以给这个对象添加新的职责。</li><li><strong>装饰器（Decorator）</strong>：持有一个抽象构件的引用，并实现了抽象构件的接口，可以动态地给具体构件对象添加新的职责。</li><li><strong>具体装饰器（Concrete Decorator）</strong>：具体的装饰器类，实现了装饰器接口，并且通过构造函数接收一个抽象构件对象，在原有对象的基础上添加新的功能。</li></ol><p>装饰器模式通常适用于以下情况：</p><ul><li>需要向一个对象添加额外的功能，而不想影响到其他对象。</li><li>需要动态地给对象添加功能，而且添加的功能可以动态撤销。</li></ul><p>以下是一个简单的装饰器模式的示例（以咖啡和配料为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象构件 - 咖啡</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体构件 - 普通咖啡</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleCoffee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Simple Coffee&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 装饰器 - 抽象装饰器</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    <span class="hljs-keyword">protected</span> Coffee decoratedCoffee;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CoffeeDecorator</span><span class="hljs-params">(Coffee decoratedCoffee)</span> &#123;<br>        <span class="hljs-built_in">this</span>.decoratedCoffee = decoratedCoffee;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> decoratedCoffee.getDescription();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> decoratedCoffee.cost();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体装饰器 - 奶油</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreamDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CoffeeDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CreamDecorator</span><span class="hljs-params">(Coffee decoratedCoffee)</span> &#123;<br>        <span class="hljs-built_in">super</span>(decoratedCoffee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDescription() + <span class="hljs-string">&quot;, Cream&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.cost() + <span class="hljs-number">0.5</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体装饰器 - 糖</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SugarDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CoffeeDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SugarDecorator</span><span class="hljs-params">(Coffee decoratedCoffee)</span> &#123;<br>        <span class="hljs-built_in">super</span>(decoratedCoffee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDescription() + <span class="hljs-string">&quot;, Sugar&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.cost() + <span class="hljs-number">0.2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">simpleCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCoffee</span>();<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + simpleCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + simpleCoffee.cost());<br><br>        <span class="hljs-comment">// 添加奶油装饰器</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">creamCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreamDecorator</span>(simpleCoffee);<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + creamCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + creamCoffee.cost());<br><br>        <span class="hljs-comment">// 添加糖装饰器</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">sugarCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SugarDecorator</span>(simpleCoffee);<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + sugarCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + sugarCoffee.cost());<br><br>        <span class="hljs-comment">// 添加奶油和糖装饰器</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">creamAndSugarCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreamDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SugarDecorator</span>(simpleCoffee));<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + creamAndSugarCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + creamAndSugarCoffee.cost());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、代理模式"><a href="#3、代理模式" class="headerlink" title="3、代理模式"></a>3、代理模式</h4><p>通过代理对象控制对原始对象的访问。</p><p>代理模式包含以下几个角色：</p><ol><li><strong>抽象主题（Subject）</strong>：定义了真实主题和代理主题的共同接口，这样就在任何使用真实主题的地方都可以使用代理主题。</li><li><strong>真实主题（Real Subject）</strong>：定义了代理所代表的真实对象，是最终要引用的对象。</li><li><strong>代理（Proxy）</strong>：保存了对真实主题的引用，并提供与真实主题相同的接口，客户端通过代理类来访问真实主题。</li><li><strong>客户端（Client）</strong>：通过代理来访问真实主题。</li></ol><p>代理模式通常适用于以下情况：</p><ul><li>需要在访问一个对象时添加额外的功能，但又不想修改该对象的代码。</li><li>需要对访问某个对象的方式进行控制，例如权限控制、延迟加载等。</li></ul><p>以下是一个简单的代理模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象主题</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 真实主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> String filename;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealImage</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>        loadFromDisk();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadFromDisk</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Loading image from disk: &quot;</span> + filename);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Displaying image: &quot;</span> + filename);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> RealImage realImage;<br>    <span class="hljs-keyword">private</span> String filename;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyImage</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (realImage == <span class="hljs-literal">null</span>) &#123;<br>            realImage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealImage</span>(filename);<br>        &#125;<br>        realImage.display();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Image</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyImage</span>(<span class="hljs-string">&quot;test.jpg&quot;</span>);<br><br>        <span class="hljs-comment">// 图片加载过程是延迟的，只有在真正调用 display() 方法时才会加载</span><br>        image.display();<br><br>        <span class="hljs-comment">// 再次调用 display() 方法，不需要重新加载图片</span><br>        image.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、外观模式"><a href="#4、外观模式" class="headerlink" title="4、外观模式"></a>4、外观模式</h4><p>提供一个统一的接口，用于访问子系统中的一组接口。</p><p>外观模式包含以下几个角色：</p><ol><li><strong>外观（Facade）</strong>：提供了一个简单的接口，隐藏了子系统的复杂性，使得客户端可以更容易地与子系统进行交互。</li><li><strong>子系统（Subsystem）</strong>：包含一组相关的类，实现了子系统的功能，但这些类对客户端来说是透明的，即客户端不需要直接与它们进行交互。</li></ol><p>外观模式通常适用于以下情况：</p><ul><li>当一个复杂系统的子系统之间存在复杂的依赖关系，需要一个统一的接口来简化客户端与子系统之间的交互。</li><li>当客户端需要使用一个复杂的子系统，但只需要与该子系统的一部分进行交互时。</li></ul><p>以下是一个简单的外观模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 子系统A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubsystemA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SubsystemA operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子系统B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubsystemB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationB</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SubsystemB operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子系统C</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubsystemC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationC</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SubsystemC operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 外观</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Facade</span> &#123;<br>    <span class="hljs-keyword">private</span> SubsystemA subsystemA;<br>    <span class="hljs-keyword">private</span> SubsystemB subsystemB;<br>    <span class="hljs-keyword">private</span> SubsystemC subsystemC;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Facade</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.subsystemA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubsystemA</span>();<br>        <span class="hljs-built_in">this</span>.subsystemB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubsystemB</span>();<br>        <span class="hljs-built_in">this</span>.subsystemC = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubsystemC</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 提供一个简单的接口，隐藏了子系统的复杂性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        subsystemA.operationA();<br>        subsystemB.operationB();<br>        subsystemC.operationC();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 客户端通过外观来访问子系统，而不需要直接与子系统进行交互</span><br>        <span class="hljs-type">Facade</span> <span class="hljs-variable">facade</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Facade</span>();<br>        facade.operation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、桥接模式"><a href="#5、桥接模式" class="headerlink" title="5、桥接模式"></a>5、桥接模式</h4><p>将抽象部分与实现部分分离，使它们可以独立变化，从而可以动态地组合不同的抽象和实现。</p><p>桥接模式包含以下几个角色：</p><ol><li><strong>抽象部分（Abstraction）</strong>：定义了抽象部分的接口，并维护一个指向实现部分的引用。</li><li><strong>扩充抽象类（Refined Abstraction）</strong>：拓展了抽象部分的接口，通常为抽象类，在抽象部分的基础上添加了更多的方法或行为。</li><li><strong>实现部分（Implementor）</strong>：定义了实现部分的接口，该接口不一定与抽象部分完全相同，但它们之间必须是相互独立的。</li><li><strong>具体实现类（Concrete Implementor）</strong>：实现了实现部分的接口，提供具体的实现。</li></ol><p>桥接模式通常适用于以下情况：</p><ul><li>当需要避免在抽象部分和实现部分之间形成静态的绑定关系时。</li><li>当一个类存在两个（或多个）变化的维度，且需要在这些维度上独立扩展时。</li></ul><p>以下是一个简单的桥接模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现部分接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Implementor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationImpl</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体实现类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteImplementorA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Implementor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Concrete Implementor A operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体实现类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteImplementorB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Implementor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Concrete Implementor B operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象部分</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstraction</span> &#123;<br>    <span class="hljs-keyword">protected</span> Implementor implementor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Abstraction</span><span class="hljs-params">(Implementor implementor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.implementor = implementor;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 扩充抽象类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefinedAbstraction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstraction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RefinedAbstraction</span><span class="hljs-params">(Implementor implementor)</span> &#123;<br>        <span class="hljs-built_in">super</span>(implementor);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        implementor.operationImpl();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Implementor</span> <span class="hljs-variable">implementorA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteImplementorA</span>();<br>        <span class="hljs-type">Implementor</span> <span class="hljs-variable">implementorB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteImplementorB</span>();<br><br>        <span class="hljs-type">Abstraction</span> <span class="hljs-variable">abstractionA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefinedAbstraction</span>(implementorA);<br>        abstractionA.operation();<br><br>        <span class="hljs-type">Abstraction</span> <span class="hljs-variable">abstractionB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefinedAbstraction</span>(implementorB);<br>        abstractionB.operation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、组合模式"><a href="#6、组合模式" class="headerlink" title="6、组合模式"></a>6、组合模式</h4><p>允许将对象组合成树形结构以表示“部分-整体”的层次结构。</p><p>组合模式包含以下几个角色：</p><ol><li><strong>组件（Component）</strong>：声明了组合对象和叶子对象的公共接口，可以包含所有子类共有的行为和属性。</li><li><strong>叶子（Leaf）</strong>：表示树中的叶子节点对象，叶子节点没有子节点。</li><li><strong>组合（Composite）</strong>：表示树中的组合对象，组合对象可以包含叶子对象和其他组合对象作为其子节点。</li><li><strong>客户端（Client）</strong>：通过组合对象和叶子对象的共同接口来进行操作。</li></ol><p>组合模式通常适用于以下情况：</p><ul><li>当想要表示对象的“部分-整体”层次结构，并且希望用户统一地对待所有对象时。</li><li>当希望用户忽略组合对象与叶子对象之间的差异，并一致地使用它们时。</li></ul><p>以下是一个简单的组合模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 抽象组件</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 叶子组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Leaf</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Leaf &quot;</span> + name + <span class="hljs-string">&quot; operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 组合组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Component&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span> &#123;<br>        children.add(component);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span> &#123;<br>        children.remove(component);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Composite operation&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Component component : children) &#123;<br>            component.operation();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建组合对象</span><br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">composite</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>();<br><br>        <span class="hljs-comment">// 添加叶子对象</span><br>        composite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf A&quot;</span>));<br>        composite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf B&quot;</span>));<br><br>        <span class="hljs-comment">// 创建子组合对象</span><br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">subComposite</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>();<br>        subComposite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf C&quot;</span>));<br>        subComposite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf D&quot;</span>));<br><br>        <span class="hljs-comment">// 将子组合对象添加到父组合对象</span><br>        composite.add(subComposite);<br><br>        <span class="hljs-comment">// 执行组合对象的操作</span><br>        composite.operation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、享元模式"><a href="#7、享元模式" class="headerlink" title="7、享元模式"></a>7、享元模式</h4><p>通过共享对象来减少内存使用和提高性能。在享元模式中，对象被分为内部状态（Intrinsic State）和外部状态（Extrinsic State），其中内部状态可以被多个对象共享，而外部状态需要在对象之间单独维护。</p><p>享元模式（Flyweight Pattern）是一种结构型设计模式，其目的是通过共享对象来减少内存使用和提高性能。在享元模式中，对象被分为内部状态（Intrinsic State）和外部状态（Extrinsic State），其中内部状态可以被多个对象共享，而外部状态需要在对象之间单独维护。</p><p>享元模式包含以下几个角色：</p><ol><li><strong>享元工厂（Flyweight Factory）</strong>：负责创建和管理享元对象，确保对象被正确地共享和重复使用。</li><li><strong>抽象享元（Flyweight）</strong>：声明了共享对象的接口，通过这个接口可以接收和操作外部状态。</li><li><strong>具体享元（Concrete Flyweight）</strong>：实现了抽象享元接口，并实现了内部状态的共享。</li><li><strong>客户端（Client）</strong>：通过享元工厂获取享元对象，并设置或获取外部状态，然后使用享元对象。</li></ol><p>享元模式通常适用于以下情况：</p><ul><li>当系统中存在大量相似对象，这些对象具有一些共同的属性，可以抽取出来作为内部状态进行共享。</li><li>当需要缓存对象以提高性能时，可以使用享元模式来重复使用相似对象。</li></ul><p>以下是一个简单的享元模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// 抽象享元</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(String color)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体享元</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> String color;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(String color)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Drawing circle with color: &quot;</span> + color);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 享元工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Shape&gt; circleMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shape <span class="hljs-title function_">getCircle</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> (Circle) circleMap.get(color);<br><br>        <span class="hljs-keyword">if</span> (circle == <span class="hljs-literal">null</span>) &#123;<br>            circle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>            circleMap.put(color, circle);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> circle;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] colors = &#123;<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>&#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>            <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> (Circle) ShapeFactory.getCircle(getRandomColor());<br>            circle.draw(getRandomColor());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRandomColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> colors[(<span class="hljs-type">int</span>) (Math.random() * colors.length)];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ol><li>策略模式：策略模式定义一系列算法，并将每个算法封装起来，使它们可以相互替换。</li><li>模板方法模式：模板方法模式定义一个操作中的算法的框架，将某些步骤延迟到子类中实现。</li><li>观察者模式：观察者模式定义一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。</li><li>迭代子模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</li><li>责任链模式：责任链模式允许你将请求沿着处理者链进行传递，直到有一个处理者能够处理它。责任链模式将请求发送者和接收者解耦，使得多个对象都有机会处理请求，同时避免了请求发送者需要知道处理请求的具体处理者的情况。</li><li>命令模式：将请求封装成一个对象，从而允许使用不同的请求、队列或者日志来参数化其他对象，并支持可撤销的操作。</li><li>备忘录模式：允许在不暴露对象实现细节的情况下保存和恢复对象的内部状态。备忘录模式通常用于需要记录对象状态历史、撤销操作或者提供快照功能的场景。</li><li>状态模式：允许对象在内部状态改变时改变它的行为，看起来好像改变了它的类。状态模式将每个状态封装成一个类，并将对象的行为委托给当前状态对象。</li><li>访问者模式：访问者模式能够将算法与对象结构分离开来，使得可以在不改变对象结构的情况下定义新的操作。访问者模式的核心思想是在不改变元素的类的前提下，通过定义访问者类来对元素进行操作。</li><li>中介者模式：中介者模式通过封装一系列对象之间的交互方式，来减少对象之间的直接依赖关系，从而降低系统的耦合性。中介者模式将系统中各个对象之间的交互行为集中到中介者对象中进行处理，而不是让对象之间相互引用。</li><li>解释器模式：解释器模式定义一种语言的文法，并且构建一个解释器来解释这个语言中的句子。解释器模式通常用于处理复杂的语法或规则，它将一个表达式解析成一个抽象语法树，并提供一种灵活的方式来进行解释、执行或操作。</li></ol><h4 id="1、策略模式"><a href="#1、策略模式" class="headerlink" title="1、策略模式"></a>1、策略模式</h4><p>策略模式定义一系列算法，并将每个算法封装起来，使它们可以相互替换。</p><p>策略模式包含以下几个角色：</p><ol><li><strong>策略接口（Strategy）</strong>：定义了所有支持的算法的通用接口。</li><li><strong>具体策略（Concrete Strategy）</strong>：实现了策略接口，提供了具体的算法实现。</li><li><strong>上下文（Context）</strong>：维护一个对策略对象的引用，同时提供了一个接口，供客户端调用。</li></ol><p>策略模式通常适用于以下情况：</p><ul><li>当需要在运行时选择算法时，可以使用策略模式来动态地切换算法。</li><li>当一个类有多种行为，而这些行为在不同的场景下可能发生变化时。</li></ul><p>以下是一个简单的策略模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体策略 - 支付宝支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AliPayStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Paid &quot;</span> + amount + <span class="hljs-string">&quot; via AliPay&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略 - 微信支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatPayStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Paid &quot;</span> + amount + <span class="hljs-string">&quot; via WeChatPay&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentContext</span> &#123;<br>    <span class="hljs-keyword">private</span> PaymentStrategy paymentStrategy;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPaymentStrategy</span><span class="hljs-params">(PaymentStrategy paymentStrategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.paymentStrategy = paymentStrategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (paymentStrategy != <span class="hljs-literal">null</span>) &#123;<br>            paymentStrategy.pay(amount);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;No payment method selected&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PaymentContext</span> <span class="hljs-variable">paymentContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentContext</span>();<br><br>        <span class="hljs-comment">// 使用支付宝支付</span><br>        paymentContext.setPaymentStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AliPayStrategy</span>());<br>        paymentContext.pay(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// 使用微信支付</span><br>        paymentContext.setPaymentStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeChatPayStrategy</span>());<br>        paymentContext.pay(<span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、模板方法模式"><a href="#2、模板方法模式" class="headerlink" title="2、模板方法模式"></a>2、模板方法模式</h4><p>模板方法模式定义一个操作中的算法的框架，将某些步骤延迟到子类中实现。</p><p>模板方法模式包含以下几个角色：</p><ol><li><strong>抽象模板类（Abstract Template）</strong>：定义了一个模板方法，其中包含了算法的骨架，具体步骤可以由子类实现。</li><li><strong>具体模板类（Concrete Template）</strong>：实现了抽象模板类中的具体步骤，完成算法的各个步骤。</li><li><strong>钩子方法（Hook Method）</strong>：在抽象模板类中定义的可选步骤，子类可以选择性地实现。</li><li><strong>具体子类（Concrete Subclass）</strong>：实现了抽象模板类中的抽象方法，以完成具体的算法。</li></ol><p>模板方法模式通常适用于以下情况：</p><ul><li>当有一些通用的步骤，但各个子类又有不同的实现时，可以将这些通用步骤放在抽象模板类中实现。</li><li>当不想让子类改变算法的整体结构，但又允许子类改变算法中的某些特定步骤时。</li></ul><p>以下是一个简单的模板方法模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象模板类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlay</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endPlay</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 模板方法，定义了算法的骨架</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        initialize();<br>        startPlay();<br>        endPlay();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体模板类 - 篮球游戏</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasketballGame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Game</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Basketball game initialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Basketball game started&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">endPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Basketball game ended&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体模板类 - 足球游戏</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FootballGame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Game</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Football game initialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Football game started&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">endPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Football game ended&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Game</span> <span class="hljs-variable">basketballGame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasketballGame</span>();<br>        basketballGame.play();<br><br>        System.out.println();<br><br>        <span class="hljs-type">Game</span> <span class="hljs-variable">footballGame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FootballGame</span>();<br>        footballGame.play();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、观察者模式"><a href="#3、观察者模式" class="headerlink" title="3、观察者模式"></a>3、观察者模式</h4><blockquote><p>观察者模式也被称为发布-订阅（Publish-Subscribe）模式。</p></blockquote><p>观察者模式定义一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。</p><p>观察者模式包含以下几个角色：</p><ol><li><strong>主题（Subject）</strong>：也称为被观察者或可观察者，它维护一系列观察者对象，并提供添加、删除和通知观察者的方法。</li><li><strong>观察者（Observer）</strong>：定义了一个更新接口，使得在主题状态改变时能够接收到通知并进行相应的处理。</li><li><strong>具体主题（Concrete Subject）</strong>：实现了主题接口，负责维护具体的观察者列表，并在状态改变时发送通知给观察者。</li><li><strong>具体观察者（Concrete Observer）</strong>：实现了观察者接口，定义了在接收到主题通知时所采取的具体行动。</li></ol><p>观察者模式通常适用于以下情况：</p><ul><li>当一个对象的改变需要通知其他对象，并且不知道这些对象是谁时，可以使用观察者模式。</li><li>当一个对象的改变需要同时改变其他对象，而且它不知道具体有多少个对象需要改变时，也可以使用观察者模式。</li></ul><p>以下是一个简单的观察者模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 主题</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>        notifyObservers();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.add(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.remove(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;<br>            observer.update(state);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 观察者</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserverA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteObserverA: State changed to &quot;</span> + state);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserverB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteObserverB: State changed to &quot;</span> + state);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteSubject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject</span>();<br>        <span class="hljs-type">Observer</span> <span class="hljs-variable">observerA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserverA</span>();<br>        <span class="hljs-type">Observer</span> <span class="hljs-variable">observerB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserverB</span>();<br><br>        subject.attach(observerA);<br>        subject.attach(observerB);<br><br>        subject.setState(<span class="hljs-number">10</span>);<br>        subject.setState(<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、迭代子模式"><a href="#4、迭代子模式" class="headerlink" title="4、迭代子模式"></a>4、迭代子模式</h4><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p><p>迭代子模式包含以下几个角色：</p><ol><li><strong>迭代器接口（Iterator）</strong>：定义了访问和遍历聚合对象元素的接口。</li><li><strong>具体迭代器（Concrete Iterator）</strong>：实现了迭代器接口，负责对聚合对象进行遍历并记录当前位置。</li><li><strong>聚合接口（Aggregate）</strong>：定义了创建迭代器对象的接口。</li><li><strong>具体聚合（Concrete Aggregate）</strong>：实现了聚合接口，负责创建对应的具体迭代器对象。</li></ol><p>迭代子模式通常适用于以下情况：</p><ul><li>当需要对聚合对象进行遍历并且不想暴露其内部结构时，可以使用迭代子模式。</li><li>当需要提供一种统一的方法来访问不同类型的聚合对象时，也可以使用迭代子模式。</li></ul><p>以下是一个简单的迭代子模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 迭代器接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>    Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; elements;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteIterator</span><span class="hljs-params">(List&lt;Object&gt; elements)</span> &#123;<br>        <span class="hljs-built_in">this</span>.elements = elements;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> position &lt; elements.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (hasNext()) &#123;<br>            <span class="hljs-keyword">return</span> elements.get(position++);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 聚合接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体聚合</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteAggregate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>        elements.add(element);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteIterator</span>(elements);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteAggregate</span> <span class="hljs-variable">aggregate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteAggregate</span>();<br>        aggregate.add(<span class="hljs-string">&quot;Element 1&quot;</span>);<br>        aggregate.add(<span class="hljs-string">&quot;Element 2&quot;</span>);<br>        aggregate.add(<span class="hljs-string">&quot;Element 3&quot;</span>);<br><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> aggregate.createIterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、责任链模式"><a href="#5、责任链模式" class="headerlink" title="5、责任链模式"></a>5、责任链模式</h4><p>责任链模式允许你将请求沿着处理者链进行传递，直到有一个处理者能够处理它。责任链模式将请求发送者和接收者解耦，使得多个对象都有机会处理请求，同时避免了请求发送者需要知道处理请求的具体处理者的情况。</p><p>责任链模式包含以下几个角色：</p><ol><li><strong>处理者接口（Handler）</strong>：定义了处理请求的接口，通常包含一个指向下一个处理者的引用。</li><li><strong>具体处理者（Concrete Handler）</strong>：实现了处理者接口，负责处理请求，如果自己无法处理，则将请求传递给下一个处理者。</li><li><strong>客户端（Client）</strong>：创建并且发送请求到处理者链中的第一个处理者。</li></ol><p>责任链模式通常适用于以下情况：</p><ul><li>当有多个对象可以处理同一个请求，并且客户端不知道哪个对象能够处理时，可以使用责任链模式。</li><li>当需要在不明确指定接收者的情况下，通过一组对象之一来处理请求时，也可以使用责任链模式。</li></ul><p>以下是一个简单的责任链模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 处理者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体处理者A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandlerA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">private</span> Handler nextHandler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextHandler</span><span class="hljs-params">(Handler handler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nextHandler = handler;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request &lt; <span class="hljs-number">10</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ConcreteHandlerA handles request: &quot;</span> + request);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nextHandler != <span class="hljs-literal">null</span>) &#123;<br>            nextHandler.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体处理者B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandlerB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">private</span> Handler nextHandler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextHandler</span><span class="hljs-params">(Handler handler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nextHandler = handler;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request &gt;= <span class="hljs-number">10</span> &amp;&amp; request &lt; <span class="hljs-number">20</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ConcreteHandlerB handles request: &quot;</span> + request);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nextHandler != <span class="hljs-literal">null</span>) &#123;<br>            nextHandler.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建处理者对象</span><br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handlerA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandlerA</span>();<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handlerB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandlerB</span>();<br><br>        <span class="hljs-comment">// 设置处理者之间的关系</span><br>        handlerA.setNextHandler(handlerB);<br><br>        <span class="hljs-comment">// 发送请求</span><br>        handlerA.handleRequest(<span class="hljs-number">5</span>);<br>        handlerA.handleRequest(<span class="hljs-number">15</span>);<br>        handlerA.handleRequest(<span class="hljs-number">25</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、命令模式"><a href="#6、命令模式" class="headerlink" title="6、命令模式"></a>6、命令模式</h4><p>将请求封装成一个对象，从而允许使用不同的请求、队列或者日志来参数化其他对象，并支持可撤销的操作。</p><p>命令模式包含以下几个角色：</p><ol><li><strong>命令接口（Command）</strong>：声明了执行请求的方法。</li><li><strong>具体命令（Concrete Command）</strong>：实现了命令接口，负责执行具体的请求。</li><li><strong>调用者（Invoker）</strong>：负责调用命令对象执行请求。</li><li><strong>接收者（Receiver）</strong>：知道如何执行一个请求，任何类都可能成为一个接收者。</li></ol><p>命令模式通常适用于以下情况：</p><ul><li>当需要将请求发送者与请求接收者解耦时，可以使用命令模式。</li><li>当需要支持撤销操作时，可以使用命令模式。</li></ul><p>以下是一个简单的命令模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 命令接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体命令</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">private</span> Receiver receiver;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteCommand</span><span class="hljs-params">(Receiver receiver)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver = receiver;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        receiver.action();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 接收者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Receiver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Receiver executes action&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br>    <span class="hljs-keyword">private</span> Command command;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommand</span><span class="hljs-params">(Command command)</span> &#123;<br>        <span class="hljs-built_in">this</span>.command = command;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeCommand</span><span class="hljs-params">()</span> &#123;<br>        command.execute();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Receiver</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Receiver</span>();<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteCommand</span>(receiver);<br>        <span class="hljs-type">Invoker</span> <span class="hljs-variable">invoker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>();<br><br>        invoker.setCommand(command);<br>        invoker.executeCommand();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、备忘录模式"><a href="#7、备忘录模式" class="headerlink" title="7、备忘录模式"></a>7、备忘录模式</h4><p>允许在不暴露对象实现细节的情况下保存和恢复对象的内部状态。备忘录模式通常用于需要记录对象状态历史、撤销操作或者提供快照功能的场景。</p><p>备忘录模式包含以下几个角色：</p><ol><li><strong>发起人（Originator）</strong>：负责创建备忘录对象，以保存当前内部状态，并可以使用备忘录对象恢复内部状态。</li><li><strong>备忘录（Memento）</strong>：负责存储发起人对象的内部状态。</li><li><strong>管理者（Caretaker）</strong>：负责管理备忘录对象，可以保存和获取备忘录对象，并通知发起人对象。</li></ol><p>备忘录模式通常适用于以下情况：</p><ul><li>当需要保存和恢复对象的内部状态，同时又不希望暴露对象的实现细节时，可以使用备忘录模式。</li><li>当需要提供撤销操作或者历史记录功能时，也可以使用备忘录模式。</li></ul><p>以下是一个简单的备忘录模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 备忘录类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br>    <span class="hljs-keyword">private</span> String state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memento</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 发起人类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span> &#123;<br>    <span class="hljs-keyword">private</span> String state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">saveStateToMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(state);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getStateFromMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>        state = memento.getState();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 管理者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br>    <span class="hljs-keyword">private</span> Memento memento;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>        <span class="hljs-built_in">this</span>.memento = memento;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">getMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> memento;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Originator</span> <span class="hljs-variable">originator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Originator</span>();<br>        <span class="hljs-type">Caretaker</span> <span class="hljs-variable">caretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Caretaker</span>();<br><br>        <span class="hljs-comment">// 修改发起人状态并保存备忘录</span><br>        originator.setState(<span class="hljs-string">&quot;State 1&quot;</span>);<br>        <span class="hljs-type">Memento</span> <span class="hljs-variable">memento</span> <span class="hljs-operator">=</span> originator.saveStateToMemento();<br>        caretaker.saveMemento(memento);<br><br>        <span class="hljs-comment">// 修改发起人状态</span><br>        originator.setState(<span class="hljs-string">&quot;State 2&quot;</span>);<br><br>        <span class="hljs-comment">// 恢复发起人状态</span><br>        <span class="hljs-type">Memento</span> <span class="hljs-variable">savedMemento</span> <span class="hljs-operator">=</span> caretaker.getMemento();<br>        originator.getStateFromMemento(savedMemento);<br>        System.out.println(<span class="hljs-string">&quot;Restored State: &quot;</span> + originator.getState());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8、状态模式"><a href="#8、状态模式" class="headerlink" title="8、状态模式"></a>8、状态模式</h4><p>允许对象在内部状态改变时改变它的行为，看起来好像改变了它的类。状态模式将每个状态封装成一个类，并将对象的行为委托给当前状态对象。</p><p>状态模式包含以下几个角色：</p><ol><li><strong>上下文（Context）</strong>：定义客户端感兴趣的接口，维护一个对状态对象的引用，并将请求委托给当前状态对象处理。</li><li><strong>抽象状态（State）</strong>：定义一个接口以封装与上下文的一个特定状态相关的行为。</li><li><strong>具体状态（Concrete State）</strong>：实现抽象状态定义的接口，并且负责处理状态相关的行为。</li></ol><p>状态模式通常适用于以下情况：</p><ul><li>当对象的行为取决于它的状态，并且在运行时可以根据状态改变行为时，可以使用状态模式。</li><li>当有大量的条件语句来控制一个对象的行为时，可以使用状态模式来提高代码的可维护性。</li></ul><p>以下是一个简单的状态模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> State state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        state.handleRequest(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象状态</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Context context)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体状态A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Context context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Handling request in State A&quot;</span>);<br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateB</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体状态B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Context context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Handling request in State B&quot;</span>);<br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateA</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateA</span>());<br><br>        context.request();<br>        context.request();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9、访问者模式"><a href="#9、访问者模式" class="headerlink" title="9、访问者模式"></a>9、访问者模式</h4><p>访问者模式能够将算法与对象结构分离开来，使得可以在不改变对象结构的情况下定义新的操作。访问者模式的核心思想是在不改变元素的类的前提下，通过定义访问者类来对元素进行操作。</p><p>访问者模式包含以下几个角色：</p><ol><li><strong>访问者接口（Visitor）</strong>：定义了对每个元素访问的操作，可以在不修改具体元素类的情况下定义新的操作。</li><li><strong>具体访问者（Concrete Visitor）</strong>：实现了访问者接口中定义的操作，对元素进行具体的处理。</li><li><strong>元素接口（Element）</strong>：定义了一个 <code>accept</code> 方法，该方法接受一个访问者对象作为参数，以便让访问者访问自身。</li><li><strong>具体元素（Concrete Element）</strong>：实现了元素接口中的 <code>accept</code> 方法，接受访问者对象的访问，并调用访问者的方法进行处理。</li><li><strong>对象结构（Object Structure）</strong>：存储了具体元素对象，提供了接受访问者对象的方法，以便访问者能够遍历访问其中的元素。</li></ol><p>访问者模式通常适用于以下情况：</p><ul><li>当一个对象结构包含许多具体类对象，而且需要对这些对象进行不同的操作时，可以使用访问者模式。</li><li>当对象的操作需要多次变更，但是对象本身不希望发生变化时，可以使用访问者模式。</li></ul><p>以下是一个简单的访问者模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 访问者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementA element)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementB element)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体访问者A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteVisitorA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementA element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorA visits ElementA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementB element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorA visits ElementB&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体访问者B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteVisitorB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementA element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorB visits ElementA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementB element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorB visits ElementB&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 元素接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体元素A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElementA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体元素B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElementB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 对象结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectStructure</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Element&gt; elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Element element)</span> &#123;<br>        elements.add(element);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Element element)</span> &#123;<br>        elements.remove(element);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>            element.accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ObjectStructure</span> <span class="hljs-variable">objectStructure</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStructure</span>();<br>        objectStructure.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ElementA</span>());<br>        objectStructure.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ElementB</span>());<br><br>        <span class="hljs-type">Visitor</span> <span class="hljs-variable">visitorA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteVisitorA</span>();<br>        objectStructure.accept(visitorA);<br><br>        <span class="hljs-type">Visitor</span> <span class="hljs-variable">visitorB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteVisitorB</span>();<br>        objectStructure.accept(visitorB);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10、中介者模式"><a href="#10、中介者模式" class="headerlink" title="10、中介者模式"></a>10、中介者模式</h4><p>中介者模式通过封装一系列对象之间的交互方式，来减少对象之间的直接依赖关系，从而降低系统的耦合性。中介者模式将系统中各个对象之间的交互行为集中到中介者对象中进行处理，而不是让对象之间相互引用。</p><p>中介者模式包含以下几个角色：</p><ol><li><strong>中介者（Mediator）</strong>：定义了一个接口用于与各个同事对象进行通信，可以通过该接口将具体同事对象的通知传递给其他同事对象。</li><li><strong>具体中介者（Concrete Mediator）</strong>：实现了中介者接口，负责协调各个同事对象的交互行为。</li><li><strong>同事类（Colleague）</strong>：定义了一个接口用于与中介者进行通信，每个同事对象都知道中介者对象，并可以通过中介者来通知其他同事对象。</li><li><strong>具体同事类（Concrete Colleague）</strong>：实现了同事接口，每个具体同事类都知道自己的中介者对象，并通过中介者对象来与其他同事对象进行通信。</li></ol><p>中介者模式通常适用于以下情况：</p><ul><li>当对象之间存在复杂的交互关系，并且导致对象之间紧密耦合时，可以使用中介者模式来解耦对象之间的关系。</li><li>当一个对象行为发生改变可能会影响到其他对象，但又不希望对象之间直接耦合时，可以使用中介者模式。</li></ul><p>以下是一个简单的中介者模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中介者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message, Colleague colleague)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体中介者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">private</span> Colleague colleague1;<br>    <span class="hljs-keyword">private</span> Colleague colleague2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColleague1</span><span class="hljs-params">(Colleague colleague)</span> &#123;<br>        <span class="hljs-built_in">this</span>.colleague1 = colleague;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColleague2</span><span class="hljs-params">(Colleague colleague)</span> &#123;<br>        <span class="hljs-built_in">this</span>.colleague2 = colleague;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message, Colleague colleague)</span> &#123;<br>        <span class="hljs-keyword">if</span> (colleague == colleague1) &#123;<br>            colleague2.receive(message);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            colleague1.receive(message);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 同事接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体同事类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">private</span> Mediator mediator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteColleagueA</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        mediator.send(message, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteColleagueA received: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体同事类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">private</span> Mediator mediator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteColleagueB</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        mediator.send(message, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteColleagueB received: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteMediator</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteMediator</span>();<br><br>        <span class="hljs-type">ConcreteColleagueA</span> <span class="hljs-variable">colleagueA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteColleagueA</span>(mediator);<br>        <span class="hljs-type">ConcreteColleagueB</span> <span class="hljs-variable">colleagueB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteColleagueB</span>(mediator);<br><br>        mediator.setColleague1(colleagueA);<br>        mediator.setColleague2(colleagueB);<br><br>        colleagueA.send(<span class="hljs-string">&quot;Hello from ColleagueA&quot;</span>);<br>        colleagueB.send(<span class="hljs-string">&quot;Hi from ColleagueB&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11、解释器模式"><a href="#11、解释器模式" class="headerlink" title="11、解释器模式"></a>11、解释器模式</h4><p>解释器模式定义一种语言的文法，并且构建一个解释器来解释这个语言中的句子。解释器模式通常用于处理复杂的语法或规则，它将一个表达式解析成一个抽象语法树，并提供一种灵活的方式来进行解释、执行或操作。</p><p>解释器模式包含以下几个角色：</p><ol><li><strong>抽象表达式（Abstract Expression）</strong>：定义了一个抽象的解释操作，通常包含一个 <code>interpret()</code> 方法，用于解释表达式。</li><li><strong>终结符表达式（Terminal Expression）</strong>：实现了抽象表达式接口，表示语法中的终结符，不再包含子表达式。</li><li><strong>非终结符表达式（Nonterminal Expression）</strong>：实现了抽象表达式接口，表示语法中的非终结符，通常包含多个子表达式。</li><li><strong>上下文（Context）</strong>：包含解释器之外的一些全局信息，通常被解释器用来保存解释器中间结果或者共享信息。</li></ol><p>解释器模式通常适用于以下情况：</p><ul><li>当有一个语言需要解释执行，并且可以将该语言的语法表示为一个表达式文法树时，可以使用解释器模式。</li><li>当需要按照特定的规则进行解析语言或表达式时，可以使用解释器模式。</li></ul><p>以下是一个简单的解释器模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象表达式</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 终结符表达式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumberExpression</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 非终结符表达式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> Expression left;<br>    <span class="hljs-keyword">private</span> Expression right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left.interpret() + right.interpret();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> String input;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> output;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-built_in">this</span>.input = input;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInput</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> input;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInput</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-built_in">this</span>.input = input;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOutput</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOutput</span><span class="hljs-params">(<span class="hljs-type">int</span> output)</span> &#123;<br>        <span class="hljs-built_in">this</span>.output = output;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构建解释器上下文</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-string">&quot;1+2+3&quot;</span>);<br><br>        <span class="hljs-comment">// 解析表达式</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parseExpression(context.getInput());<br><br>        <span class="hljs-comment">// 执行解释器</span><br>        context.setOutput(expression.interpret());<br><br>        <span class="hljs-comment">// 输出结果</span><br>        System.out.println(context.getOutput());<br>    &#125;<br><br>    <span class="hljs-comment">// 解析表达式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Expression <span class="hljs-title function_">parseExpression</span><span class="hljs-params">(String input)</span> &#123;<br>        String[] tokens = input.split(<span class="hljs-string">&quot;\\+&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tokens.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (expression == <span class="hljs-literal">null</span>) &#123;<br>                expression = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(Integer.parseInt(tokens[i]));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                expression = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddExpression</span>(expression, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(Integer.parseInt(tokens[i])));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> expression;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jvm</title>
    <link href="/2024/04/24/jvm/"/>
    <url>/2024/04/24/jvm/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-虚拟机面试（Jvm-面试题）"><a href="#Java-虚拟机面试（Jvm-面试题）" class="headerlink" title="Java 虚拟机面试（Jvm 面试题）"></a>Java 虚拟机面试（Jvm 面试题）</h1><h2 id="1、什么是-JVM？"><a href="#1、什么是-JVM？" class="headerlink" title="1、什么是 JVM？"></a>1、什么是 JVM？</h2><h3 id="1-1、定义"><a href="#1-1、定义" class="headerlink" title="1.1、定义"></a>1.1、定义</h3><p>JVM 指的是 Java 虚拟机（ Java Virtual Machine ）。JVM 本质上是一个运行在计算机上的程序， 他的职责是运行 Java 字节码文件，Java 虚拟机上可以运行 Java、Kotlin、Scala、Groovy 等语言。</p><h3 id="1-2、作用"><a href="#1-2、作用" class="headerlink" title="1.2、作用"></a>1.2、作用</h3><p>为了支持 Java 中 Write Once，Run Anywhere；编写一次，到处运行的跨平台特性。</p><p><img src="/images/jvm-c&c++.png" alt="c/C++"></p><p><img src="/images/jvm-java.png" alt="Java"></p><h3 id="1-3、JVM-的功能"><a href="#1-3、JVM-的功能" class="headerlink" title="1.3、JVM 的功能"></a>1.3、JVM 的功能</h3><ol><li>解释和运行<ul><li>把字节码文件中的指令实时的解释成机器码， 并让计算机执行</li></ul></li><li>内存管理<ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制， 回收不再使用的对象</li></ul></li><li>即时编译<ul><li>对热点代码进行优化， 提升执行效率</li></ul></li></ol><h3 id="1-4、JVM-的组成"><a href="#1-4、JVM-的组成" class="headerlink" title="1.4、JVM 的组成"></a>1.4、JVM 的组成</h3><p><img src="/images/jvm-constitute.png" alt="JVM组成"></p><h3 id="1-5、常见的-JVM"><a href="#1-5、常见的-JVM" class="headerlink" title="1.5、常见的 JVM"></a>1.5、常见的 JVM</h3><ol><li>最常用的 JVM<ul><li>Oracle 提供的 Hotspot</li><li>OpenJDK 的 Hotspot</li></ul></li><li>有 JVM 二次开发需要<ul><li>OpenJDK 的 Hotspot</li></ul></li><li>云原生架构高性能需求<ul><li>GraalVM</li><li>OpenJ9</li></ul></li><li>电商物流金融高性能需求<ul><li>GraalVM</li><li>阿里 DragonWell 龙井</li></ul></li></ol><h3 id="1-6、总结"><a href="#1-6、总结" class="headerlink" title="1.6、总结"></a>1.6、总结</h3><p>什么是 JVM？</p><ol><li>JVM 指的是 Java 虚拟机，本质上是一个运行在计算机上的程序，他的职 责是运行 Java 字节码文件，作用是为了支持跨平台特性。</li><li>JVM 的功能有三项：<ul><li>第一是解释执行字节码指令；</li><li>第二是管理内存中对象的分配，完成自动的垃圾回收；</li><li>第三是优化热点代码提升执行效率。</li></ul></li><li>JVM 组成分为类加载子系统、运行时数据区、执行引擎、本地接口这四部分。</li><li>常用的 JVM 是 Oracle 提供的 Hotspot 虚拟机，也可以选择 GraalVM、龙井、 OpenJ9 等虚拟机。</li></ol><h2 id="2、了解过字节码文件的组成吗？"><a href="#2、了解过字节码文件的组成吗？" class="headerlink" title="2、了解过字节码文件的组成吗？"></a>2、了解过字节码文件的组成吗？</h2><p>字节码文件本质上是一个二进制的文件，无 法直接用记事本等工具打开阅读其内容。需 要通过专业的工具打开。</p><ul><li>开发环境使用 jclasslib 插件</li><li>服务器环境使用 javap –v 命令</li></ul><p><img src="/images/jvm-classFileConstitute.png" alt="字节码文件组成"></p><h2 id="3、说一下运行时数据区？"><a href="#3、说一下运行时数据区？" class="headerlink" title="3、说一下运行时数据区？"></a>3、说一下运行时数据区？</h2><p>运行时数据区指的是 JVM 所管理的内存区域，其中分成两大类：</p><ul><li>线程共享 – 方法区、堆</li><li>线程不共享 – 本地方法栈、虚拟机栈、程序计数器</li></ul><blockquote><p>（可选）直接内存主要是 NIO 使用，由操作系统直接管理，不属于 JVM 内存。</p></blockquote><p><img src="/images/jvm-runtimeArea.png" alt="运行时数据区"></p><h3 id="3-1、组成结构？"><a href="#3-1、组成结构？" class="headerlink" title="3.1、组成结构？"></a>3.1、组成结构？</h3><h4 id="3-1-1、程序计数器"><a href="#3-1-1、程序计数器" class="headerlink" title="3.1.1、程序计数器"></a>3.1.1、程序计数器</h4><p>程序计数器（Program Counter Register）也叫 PC 寄存器，每个线程会通过程序计数器记录当前要执行的的字节码指令的地址。</p><p>主要有两个作用：</p><ol><li>程序计数器可以控制程序指令的进行，实现分支、跳转、异常等逻辑。</li><li>在多线程执行情况下，Java 虚拟机需要通过程序计数器记录 CPU 切换前解释执行到那一句指令并继续解释运行。</li></ol><h4 id="3-1-2、Java-虚拟机栈"><a href="#3-1-2、Java-虚拟机栈" class="headerlink" title="3.1.2、Java 虚拟机栈"></a>3.1.2、Java 虚拟机栈</h4><p>Java 虚拟机栈采用栈的数据结构来管理方法调用中的基本数据，先进后出 ,每一个方法的调用使用一个栈帧来保存。 每个线程都会包含一个自己的虚拟机栈，它的生命周期和线程相同。</p><p>栈帧主要包含三部分内容：</p><ol><li>局部变量表：在方法执行过程中存放所有的局部变量。</li><li>操作数栈：虚拟机在执行指令过程中用来存放临时数据的一块区域。</li><li>帧数据：主要包含动态链接、方法出口、异常表等内容。<ul><li>动态链接：方法中要用到其他类的属性和方法，这些内容在字节码文件中是以编号保存的，运行过程中需要替换成 内存中的地址，这个编号到内存地址的映射关系就保存在动态链接中。</li><li>方法出口：方法调用完需要弹出栈帧，回到上一个方法，程序计数器要切换到上一个方法的地址继续执行，方法出 口保存的就是这个地址。</li><li>异常表：存放的是代码中异常的处理信息，包含了异常捕获的生效范围以及异常发生后跳转到的字节码指令位置。</li></ul></li></ol><h4 id="3-1-3、本地方法栈"><a href="#3-1-3、本地方法栈" class="headerlink" title="3.1.3、本地方法栈"></a>3.1.3、本地方法栈</h4><ul><li>Java 虚拟机栈存储了 Java 方法调用时的栈帧，而本地方法栈存储的是 native 本地方法的栈帧。</li><li>在 Hotspot 虚拟机中，Java 虚拟机栈和本地方法栈实现上使用了同一个栈空间。本地方法栈会在栈内 存上生成一个栈帧，临时保存方法的参数同时方便出现异常时也把本地方法的栈信息打印出来。</li></ul><h4 id="3-1-4、堆"><a href="#3-1-4、堆" class="headerlink" title="3.1.4、堆"></a>3.1.4、堆</h4><ul><li>一般 Java 程序中堆内存是空间最大的一块内存区域。创建出来的对象都存在于堆上。</li><li>栈上的局部变量表中，可以存放堆上对象的引用。静态变量也可以存放堆对象的引用，通过静态变量就可以实 现对象在线程之间共享。</li><li>堆是垃圾回收最主要的部分，堆结构更详细的划分与垃圾回收器有关。</li></ul><h4 id="3-1-5、方法区"><a href="#3-1-5、方法区" class="headerlink" title="3.1.5、方法区"></a>3.1.5、方法区</h4><p>方法区是 Java 虚拟机规范中提出来的一个虚拟机概念，在 HotSpot 不同版本中会用永久代或者元空间来实现。</p><p>方法区主要存放的是基础信息，包含：</p><ul><li>每一个加载的类的元信息（基础信息）。</li><li>运行时常量池，保存了字节码文件中的常量池内容，避免常量内容重复创建减少内存开销。</li><li>字符串常量池，存储字符串的常量。</li></ul><h4 id="3-1-6、直接内存"><a href="#3-1-6、直接内存" class="headerlink" title="3.1.6、直接内存"></a>3.1.6、直接内存</h4><p>直接内存并不在《Java 虚拟机规范》中存在，所以并不属于 Java 运行时的内存区域。在 JDK 1.4 中引入了 NIO 机 制，由操作系统直接管理这部分内容，主要为了提升读写数据的性能。在网络编程框架如 Netty 中被大量使用。 要创建直接内存上的数据，可以使用 ByteBuffer。</p><p>语法： ByteBuffer directBuffer &#x3D; ByteBuffer.allocateDirect(size);</p><h4 id="3-1-7、总结"><a href="#3-1-7、总结" class="headerlink" title="3.1.7、总结"></a>3.1.7、总结</h4><p>什么是运行时数据区？</p><p>运行时数据区指的是 JVM 所管理的内存区域，其中分成两大类：</p><ol><li>线程共享 – 方法区、堆<ul><li>方法区：存放每一个加载的类的元信息、运行时常量池、字符串常量池。</li><li>堆：存放创建出来的对象。</li></ul></li><li>线程不共享 – 本地方法栈、虚拟机栈、程序计数器<ul><li>本地方法栈和虚拟机栈都存放了线程中执行方法时需要使用的基础数据。</li><li>程序计数器存放了当前线程执行的字节码指令在内存中的地址。</li><li>直接内存主要是 NIO 使用，由操作系统直接管理，不属于 JVM 内存。</li></ul></li></ol><h3 id="3-2、哪些区域会出现内存溢出，会有什么现象？"><a href="#3-2、哪些区域会出现内存溢出，会有什么现象？" class="headerlink" title="3.2、哪些区域会出现内存溢出，会有什么现象？"></a>3.2、哪些区域会出现内存溢出，会有什么现象？</h3><p>内存溢出指的是内存中某一块区域的使用量超过允许使用的最大值，从而使用内存时因空间不足而失败，虚拟机一般会抛出指定的错误。</p><p>在 Java 虚拟机中，只有程序计数器不会出现内存溢出的情况，因为每个线程的程序计数器只保存一个固定长度的地址。</p><h4 id="3-2-1、堆内存溢出"><a href="#3-2-1、堆内存溢出" class="headerlink" title="3.2.1、堆内存溢出"></a>3.2.1、堆内存溢出</h4><ul><li><p>堆内存溢出指的是在堆上分配的对象空间超过堆的最大大小，从而导致的内存溢出。</p><p>堆的最大大小使用-Xmx 参数进行设置，如-Xmx10m 代表最大堆内存大小为 10m。</p></li><li><p>溢出之后会抛出 OutOfMemoryError，并提示是 Java heap Space 导致的。</p></li></ul><h4 id="3-2-2、栈内存溢出"><a href="#3-2-2、栈内存溢出" class="headerlink" title="3.2.2、栈内存溢出"></a>3.2.2、栈内存溢出</h4><ul><li><p>栈内存溢出指的是所有栈帧空间的占用内存超过最大值。</p><p>最大值使用-Xss 进行设置，比如-Xss256k 代表所有栈帧占用内存大小加起来不能超过 256k。</p></li><li><p>溢出之后会抛出 StackOverflowError。</p></li></ul><h4 id="3-2-3、方法区内存溢出"><a href="#3-2-3、方法区内存溢出" class="headerlink" title="3.2.3、方法区内存溢出"></a>3.2.3、方法区内存溢出</h4><ul><li>方法区内存溢出指的是方法区中存放的内容比如类的元信息超过方法区内存的最大值。<ul><li>JDK7 及之前版本方法区使用永 久代（-XX:MaxPermSize&#x3D;值）来实现。</li><li>JDK8 及之后使用元空间（-XX:MaxMetaspaceSize&#x3D;值）来实现。</li></ul></li></ul><h4 id="3-2-4、直接内存溢出"><a href="#3-2-4、直接内存溢出" class="headerlink" title="3.2.4、直接内存溢出"></a>3.2.4、直接内存溢出</h4><ul><li><p>直接内存溢出指的是申请的直接内存空间大小超过最大值。</p><p>使用-XX:MaxDirectMemorySize&#x3D;值设置最大值。</p></li><li><p>溢出之后会抛出 OutOfMemoryError。</p></li></ul><h4 id="3-2-5、总结"><a href="#3-2-5、总结" class="headerlink" title="3.2.5、总结"></a>3.2.5、总结</h4><p>哪些区域会出现内存溢出，会有什么现象？</p><p>内存溢出指的是内存中某一块区域的使用量超过允许使用的最大值，从而使用内存时因空间不足而失败，虚拟机一般会抛出指定的错误。</p><p>堆：溢出之后会抛出 OutOfMemoryError，并提示是 Java heap Space 导致的。</p><p>栈：溢出之后会抛出 StackOverflowError。</p><p>方法区：溢出之后会抛出 OutOfMemoryError，JDK7 及之前提示永久代，JDK8 及之后提示元空间。</p><p>直接内存：溢出之后会抛出 OutOfMemoryError。</p><h3 id="3-3、JVM-在-JDK6-8-之间在内存区域上有什么不同-？"><a href="#3-3、JVM-在-JDK6-8-之间在内存区域上有什么不同-？" class="headerlink" title="3.3、JVM 在 JDK6-8 之间在内存区域上有什么不同 ？"></a>3.3、JVM 在 JDK6-8 之间在内存区域上有什么不同 ？</h3><h4 id="3-3-1、方法区的实现"><a href="#3-3-1、方法区的实现" class="headerlink" title="3.3.1、方法区的实现"></a>3.3.1、方法区的实现</h4><p>方法区是《Java 虚拟机规范》中设计的虚拟概念，每款 Java 虚拟机在实现上都各不相同。Hotspot 设计如下：</p><ul><li>JDK7 及之前的版本将方法区存放在堆区域中的永久代空间，堆的大小由虚拟机参数来控制。</li><li>JDK8 及之后的版本将方法区存放在元空间中，元空间位于操作系统维护的直接内存中，默认情况下只要不 超过操作系统承受的上限，可以一直分配。也可以手动设置最大大小。</li></ul><p><img src="/images/jvm-jdk6~8-methodArea.png" alt="methodArea"></p><p>使用元空间替换永久代的原因：</p><ol><li>提高内存上限：元空间使用的是操作系统内存，而不是 JVM 内存。如果不设置上限，只要不超过操作系统内存 上限，就可以持续分配。而永久代在堆中，可使用的内存上限是有限的。所以使用元空间可以有效减少 OOM 情况 的出现。</li><li>优化垃圾回收的策略：永久代在堆上，垃圾回收机制一般使用老年代的垃圾回收方式，不够灵活。使用元空间 之后单独设计了一套适合方法区的垃圾回收机制。</li></ol><h4 id="3-3-2、字符串常量池的位置"><a href="#3-3-2、字符串常量池的位置" class="headerlink" title="3.3.2、字符串常量池的位置"></a>3.3.2、字符串常量池的位置</h4><p>早期设计时，字符串常量池是属于运行时常量池的一部分，他们存储的位置也是一致的。后续做出了调整， 将字符串常量池和运行时常量池做了拆分。</p><p><img src="/images/jvm-jdk6~8-finalStringArea.png" alt="finalString"></p><p>字符串常量池从方法区移动到堆的原因：</p><ol><li>垃圾回收优化：字符串常量池的回收逻辑和对象的回收逻辑类似，内存不足的情况下，如果字符串常量池中的 常量不被使用就可以被回收；方法区中的类的元信息回收逻辑更复杂一些。移动到堆之后，就可以利用对象的垃圾 回收器，对字符串常量池进行回收。</li><li>让方法区大小更可控：一般在项目中，类的元信息不会占用特别大的空间，所以会给方法区设置一个比较小的 上限。如果字符串常量池在方法区中，会让方法区的空间大小变得不可控。</li><li>intern 方法的优化：JDK6 版本中 intern () 方法会把第一次遇到的字符串实例复制到永久代的字符串常量 池中。JDK7 及之后版本中由于字符串常量池在堆上，就可以进行优化：字符串保存在堆上，把字符串的引用放入 字符串常量池，减少了复制的操作。</li></ol><h2 id="4、类的生命周期？"><a href="#4、类的生命周期？" class="headerlink" title="4、类的生命周期？"></a>4、类的生命周期？</h2><p><img src="/images/jvm-classLife.png" alt="ClassLife"></p><p><strong>加载(Loading)阶段</strong></p><ol><li>类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息。 程序员可以使用 Java 代码拓展的不同的渠道。</li><li>类加载器在加载完类之后，Java 虚拟机会将字节码中的信息保存到内存的方法区中。在方法区生成一个 InstanceKlass 对象，保存类的所有信息。</li><li>在堆中生成一份与方法区中数据类似的 java.lang.Class 对象， 作用是在 Java 代码中去获取类的信息。</li></ol><p><strong>连接（Linking）阶段</strong></p><ol><li><p>连接阶段之验证连接</p><p>验证的主要目的是检测 Java 字节码文件是否遵守《Java 虚拟机规 范》中的约束。该阶段一般不需要程序员参与。</p><p>主要包含如下四部分，具体详见《Java 虚拟机规范》：</p><ol><li>文件格式验证，比如文件是否以 0xCAFEBABE 开头，主次版本号是否满足当前 Java 虚拟机版本要求。</li><li>元信息验证，例如类必须有父类（super 不能为空）。</li><li>验证程序执行指令的语义，比如方法内的指令执行到一半强行跳转到其他方法中去。</li><li>符号引用验证，例如是否访问了其他类中 private 的方法等。</li></ol></li><li><p>连接阶段之准备阶段</p><ul><li>为静态变量（static）分配内存并设置初值。final 修饰的基本数据类型的静态变量，准备阶段直接会将代码中的值进行赋值。</li></ul></li><li><p>连接阶段之解析阶段</p><ul><li>将常量池中的符号引用替换为直接引用。符号引用就是在字节码文件中使用编号来访问常量池 的内容。</li><li>直接引用不在使用编号，而是使用内存中地址进行访问具体的数据。</li></ul></li></ol><p><strong>初始化阶段</strong></p><ul><li>初始化阶段会执行静态代码块中的代码，并为静态变量赋值。</li><li>初始化阶段会执行字节码文件中 clinit 部分的字节码指令。</li></ul><p><strong>类的卸载</strong></p><p>判定一个类可以被卸载。需要同时满足下面三个条件：</p><ol><li>此类所有实例对象都已经被回收，在堆中不存在任何该类的实例对象以及子类对象。</li><li>加载该类的类加载器已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用。</li></ol><p><strong>总结</strong></p><ul><li>加载：根据类的全限定名把字节码文件的内容加载并转换成合适的数据放入内存中，存放在方法区和堆上。</li><li>连接<ol><li>验证：魔数、版本号等验证，一般不需要 程序员关注。</li><li>准备：为静态变量分配内存并设置初值。</li><li>解析：将常量池中的符号引用（编号）替 换为直接引用（内存地址）。</li></ol></li><li>初始化：执行静态代码块和静态变量的赋值。</li></ul><h2 id="5、什么是类加载器？"><a href="#5、什么是类加载器？" class="headerlink" title="5、什么是类加载器？"></a>5、什么是类加载器？</h2><h3 id="5-1、什么是类加载器？"><a href="#5-1、什么是类加载器？" class="headerlink" title="5.1、什么是类加载器？"></a>5.1、什么是类加载器？</h3><p>类加载器负载在类的加载过程中将字节码信息以流的方式获取并加载到内存中。JDK8 及之前如下：</p><p><img src="/images/jvm-jdk~8-classLoader.png" alt="jdk~8"></p><p>类加载器负载在类的加载过程中将字节码信息以流的方式获取并加载到内存中。JDK9 之后均由 Java 实现：</p><p><img src="/images/jvm-jdk9-classLoader.png" alt="jdk9"></p><h3 id="5-2、有哪些常见的类加载器？"><a href="#5-2、有哪些常见的类加载器？" class="headerlink" title="5.2、有哪些常见的类加载器？"></a>5.2、有哪些常见的类加载器？</h3><ol><li>启动类加载器（Bootstrap ClassLoader）<ul><li>由 Hotspot 虚拟机提供的类加载器，JDK9 前使用 C++编写的、JDK9 后使用 Java 编写。</li><li>默认加载 Java 安装目录&#x2F;jre&#x2F;lib 下的类文件，比如 rt.jar，tools.jar，resources.jar 等。</li></ul></li><li>扩展类加载器（Extension Class Loader）<ul><li>由 JDK 中提供的、使用 Java 编写的类加载器。JDK9 之后由于采用模块化， 改名为 Platform 平台类加载器。</li><li>默认加载 Java 安装目录&#x2F;jre&#x2F;lib&#x2F;ext 下的类文件。</li></ul></li><li>应用程序类加载器（Application Class Loader）<ul><li>由 JDK 中提供的、使用 Java 编写的类加载器。默认加载为应用程序 classpath 下的类。</li></ul></li><li>自定义类加载器<ul><li>允许用户自行实现类加载的逻辑，可以从网络、数据库等来源加载类信息。</li><li>自定义类加载器需要继承自 ClassLoader 抽象类，重写 findClass 方法。</li></ul></li></ol><p><strong>总结</strong></p><ol><li>启动类加载器（Bootstrap ClassLoader）加载核心类</li><li>扩展类加载器（Extension ClassLoader）加载扩展类</li><li>应用程序类加载器（Application ClassLoader）加载应用 classpath 中的类</li><li>自定义类加载器，重写 findClass 方法。</li></ol><blockquote><p>JDK9 及之后扩展类加载器（Extension ClassLoader）变成平台类加载器（Platform ClassLoader）</p></blockquote><h2 id="6、什么是双亲委派机制"><a href="#6、什么是双亲委派机制" class="headerlink" title="6、什么是双亲委派机制"></a>6、什么是双亲委派机制</h2><p>双亲委派机制：指的是当一个类加载器接收到加载类的任务时，会向上查找是否加载过，再由顶向下进行加载。</p><p><img src="/images/jvm-classLoaderMachanism.png" alt="双亲委派机制"></p><p>每个类加载器都有一个父类加载器，在类加载的过程中，每个类加载器都会先检查是否已经加载了该类，如果已经加载则直接返回，否则会将加载请求委派给父类加载器</p><h3 id="6-1、双亲委派机制有什么用？"><a href="#6-1、双亲委派机制有什么用？" class="headerlink" title="6.1、双亲委派机制有什么用？"></a>6.1、双亲委派机制有什么用？</h3><ol><li>保证类加载的安全性：通过该机制避免恶意代码替换 JDK 中的核心类库。比如 <code>java.lang.String</code> 确保核心类库的完整性和安全性。</li><li>避免重复加载：可以避免同一个类被 多次加载。</li></ol><h3 id="6-2、打破双亲委派机制？"><a href="#6-2、打破双亲委派机制？" class="headerlink" title="6.2、打破双亲委派机制？"></a>6.2、打破双亲委派机制？</h3><p>ClassLoader 中包含 4 个核心方法：</p><ul><li>public Class loadClass(String name) ：类加载的入口，提供双亲委派机制。内部会调用 findClass。</li><li>protected Class findClass(String name)：由类加载器子类实现，获取二进制数据调用 defineClass ，比如 URLClassLoader 会根据文件路径去获取类文件中的二进制数据。</li><li>protected final Class defineClass(String name, byte[] b, int off, int len)：做一些类名的校验，然后调用虚拟机底层的方法将字节码信息加载到虚拟机内存中。</li><li>protected final void resolveClass(Class c)：执行类生命周期中的连接阶段。</li></ul><p>调用关系如下：</p><pre><code class=" mermaid">graph LR;loadClass:类加载入口/双亲委派机制--&gt;findClass:加载类--&gt;defineClass:调用虚拟机底层方法将字节码信息加载到虚拟机内存中loadClass:类加载入口/双亲委派机制--&gt;resolveClass:类的连接阶段</code></pre><p>对程序员来而言，打破双亲委派机制的唯一方法就是实现自定义类加载器重写 loadClass 方法，将其中的双亲委派机制代码去掉。</p><h3 id="6-3、总结"><a href="#6-3、总结" class="headerlink" title="6.3、总结"></a>6.3、总结</h3><ul><li>双亲委派机制：指的是当一个类加载器接收到加载类的任务时，会向上交给父类加载 器查找是否加载过，再由顶向下进行加载。</li><li>双亲委派机制的作用：保证类加载的安全性，避免重复加载。</li><li>打破双亲委派机制的方法：实现自定义类加载器，重写 defineClass 方法，将双亲委派机制的代码去除。</li></ul><blockquote><h2 id="Tomcat-的自定义类加载器"><a href="#Tomcat-的自定义类加载器" class="headerlink" title="Tomcat 的自定义类加载器"></a>Tomcat 的自定义类加载器</h2><p><img src="/images/jvm-tomcat-classLoader.png" alt="TomcatClassLoader"></p><ol><li>common 类加载：主要加载 tomcat 自身使用以及应用使用的 jar 包，默认配置在 catalina.properties 文件中。<ul><li>common.loader&#x3D;”${catalina.base}&#x2F;lib”,”${catalina.base}&#x2F;lib&#x2F;*.jar”</li></ul></li><li>catalina 类加载器主要加载 tomcat 自身使用的 jar 包，不让应用使用，默认配置在 catalina.properties 文件中。<ul><li>server.loader&#x3D; 默认配置为空，为空时 catalina 加载器和 common 加载器是同一个。</li></ul></li><li>shared 类加载器主要加载应用使用的 jar 包，不让 tomcat 使用，默认配置在 catalina.properties 文件中。<ul><li>shared.loader&#x3D; 默认配置为空，为空时 shared 加载器和 common 加载器是同一个。</li></ul></li><li>ParallelWebappClassLoader 类加载器可以多线程并行加载应用中使用到的类，每个应用都拥有一个自己的该类加载器。</li></ol><p>为什么每个应用会拥有一个独立的 ParallelWebappClassLoader 类加载器呢？</p><p>同一个类加载器，只能加载一个同名的类。两个应用中相同名称的类都必须要加载。</p><p>ParallelWebappClassLoader 的执行流程：</p><p><img src="/images/jvm-paralleWebappClassLoader.png" alt="ParallelWebappClassLoader"></p><p>默认打破双亲委派机制(不开启代理)，应用中的类如果没有加载过。先会从当前类加载器加载，然后再交给父类加载器通过双亲委派机制加载。</p><p>JasperLoader 类加载器负责加载 JSP 文件编译出来的 class 字节码文件，为了实现热部署（不重启让修改的 jsp 生效），每一个 jsp 文件都由一个独立的 JasperLoader 负责加载。</p></blockquote><h2 id="7、如何判断堆上的对象没有被引用？"><a href="#7、如何判断堆上的对象没有被引用？" class="headerlink" title="7、如何判断堆上的对象没有被引用？"></a>7、如何判断堆上的对象没有被引用？</h2><p>常见的有两种判断方法：引用计数法和可达性分析法。</p><ol><li><p>引用计数法会为每个对象维护一个引用计数器，当对象被引用时加 1，取消引用时减 1。</p><p>引用计数法的优点是实现简单，缺点有两点：</p><ul><li>每次引用和取消引用都需要维护计数器，对系统性能会有一定的影响</li><li>存在循环引用问题，所谓循环引用就是当 A 引用 B，B 同时引用 A 时会出现对象无法回收的问题。</li></ul></li><li><p>Java 使用的是可达性分析算法来判断对象是否可以被回收。</p><p>可达性分析将对象分为两类：垃圾回收的根对象（GC Root）和普通对象，对象与对象之间存在引用关系。</p><ul><li>可达性分析算法指的是如果从某个到 GC Root 对象是可达的，对象就 不可被回收。</li></ul></li></ol><p>哪些对象被称之为 GC Root 对象呢？</p><ul><li>线程 Thread 对象，引用线程栈帧中的方法参数、局部变量等。</li><li>系统类加载器加载的 java.lang.Class 对象，引用类中的静态变量。</li><li>监视器对象，用来保存同步锁 synchronized 关键字持有的对象。</li><li>本地方法调用时使用的全局对象。</li></ul><p><strong>总结</strong></p><p>如何判断堆上的对象有没有被引用？</p><ol><li><p>引用计数法会为每个对象维护一个引用计数器，当对象被引用时加 1，取消引用时减 1。</p><p>由于存在循环引用问题，所以 Java 没有使用这种方法。</p></li><li><p>Java 使用的是可达性分析算法来判断对象是否可以被回收。</p><p>可达性分析将对象分为两类：垃圾回收的根对象（GC Root）和普通对象。</p><p>可达性分析算法指的是如果从某个到 GC Root 对象是可达的，对象就不可被回收。</p><p>最常见的是 GC Root 对象会引用栈上的局部变量和静态变量导致对象不可回收。</p></li></ol><h2 id="8、JVM-中都有哪些引用类型？"><a href="#8、JVM-中都有哪些引用类型？" class="headerlink" title="8、JVM 中都有哪些引用类型？"></a>8、JVM 中都有哪些引用类型？</h2><ul><li>强引用，JVM 中默认引用关系就是强引用，即是对象被局部变量、静态变量等 GC Root 关联的对象引用，只要 这层关系存在，普通对象就不会被回收。</li><li>软引用，软引用相对于强引用是一种比较弱的引用关系，如果一个对象只有软引用关联到它，当程序内存不足 时，就会将软引用中的数据进行回收。软引用主要在缓存框架中使用。</li><li>弱引用，弱引用的整体机制和软引用基本一致，区别在于弱引用包含的对象在垃圾回收时，不管内存够不够都 会直接被回收，弱引用主要在 ThreadLocal 中使用。</li><li>虚引用（幽灵引用&#x2F;幻影引用），不能通过虚引用对象获取到包含的对象。虚引用唯一的用途是当对象被垃圾回 收器回收时可以接收到对应的通知。直接内存中为了及时知道直接内存对象不再使用，从而回收内存，使用了 虚引用来实现。</li><li>终结器引用，终结器引用指的是在对象需要被回收时，终结器引用会关联对象并放置在 Finalizer 类中的引用队 列中，在稍后由一条由 FinalizerThread 线程从队列中获取对象，然后执行对象的 finalize 方法，在对象第二次 被回收时，该对象才真正的被回收。</li></ul><p><strong>ThreadLocal 中为什么要使用弱引用？</strong></p><p>ThreadLocal 可以在线程中存放线程的本地变量，保证数据的线程安全。</p><p>ThreadLocal 中保存对象的机制：</p><ol><li>在每个线程中存放一个 ThreadLocalMap 对象，本质上就是一个数组实现的哈希表，里边存放多个 Entry 对象。</li><li>每个 Entry 对象继承自弱引用，内部存放 ThreadLocal 对象。同时用强引用，引用保存的 ThreadLocal 对应的 value 值。</li></ol><pre><code class=" mermaid">graph TD;线程 -. 通过ThreadLocal对象的hash值找到线程中ThreadLocalMap对应的槽位 .-&gt; ThreadLocalMap -.创建一个Entry对象Key弱引用到threadlocal对象Value为set方法参数 .-&gt; Entry:弱引用对象/ThreadLocal对象 -.通过Entry中保存的value值进行预期操作 .-&gt; Value值</code></pre><p>不再使用 Threadlocal 对象时， threadlocal &#x3D; null；由于是弱引用，那么在垃圾回收之后，ThreadLocal 对象就可以被回收。</p><p>此时还有 Entry 对象和 value 对象没有能被回收，所以在 ThreadLocal 类的 set、get、remove 方法中，在某些特定条件满足的情况下，会主动删除这两个对象。</p><p>如果一直不调用 set、get、remove 方法或者调用没有满足条件，那么该部分对象就会出现内存泄漏。强烈建议在 ThreadLocal 不再使用时，调用 remove 方法回收将 Entry 对象的引用关系去掉，这样就可以回收这两个对象。</p><p><strong>总结</strong></p><p>ThreadLocal 中为什么要使用弱引用？</p><ul><li>当 threadlocal 对象不再使用时，使用弱引用可以让对象被回收；因为仅有弱引用没有强引用的情况下，对象是可以被回收的。</li><li>弱引用并没有完全解决掉对象回收的问题，Entry 对象和 value 值无法被回收，所以合理的做法是手动调用 remove 方法进行回收，然后再将 threadlocal 对象的强引用解除 。</li></ul><h2 id="9、有哪些常见的垃圾回收算法？"><a href="#9、有哪些常见的垃圾回收算法？" class="headerlink" title="9、有哪些常见的垃圾回收算法？"></a>9、有哪些常见的垃圾回收算法？</h2><ul><li>1960 年 John McCarthy 发布了第一个 GC 算法：标记-清除算法。</li><li>1963 年 Marvin L. Minsky 发布了复制算法。</li></ul><p>本质上后续所有的垃圾回收算法，都是在上述两种算法的基础上优化而来。</p><pre><code class=" mermaid">graph LR;标记-清除算法:Mark-Sweep-GC --&gt; 复制算法:Copying-GC --&gt; 标记-整理算法:Mark-Compact-GC --&gt; 分代GC:Generational-GC</code></pre><ol><li><p>标记清除算法</p><p>标记清除算法的核心思想分为两个阶段：</p><ol><li>标记阶段，将所有存活的对象进行标记。Java 中使用可达性分析算法，从 GC Root 开始通过引用链遍历出 所有存活对象。</li><li>清除阶段，从内存中删除没有被标记也就是非存活对象。</li></ol><p>标记清除算法的优缺点</p><ul><li>优点：实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。</li><li>缺点：<ol><li>碎片化问题:由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一 个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。</li><li>分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才 能获得合适的内存空间。</li></ol></li></ul></li><li><p>复制算法</p><p>复制算法的核心思想是：</p><ol><li>准备两块空间 From 空间和 To 空间，每次在对象分配阶段，只能使用其中一块空间（From 空间）。</li><li>在垃圾回收 GC 阶段，将 From 中存活对象复制到 To 空间。</li><li>将两块空间的 From 和 To 名字互换。</li></ol><p>复制算法的优缺点</p><ul><li>优点：<ol><li>吞吐量高：复制算法只需要遍历一次存活对象复制到 To 空间即可，比标记-整理算法少一次遍历的过程，因而性能较好，但是不如标记-清除算法， 因为标记清除算法不需要进行对象 的移动。</li><li>不会发生碎片化：复制算法在复制之后就会将对象按顺序放入 To 空间中，所以对象以外的区域都是可用空间，不存在碎片化内存空间。</li></ol></li><li>缺点：<ul><li>内存使用效率低：每次只能让一半的内存空间来为创 建对象使用。</li></ul></li></ul></li><li><p>标记整理算法</p><p>标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。</p><p>核心思想分为两个阶段：</p><ol><li>标记阶段，将所有存活的对象进行标记。Java 中使用可达性分析算法，从 GC Root 开始通过引用链遍历出所有存活对象。</li><li>整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。</li></ol><p>标记整理算法的优缺点</p><ul><li><p>优点：</p><ol><li>内存使用效率高：整个堆内存都可以使用，不会像复 制算法只能使用半个堆内存。</li><li>不会发生碎片化：在整理阶段可以将对象往内存的一侧进行移动，剩下的空间都是可以分配对象的有效空间。</li></ol></li><li><p>缺点：</p><ol><li><p>整理阶段的效率不高：整理算法有很多种，比如 Lisp2 整 理算法需要对整个堆中的对象搜索 3 次，整体性能不佳。</p><p>可以通过 TwoFinger、表格算法、ImmixGC 等高 效的整理算法优化此阶段的性能。</p></li></ol></li></ul></li><li><p>分代垃圾回收算法</p><p>回收步骤：</p><ol><li><p>分代垃圾回收将整个内存区域划分为年轻代和老年代，分代回收时，创建出来的对象，首先会被放入 Eden 伊甸园区。</p></li><li><p>随着对象在 Eden 区越来越多，如果 Eden 区满，新创建的对象已经无法放入，就会触发年轻代的 GC，称为 Minor GC 或者 Young GC。</p></li><li><p>Minor GC 会把需要 Eden 中和 From 需要回收的对象回收，把没有回收的对象放入 To 区。</p></li><li><p>接着，To 区和 From 区互换（From 区会变成 To 区，To 区变成 From 区）。</p></li><li><p>当 eden 区满时再往里放入对象，依然会发生 Minor GC。 此时依旧会回收 Eden 区和 From 中的对象，并把 Eden 和 From 区中剩余的对象放入 To 区。</p><blockquote><h4 id="注意：每次-Minor-GC-中都会为对象记录他的年龄，初始值为-0，每次-GC-完加-1。"><a href="#注意：每次-Minor-GC-中都会为对象记录他的年龄，初始值为-0，每次-GC-完加-1。" class="headerlink" title="注意：每次 Minor GC 中都会为对象记录他的年龄，初始值为 0，每次 GC 完加 1。"></a>注意：每次 Minor GC 中都会为对象记录他的年龄，初始值为 0，每次 GC 完加 1。</h4></blockquote></li><li><p>当 Minor GC 后对象的年龄达到阈值（最大 15，默认值和垃圾回收器有关），对象就会被晋升至老年代。</p></li><li><p>当老年代中空间不足，无法放入新的对象时，先尝试 minor gc 如果还是不足，就会触发 Full GC，Full GC 会对整个堆进行垃圾回收。</p></li><li><p>如果 Full GC 依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出 Out Of Memory 异常。</p></li></ol><p>分代垃圾回收算法的优缺点</p><ul><li>优点：<ol><li>可以通过调整年轻代和老年代的比例来适应不同类型的应用程序，提高内存的利用率和性能。</li><li>新生代和老年代使用不同的垃圾回收算法，新生代一般选择复制算法效率高、不会产生内存碎片，老年 代可以选择标记-清除和标记-整理算法，由程序员来选择灵活度较高。</li><li>分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收 (full gc),STW（Stop The World）由垃圾回收引起的停顿时间就会减少。</li></ol></li></ul></li></ol><p><strong>总结</strong></p><ol><li>标记-清除算法 Mark Sweep GC<ul><li>优点：实现简单</li><li>缺点：碎片化问题、分配速度慢</li></ul></li><li>复制算法 Copying GC<ul><li>优点：分配速度快，没有内存碎片</li><li>缺点：只能使用一半内存空间</li></ul></li><li>标记-整理算法 Mark Compact GC<ul><li>优点：没有内存碎片</li><li>缺点：整理阶段需要良好的算法， 否则效率不高</li></ul></li><li>分代 GC Generational GC<ul><li>年轻代 + 老年代使用不同的算法，更灵活。</li></ul></li></ol><h2 id="10、有哪些常用的垃圾回收器？"><a href="#10、有哪些常用的垃圾回收器？" class="headerlink" title="10、有哪些常用的垃圾回收器？"></a>10、有哪些常用的垃圾回收器？</h2><h3 id="10-1、常用的垃圾回收器"><a href="#10-1、常用的垃圾回收器" class="headerlink" title="10.1、常用的垃圾回收器"></a>10.1、常用的垃圾回收器</h3><ol><li><p>Serial 垃圾回收器 + SerialOld 垃圾回收器</p><p>Serial 是是一种单线程串行回收年轻代的垃圾回收器。</p><p>-XX:+UseSerialGC 新生代、老年代都使用串行回收器。</p><ul><li>回收年代和算法：年轻代复制算法、老年代标记-整理算法</li><li>优点：单 CPU 处理器下吞吐量非常出色</li><li>缺点：多 CPU 下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待</li><li>适用场景：Java 编写的客户端程序或者硬件配置有限的场景</li></ul><p><img src="/images/jvm-serialgc.png" alt="serial"></p></li><li><p>Parallel Scavenge 垃圾回收器 + Parallel Old 垃圾回收器</p><p>PS+PO 是 JDK8 默认的垃圾回收器，多线程并行回收， 关注的是系统的吞吐量。具备自动调整堆内存大小的特点。</p><ul><li>回收年代和算法：年轻代复制算法、老年代标记-整理算法</li><li>优点：吞吐量高，而且手动可控。 为了提高吞吐量，虚拟机会 动态调整堆的参数</li><li>缺点：不能保证单次的停顿时间</li><li>适用场景：后台任务，不需要与用户交互，并且容易产生大量的对象 比如：大数据的处理，大文件导出</li></ul><p><img src="/images/jvm-parallelScavenge.png" alt="parallel"></p></li><li><p>年轻代-ParNew 垃圾回收器</p><p>ParNew 垃圾回收器本质上是对 Serial 在多 CPU 下的优化，使用多线程进行垃圾回收</p><p>-XX:+UseParNewGC 新生代使用 ParNew 回收器，老年代使用串行回收器</p><ul><li>回收年代和算法：年轻代复制算法</li><li>优点：多 CPU 处理器下停顿时间较短</li><li>缺点：吞吐量和停顿时间不如 G1， 所以在 JDK9 之后不建议使用</li><li>适用场景：JDK8 及之前的版本中，与 CMS 老年代垃圾回收器搭配使用</li></ul><p><img src="/images/jvm-parnew.png" alt="parNew"></p></li><li><p>老年代- CMS(Concurrent Mark Sweep)垃圾回收器</p><p>CMS 垃圾回收器关注的是系统的暂停时间， 允许用户线程和垃圾回收线程在某些步骤中 同时执行，减少了用户线程的等待时间</p><p>参数：-XX:+UseConcMarkSweepGC</p><ul><li>回收年代和算法：老年代标记清除算法</li><li>优点：系统由于垃圾回收出现的停顿时间较短，用户体验好</li><li>缺点：内存碎片问题、退化问题、浮动垃圾问题</li><li>适用场景：大型的互联网系统中用户请求数 据量大、频率高的场景 比如订单接口、商品接口等</li></ul><p><img src="/images/jvm-cmsgc.png" alt="cms"></p><blockquote><p>CMS 垃圾回收器存在的问题</p><ol><li>CMS 使用标记-清除算法，在垃圾收集结束之后会出现大量的内存碎片，CMS 会在 Full GC 时进行碎片的整理。 如此会导致用户线程暂停，可以使用-XX:CMSFullGCsBeforeCompaction&#x3D;N 参数（默认 0）调整 N 次 Full GC 之 后再整理。</li><li>无法处理在并发清理过程中产生的“浮动垃圾”，不能做到完全的垃圾回收。</li><li>如果老年代内存不足无法分配对象，CMS 就会退化成 Serial Old 单线程回收老年代。</li><li>并发阶段会影响用户线程执行的性能</li></ol></blockquote></li><li><p>G1 – Garbage First 垃圾回收器</p><p>参数 1： -XX:+UseG1GC 打开 G1 的开关， JDK9 之后默认不需要打开</p><p>参数 2：-XX:MaxGCPauseMillis&#x3D;毫秒值 最大暂停的时间</p><ul><li>回收年代和算法：年轻代+老年代-&gt;复制算法</li><li>优点：对比较大的堆如超过 6G 的堆回收时延迟可控，不会产生内存碎片，并发标记的 SATB 算法效率高</li><li>缺点：JDK8 之前还不够成熟</li><li>适用场景：JDK8 最新版本、JDK9 之后建议默认使用</li></ul></li></ol><h3 id="10-2、什么是-Shenandoah？"><a href="#10-2、什么是-Shenandoah？" class="headerlink" title="10.2、什么是 Shenandoah？"></a>10.2、什么是 Shenandoah？</h3><p>Shenandoah 是由 Red Hat 开发的一款低延迟的垃圾收集器，Shenandoah 并发执行大部分 GC 工作，包括并 发的整理，堆大小对 STW 的时间基本没有影响。</p><h3 id="10-3、什么是-ZGC？"><a href="#10-3、什么是-ZGC？" class="headerlink" title="10.3、什么是 ZGC？"></a>10.3、什么是 ZGC？</h3><p>ZGC 是一种可扩展的低延迟垃圾回收器。ZGC 在垃圾回收过程中，STW 的时间不会超过一毫秒，适合需要低延迟的应用。支持几百兆到 16TB 的堆大小，堆大小对 STW 的时间基本没有影响。</p><p>10.4、总结</p><p>垃圾回收器的组合关系虽然很多，但是针对几个特定的版本，比较好的组合选择如下：</p><ul><li>JDK8 及之前： ParNew + CMS（关注暂停时间）、Parallel Scavenge + Parallel Old (关注 吞吐量)、 G1（JDK8 之前不建议，较大堆并且关注暂停时间）</li><li>JDK9 之后: G1（默认）</li><li>从 JDK9 之后，由于 G1 日趋成熟，JDK 默认的垃圾回收器已经修改为 G1，所以 强烈建议在生产环境上使用 G1。 如果对低延迟有较高的要求，可以使用 Shenandoah 或者 ZGC。</li></ul><h2 id="11、如何解决内存泄漏问题？"><a href="#11、如何解决内存泄漏问题？" class="headerlink" title="11、如何解决内存泄漏问题？"></a>11、如何解决内存泄漏问题？</h2><h3 id="11-1、什么是内存泄漏，如何解决内存泄漏问题？"><a href="#11-1、什么是内存泄漏，如何解决内存泄漏问题？" class="headerlink" title="11.1、什么是内存泄漏，如何解决内存泄漏问题？"></a>11.1、什么是内存泄漏，如何解决内存泄漏问题？</h3><ul><li>内存泄漏（memory leak）：在 Java 中如果不再使用一个对象，但是该对象依然在 GC ROOT 的引用链上，这 个对象就不会被垃圾回收器回收，这种情况就称之为内存泄漏。、</li><li>少量的内存泄漏可以容忍，但是如果发生持续的内存泄漏，就像滚雪球雪球越滚越大，不管有多大的内存迟 早会被消耗完，最终导致的结果就是内存溢出。</li></ul><h3 id="11-2、解决内存泄漏问题的思路"><a href="#11-2、解决内存泄漏问题的思路" class="headerlink" title="11.2、解决内存泄漏问题的思路"></a>11.2、解决内存泄漏问题的思路</h3><p>解决内存泄漏问题总共分为四个步骤，其中前两个步骤是最核心的：</p><ol><li>发现问题：通过监控工具尽可能早地发 现内存慢慢变大的现象</li><li>诊断原因：</li><li>修复问题：</li><li>测试验证：</li></ol><p><strong>发现问题 – 堆内存状况的对比</strong></p><ul><li><p>正常情况</p><ul><li>处理业务时会出现上下起伏， 业务对象频繁创建内存会升高， 触发 MinorGC 之后内存会降下 来。</li><li>手动执行 FULL GC 之后，内存大小会骤降，而且每次降完之后的大小是接近的。</li><li>长时间观察内存曲线应该是在一个范围内。</li></ul><p><img src="/images/jvm-normalMemory.png" alt="normalMemory"></p></li><li><p>出现内存泄漏</p><ul><li>处于持续增长的情况，即使 Minor GC 也不能把大部分对象回收</li><li>手动 FULL GC 之后的内存量每一 次都在增长</li><li>长时间观察内存曲线持续增长</li></ul><p><img src="/images/jvm-abnormalMemory.png" alt="abnormal"></p></li></ul><blockquote><p>生产环境通过运维提供的 Prometheus + Grafana 等监控平台查看</p><p>开发、测试环境通过 visualvm 查看</p></blockquote><p><strong>诊断 – 生成内存快照</strong></p><p>当堆内存溢出时，需要在堆内存溢出时将整个堆内存保存下来，生成内存快照(Heap Profile )文件。 生成方式有两种</p><ol><li>内存溢出时自动生成，添加生成内存快照的 Java 虚拟机参数：<ul><li>-XX:+HeapDumpOnOutOfMemoryError：发生 OutOfMemoryError 错误时，自动生成 hprof 内存快照文件。</li><li>-XX:HeapDumpPath&#x3D;：指定 hprof 文件的输出路径。</li></ul></li><li>导出运行中系统的内存快照，比较简单的方式有两种，注意只需要导出标记为存活的对象：<ol><li>通过 JDK 自带的 jmap 命令导出<ul><li>格式为： jmap -dump:live,format&#x3D;b,file&#x3D;文件路径和文件名 进程 ID</li></ul></li><li>通过 arthas 的 heapdump 命令导出<ul><li>格式为： heapdump –live 文件路径和文件名</li></ul></li></ol></li></ol><p><strong>诊断 – MAT 定位问题</strong></p><p>使用 MAT 打开 hprof 文件，并选择内存泄漏检测功能，MAT 会自行根据内存快照中保存的数据分析内存泄漏 的根源。</p><p><strong>修复问题</strong></p><p>修复内存溢出问题的要具体问题具体分析，问题总共可以分成三类：</p><ol><li><p>代码中的内存泄漏：由于代码的不合理写法存在隐患， 导致内存泄漏</p></li><li><p>并发引起内存溢出 - 参数不当：由于参数设置不当，比如堆内存设置 过小，导致并发量增加之后超过堆内 存的上限。</p><blockquote><p>解决方案：设置合理参数</p></blockquote></li><li><p>并发引起内存溢出 – 设计不当</p><p>系统的方案设计不当，比如：</p><ul><li>从数据库获取超大数据量的数据</li><li>线程池设计不当</li><li>生产者-消费者模型，消费者消费性能问题</li></ul><blockquote><p>解决方案：优化设计方案</p></blockquote></li></ol><blockquote><p>常用的 JVM 工具</p><p>JDK 自带的命令行工具：</p><ol><li>Jps：查看 java 进程，打印 main 方法所在类名和进程 id</li><li>Jmap：生成堆内存快照、打印类的直方图</li><li>第三方工具：<ul><li>VisualVM 监控</li><li>Arthas 综合性工具</li><li>MAT 堆内存分析工具</li></ul></li><li>监控工具： Prometheus + grafana</li></ol></blockquote><h2 id="12、常见的-JVM-参数"><a href="#12、常见的-JVM-参数" class="headerlink" title="12、常见的 JVM 参数"></a>12、常见的 JVM 参数</h2><ol><li>参数 1 ： -Xmx 和 –Xms<ul><li>-Xmx 参数设置的是最大堆内存，但是由于程序是运行在服务器或者容器上，计算可用内存时，要将元空间、操作系统、 其它软件占用的内存排除掉。</li><li>案例： 服务器内存 4G，操作系统+元空间最大值+其它软件占用 1.5G，-Xmx 可以设置为 2g。</li><li>最合理的设置方式应该是根据最大并发量估算服务器的配置，然后再根据服务器配置计算最大堆内存的值。</li><li>建议将-Xms 设置的和-Xmx 一样大,运行过程中不再产生扩容的开销。</li></ul></li><li>参数 2 ： -XX:MaxMetaspaceSize 和 -Xss<ul><li>-XX:MaxMetaspaceSize&#x3D;值 参数指的是最大元空间大小，默认值比较大，如果出现元空间内存泄漏会让操作系 统可用内存不可控，建议根据测试情况设置最大值，一般设置为 256m。</li><li>-Xss256k 栈内存大小，如果我们不指定栈的大小，JVM 将创建一个具有默认大小的栈。大小取决于操作系统和计 算机的体系结构。<ul><li>比如 Linux x86 64 位 ： 1MB，如果不需要用到这么大的栈内存，完全可以将此值调小节省内存 空间，合理值为 256k – 1m 之间。</li></ul></li></ul></li><li>参数 3：-Xmn<ul><li>-Xmn 年轻代的大小，默认值为整个堆的 1&#x2F;3，可以根据峰值流量计算最大的年轻代大小，尽量让对象只存放在年轻代，不进入老年代。</li><li>实际的场景中，接口的响应时间、创建对象的大小、程序内部还会有一些定时任务等不确定因素都会导致这个值的大小并不能仅凭计算得出，如果设置该值要进行大量的测试。</li><li>G1 垃圾回收器尽量不要设 置该值，G1 会动态调整年轻代的大小。</li></ul></li><li>打印 GC 日志<ul><li>JDK8 及之前 ： -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:文件路径</li><li>JDK9 及之后 ： -Xlog:gc*:file&#x3D;文件路径</li></ul></li><li>-XX:+DisableExplicitGC<ul><li>禁止在代码中使用 System.gc()， System.gc()可能会引起 FULLGC，在代码中尽量不要使用</li><li>使用 DisableExplicitGC 参数可以禁止使用 System.gc()方法调用。</li></ul></li><li>-XX:+HeapDumpOnOutOfMemoryError：发生 OutOfMemoryError 错误时，自动生成 hprof 内存快照文件。</li><li>-XX:HeapDumpPath&#x3D;：指定 hprof 文件的输出路径。</li></ol><p>解决问题 - 优化基础 JVM 参数</p><blockquote><p>JVM 参数模板：</p><ul><li>-Xms1g : 初始堆内存 1g</li><li>-Xmx1g : 最大堆内存 1g</li><li>-Xss256k : 每个线程的栈内存最大 256k</li><li>-XX:MaxMetaspaceSize&#x3D;512m : 最大元空间大小 512m</li><li>-XX:+DisableExplicitGC : 代码中 System.gc()无效</li><li>-XX:+HeapDumpOnOutOfMemoryError : OutOfMemory 错误时生成堆内存快照</li><li>-XX:HeapDumpPath&#x3D;&#x2F;opt&#x2F;dumps&#x2F;my-service.hprof : 堆内存快照生成位置</li><li>-XX:+PrintGCDetails : 打印详细垃圾回收日志</li><li>-XX:+PrintGCDateStamps : 打印垃圾回收时间</li><li>-Xloggc:文件路径 : 日志文件输出位置</li></ul></blockquote><p>注意：</p><ul><li>JDK9 及之后 gc 日志输出修改为 -Xlog:gc*:file&#x3D;文件名</li><li>堆内存大小和栈内存大小根据实际情况灵活调整。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机, 面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jvm, 面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
