<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jvm</title>
    <link href="/2024/04/25/jvm/"/>
    <url>/2024/04/25/jvm/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-虚拟机面试（Jvm-面试题）"><a href="#Java-虚拟机面试（Jvm-面试题）" class="headerlink" title="Java 虚拟机面试（Jvm 面试题）"></a>Java 虚拟机面试（Jvm 面试题）</h1><h2 id="1、什么是-JVM？"><a href="#1、什么是-JVM？" class="headerlink" title="1、什么是 JVM？"></a>1、什么是 JVM？</h2><h3 id="1-1、定义"><a href="#1-1、定义" class="headerlink" title="1.1、定义"></a>1.1、定义</h3><p>JVM 指的是 Java 虚拟机（ Java Virtual Machine ）。JVM 本质上是一个运行在计算机上的程序， 他的职责是运行 Java 字节码文件，Java 虚拟机上可以运行 Java、Kotlin、Scala、Groovy 等语言。</p><h3 id="1-2、作用"><a href="#1-2、作用" class="headerlink" title="1.2、作用"></a>1.2、作用</h3><p>为了支持 Java 中 Write Once，Run Anywhere；编写一次，到处运行的跨平台特性。</p><p><img src="/images/jvm-c&c++.png" alt="c/C++"></p><p><img src="/images/jvm-java.png" alt="Java"></p><h3 id="1-3、JVM-的功能"><a href="#1-3、JVM-的功能" class="headerlink" title="1.3、JVM 的功能"></a>1.3、JVM 的功能</h3><ol><li>解释和运行<ul><li>把字节码文件中的指令实时的解释成机器码， 并让计算机执行</li></ul></li><li>内存管理<ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制， 回收不再使用的对象</li></ul></li><li>即时编译<ul><li>对热点代码进行优化， 提升执行效率</li></ul></li></ol><h3 id="1-4、JVM-的组成"><a href="#1-4、JVM-的组成" class="headerlink" title="1.4、JVM 的组成"></a>1.4、JVM 的组成</h3><p><img src="/images/jvm-constitute.png" alt="JVM组成"></p><h3 id="1-5、常见的-JVM"><a href="#1-5、常见的-JVM" class="headerlink" title="1.5、常见的 JVM"></a>1.5、常见的 JVM</h3><ol><li>最常用的 JVM<ul><li>Oracle 提供的 Hotspot</li><li>OpenJDK 的 Hotspot</li></ul></li><li>有 JVM 二次开发需要<ul><li>OpenJDK 的 Hotspot</li></ul></li><li>云原生架构高性能需求<ul><li>GraalVM</li><li>OpenJ9</li></ul></li><li>电商物流金融高性能需求<ul><li>GraalVM</li><li>阿里 DragonWell 龙井</li></ul></li></ol><h3 id="1-6、总结"><a href="#1-6、总结" class="headerlink" title="1.6、总结"></a>1.6、总结</h3><p>什么是 JVM？</p><ol><li>JVM 指的是 Java 虚拟机，本质上是一个运行在计算机上的程序，他的职 责是运行 Java 字节码文件，作用是为了支持跨平台特性。</li><li>JVM 的功能有三项：<ul><li>第一是解释执行字节码指令；</li><li>第二是管理内存中对象的分配，完成自动的垃圾回收；</li><li>第三是优化热点代码提升执行效率。</li></ul></li><li>JVM 组成分为类加载子系统、运行时数据区、执行引擎、本地接口这四部分。</li><li>常用的 JVM 是 Oracle 提供的 Hotspot 虚拟机，也可以选择 GraalVM、龙井、 OpenJ9 等虚拟机。</li></ol><h2 id="2、了解过字节码文件的组成吗？"><a href="#2、了解过字节码文件的组成吗？" class="headerlink" title="2、了解过字节码文件的组成吗？"></a>2、了解过字节码文件的组成吗？</h2><p>字节码文件本质上是一个二进制的文件，无 法直接用记事本等工具打开阅读其内容。需 要通过专业的工具打开。</p><ul><li>开发环境使用 jclasslib 插件</li><li>服务器环境使用 javap –v 命令</li></ul><p><img src="/images/jvm-classFileConstitute.png" alt="字节码文件组成"></p><h2 id="3、说一下运行时数据区？"><a href="#3、说一下运行时数据区？" class="headerlink" title="3、说一下运行时数据区？"></a>3、说一下运行时数据区？</h2><p>运行时数据区指的是 JVM 所管理的内存区域，其中分成两大类：</p><ul><li>线程共享 – 方法区、堆</li><li>线程不共享 – 本地方法栈、虚拟机栈、程序计数器</li></ul><blockquote><p>（可选）直接内存主要是 NIO 使用，由操作系统直接管理，不属于 JVM 内存。</p></blockquote><p><img src="/images/jvm-runtimeArea.png" alt="运行时数据区"></p><h3 id="3-1、组成结构？"><a href="#3-1、组成结构？" class="headerlink" title="3.1、组成结构？"></a>3.1、组成结构？</h3><h4 id="3-1-1、程序计数器"><a href="#3-1-1、程序计数器" class="headerlink" title="3.1.1、程序计数器"></a>3.1.1、程序计数器</h4><p>程序计数器（Program Counter Register）也叫 PC 寄存器，每个线程会通过程序计数器记录当前要执行的的字节码指令的地址。</p><p>主要有两个作用：</p><ol><li>程序计数器可以控制程序指令的进行，实现分支、跳转、异常等逻辑。</li><li>在多线程执行情况下，Java 虚拟机需要通过程序计数器记录 CPU 切换前解释执行到那一句指令并继续解释运行。</li></ol><h4 id="3-1-2、Java-虚拟机栈"><a href="#3-1-2、Java-虚拟机栈" class="headerlink" title="3.1.2、Java 虚拟机栈"></a>3.1.2、Java 虚拟机栈</h4><p>Java 虚拟机栈采用栈的数据结构来管理方法调用中的基本数据，先进后出 ,每一个方法的调用使用一个栈帧来保存。 每个线程都会包含一个自己的虚拟机栈，它的生命周期和线程相同。</p><p>栈帧主要包含三部分内容：</p><ol><li>局部变量表：在方法执行过程中存放所有的局部变量。</li><li>操作数栈：虚拟机在执行指令过程中用来存放临时数据的一块区域。</li><li>帧数据：主要包含动态链接、方法出口、异常表等内容。<ul><li>动态链接：方法中要用到其他类的属性和方法，这些内容在字节码文件中是以编号保存的，运行过程中需要替换成 内存中的地址，这个编号到内存地址的映射关系就保存在动态链接中。</li><li>方法出口：方法调用完需要弹出栈帧，回到上一个方法，程序计数器要切换到上一个方法的地址继续执行，方法出 口保存的就是这个地址。</li><li>异常表：存放的是代码中异常的处理信息，包含了异常捕获的生效范围以及异常发生后跳转到的字节码指令位置。</li></ul></li></ol><h4 id="3-1-3、本地方法栈"><a href="#3-1-3、本地方法栈" class="headerlink" title="3.1.3、本地方法栈"></a>3.1.3、本地方法栈</h4><ul><li>Java 虚拟机栈存储了 Java 方法调用时的栈帧，而本地方法栈存储的是 native 本地方法的栈帧。</li><li>在 Hotspot 虚拟机中，Java 虚拟机栈和本地方法栈实现上使用了同一个栈空间。本地方法栈会在栈内 存上生成一个栈帧，临时保存方法的参数同时方便出现异常时也把本地方法的栈信息打印出来。</li></ul><h4 id="3-1-4、堆"><a href="#3-1-4、堆" class="headerlink" title="3.1.4、堆"></a>3.1.4、堆</h4><ul><li>一般 Java 程序中堆内存是空间最大的一块内存区域。创建出来的对象都存在于堆上。</li><li>栈上的局部变量表中，可以存放堆上对象的引用。静态变量也可以存放堆对象的引用，通过静态变量就可以实 现对象在线程之间共享。</li><li>堆是垃圾回收最主要的部分，堆结构更详细的划分与垃圾回收器有关。</li></ul><h4 id="3-1-5、方法区"><a href="#3-1-5、方法区" class="headerlink" title="3.1.5、方法区"></a>3.1.5、方法区</h4><p>方法区是 Java 虚拟机规范中提出来的一个虚拟机概念，在 HotSpot 不同版本中会用永久代或者元空间来实现。</p><p>方法区主要存放的是基础信息，包含：</p><ul><li>每一个加载的类的元信息（基础信息）。</li><li>运行时常量池，保存了字节码文件中的常量池内容，避免常量内容重复创建减少内存开销。</li><li>字符串常量池，存储字符串的常量。</li></ul><h4 id="3-1-6、直接内存"><a href="#3-1-6、直接内存" class="headerlink" title="3.1.6、直接内存"></a>3.1.6、直接内存</h4><p>直接内存并不在《Java 虚拟机规范》中存在，所以并不属于 Java 运行时的内存区域。在 JDK 1.4 中引入了 NIO 机 制，由操作系统直接管理这部分内容，主要为了提升读写数据的性能。在网络编程框架如 Netty 中被大量使用。 要创建直接内存上的数据，可以使用 ByteBuffer。</p><p>语法： ByteBuffer directBuffer &#x3D; ByteBuffer.allocateDirect(size);</p><h4 id="3-1-7、总结"><a href="#3-1-7、总结" class="headerlink" title="3.1.7、总结"></a>3.1.7、总结</h4><p>什么是运行时数据区？</p><p>运行时数据区指的是 JVM 所管理的内存区域，其中分成两大类：</p><ol><li>线程共享 – 方法区、堆<ul><li>方法区：存放每一个加载的类的元信息、运行时常量池、字符串常量池。</li><li>堆：存放创建出来的对象。</li></ul></li><li>线程不共享 – 本地方法栈、虚拟机栈、程序计数器<ul><li>本地方法栈和虚拟机栈都存放了线程中执行方法时需要使用的基础数据。</li><li>程序计数器存放了当前线程执行的字节码指令在内存中的地址。</li><li>直接内存主要是 NIO 使用，由操作系统直接管理，不属于 JVM 内存。</li></ul></li></ol><h3 id="3-2、哪些区域会出现内存溢出，会有什么现象？"><a href="#3-2、哪些区域会出现内存溢出，会有什么现象？" class="headerlink" title="3.2、哪些区域会出现内存溢出，会有什么现象？"></a>3.2、哪些区域会出现内存溢出，会有什么现象？</h3><p>内存溢出指的是内存中某一块区域的使用量超过允许使用的最大值，从而使用内存时因空间不足而失败，虚拟机一般会抛出指定的错误。</p><p>在 Java 虚拟机中，只有程序计数器不会出现内存溢出的情况，因为每个线程的程序计数器只保存一个固定长度的地址。</p><h4 id="3-2-1、堆内存溢出"><a href="#3-2-1、堆内存溢出" class="headerlink" title="3.2.1、堆内存溢出"></a>3.2.1、堆内存溢出</h4><ul><li><p>堆内存溢出指的是在堆上分配的对象空间超过堆的最大大小，从而导致的内存溢出。</p><p>堆的最大大小使用-Xmx 参数进行设置，如-Xmx10m 代表最大堆内存大小为 10m。</p></li><li><p>溢出之后会抛出 OutOfMemoryError，并提示是 Java heap Space 导致的。</p></li></ul><h4 id="3-2-2、栈内存溢出"><a href="#3-2-2、栈内存溢出" class="headerlink" title="3.2.2、栈内存溢出"></a>3.2.2、栈内存溢出</h4><ul><li><p>栈内存溢出指的是所有栈帧空间的占用内存超过最大值。</p><p>最大值使用-Xss 进行设置，比如-Xss256k 代表所有栈帧占用内存大小加起来不能超过 256k。</p></li><li><p>溢出之后会抛出 StackOverflowError。</p></li></ul><h4 id="3-2-3、方法区内存溢出"><a href="#3-2-3、方法区内存溢出" class="headerlink" title="3.2.3、方法区内存溢出"></a>3.2.3、方法区内存溢出</h4><ul><li>方法区内存溢出指的是方法区中存放的内容比如类的元信息超过方法区内存的最大值。<ul><li>JDK7 及之前版本方法区使用永 久代（-XX:MaxPermSize&#x3D;值）来实现。</li><li>JDK8 及之后使用元空间（-XX:MaxMetaspaceSize&#x3D;值）来实现。</li></ul></li></ul><h4 id="3-2-4、直接内存溢出"><a href="#3-2-4、直接内存溢出" class="headerlink" title="3.2.4、直接内存溢出"></a>3.2.4、直接内存溢出</h4><ul><li><p>直接内存溢出指的是申请的直接内存空间大小超过最大值。</p><p>使用-XX:MaxDirectMemorySize&#x3D;值设置最大值。</p></li><li><p>溢出之后会抛出 OutOfMemoryError。</p></li></ul><h4 id="3-2-5、总结"><a href="#3-2-5、总结" class="headerlink" title="3.2.5、总结"></a>3.2.5、总结</h4><p>哪些区域会出现内存溢出，会有什么现象？</p><p>内存溢出指的是内存中某一块区域的使用量超过允许使用的最大值，从而使用内存时因空间不足而失败，虚拟机一般会抛出指定的错误。</p><p>堆：溢出之后会抛出 OutOfMemoryError，并提示是 Java heap Space 导致的。</p><p>栈：溢出之后会抛出 StackOverflowError。</p><p>方法区：溢出之后会抛出 OutOfMemoryError，JDK7 及之前提示永久代，JDK8 及之后提示元空间。</p><p>直接内存：溢出之后会抛出 OutOfMemoryError。</p><h3 id="3-3、JVM-在-JDK6-8-之间在内存区域上有什么不同-？"><a href="#3-3、JVM-在-JDK6-8-之间在内存区域上有什么不同-？" class="headerlink" title="3.3、JVM 在 JDK6-8 之间在内存区域上有什么不同 ？"></a>3.3、JVM 在 JDK6-8 之间在内存区域上有什么不同 ？</h3><h4 id="3-3-1、方法区的实现"><a href="#3-3-1、方法区的实现" class="headerlink" title="3.3.1、方法区的实现"></a>3.3.1、方法区的实现</h4><p>方法区是《Java 虚拟机规范》中设计的虚拟概念，每款 Java 虚拟机在实现上都各不相同。Hotspot 设计如下：</p><ul><li>JDK7 及之前的版本将方法区存放在堆区域中的永久代空间，堆的大小由虚拟机参数来控制。</li><li>JDK8 及之后的版本将方法区存放在元空间中，元空间位于操作系统维护的直接内存中，默认情况下只要不 超过操作系统承受的上限，可以一直分配。也可以手动设置最大大小。</li></ul><p><img src="/images/jvm-jdk6~8-methodArea.png" alt="methodArea"></p><p>使用元空间替换永久代的原因：</p><ol><li>提高内存上限：元空间使用的是操作系统内存，而不是 JVM 内存。如果不设置上限，只要不超过操作系统内存 上限，就可以持续分配。而永久代在堆中，可使用的内存上限是有限的。所以使用元空间可以有效减少 OOM 情况 的出现。</li><li>优化垃圾回收的策略：永久代在堆上，垃圾回收机制一般使用老年代的垃圾回收方式，不够灵活。使用元空间 之后单独设计了一套适合方法区的垃圾回收机制。</li></ol><h4 id="3-3-2、字符串常量池的位置"><a href="#3-3-2、字符串常量池的位置" class="headerlink" title="3.3.2、字符串常量池的位置"></a>3.3.2、字符串常量池的位置</h4><p>早期设计时，字符串常量池是属于运行时常量池的一部分，他们存储的位置也是一致的。后续做出了调整， 将字符串常量池和运行时常量池做了拆分。</p><p><img src="/images/jvm-jdk6~8-finalStringArea.png" alt="finalString"></p><p>字符串常量池从方法区移动到堆的原因：</p><ol><li>垃圾回收优化：字符串常量池的回收逻辑和对象的回收逻辑类似，内存不足的情况下，如果字符串常量池中的 常量不被使用就可以被回收；方法区中的类的元信息回收逻辑更复杂一些。移动到堆之后，就可以利用对象的垃圾 回收器，对字符串常量池进行回收。</li><li>让方法区大小更可控：一般在项目中，类的元信息不会占用特别大的空间，所以会给方法区设置一个比较小的 上限。如果字符串常量池在方法区中，会让方法区的空间大小变得不可控。</li><li>intern 方法的优化：JDK6 版本中 intern () 方法会把第一次遇到的字符串实例复制到永久代的字符串常量 池中。JDK7 及之后版本中由于字符串常量池在堆上，就可以进行优化：字符串保存在堆上，把字符串的引用放入 字符串常量池，减少了复制的操作。</li></ol><h2 id="4、类的生命周期？"><a href="#4、类的生命周期？" class="headerlink" title="4、类的生命周期？"></a>4、类的生命周期？</h2><p><img src="/images/jvm-classLife.png" alt="ClassLife"></p><p><strong>加载(Loading)阶段</strong></p><ol><li>类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息。 程序员可以使用 Java 代码拓展的不同的渠道。</li><li>类加载器在加载完类之后，Java 虚拟机会将字节码中的信息保存到内存的方法区中。在方法区生成一个 InstanceKlass 对象，保存类的所有信息。</li><li>在堆中生成一份与方法区中数据类似的 java.lang.Class 对象， 作用是在 Java 代码中去获取类的信息。</li></ol><p><strong>连接（Linking）阶段</strong></p><ol><li><p>连接阶段之验证连接</p><p>验证的主要目的是检测 Java 字节码文件是否遵守《Java 虚拟机规 范》中的约束。该阶段一般不需要程序员参与。</p><p>主要包含如下四部分，具体详见《Java 虚拟机规范》：</p><ol><li>文件格式验证，比如文件是否以 0xCAFEBABE 开头，主次版本号是否满足当前 Java 虚拟机版本要求。</li><li>元信息验证，例如类必须有父类（super 不能为空）。</li><li>验证程序执行指令的语义，比如方法内的指令执行到一半强行跳转到其他方法中去。</li><li>符号引用验证，例如是否访问了其他类中 private 的方法等。</li></ol></li><li><p>连接阶段之准备阶段</p><ul><li>为静态变量（static）分配内存并设置初值。final 修饰的基本数据类型的静态变量，准备阶段直接会将代码中的值进行赋值。</li></ul></li><li><p>连接阶段之解析阶段</p><ul><li>将常量池中的符号引用替换为直接引用。符号引用就是在字节码文件中使用编号来访问常量池 的内容。</li><li>直接引用不在使用编号，而是使用内存中地址进行访问具体的数据。</li></ul></li></ol><p><strong>初始化阶段</strong></p><ul><li>初始化阶段会执行静态代码块中的代码，并为静态变量赋值。</li><li>初始化阶段会执行字节码文件中 clinit 部分的字节码指令。</li></ul><p><strong>类的卸载</strong></p><p>判定一个类可以被卸载。需要同时满足下面三个条件：</p><ol><li>此类所有实例对象都已经被回收，在堆中不存在任何该类的实例对象以及子类对象。</li><li>加载该类的类加载器已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用。</li></ol><p><strong>总结</strong></p><ul><li>加载：根据类的全限定名把字节码文件的内容加载并转换成合适的数据放入内存中，存放在方法区和堆上。</li><li>连接<ol><li>验证：魔数、版本号等验证，一般不需要 程序员关注。</li><li>准备：为静态变量分配内存并设置初值。</li><li>解析：将常量池中的符号引用（编号）替 换为直接引用（内存地址）。</li></ol></li><li>初始化：执行静态代码块和静态变量的赋值。</li></ul><h2 id="5、什么是类加载器？"><a href="#5、什么是类加载器？" class="headerlink" title="5、什么是类加载器？"></a>5、什么是类加载器？</h2><h3 id="5-1、什么是类加载器？"><a href="#5-1、什么是类加载器？" class="headerlink" title="5.1、什么是类加载器？"></a>5.1、什么是类加载器？</h3><p>类加载器负载在类的加载过程中将字节码信息以流的方式获取并加载到内存中。JDK8 及之前如下：</p><p><img src="/images/jvm-jdk~8-classLoader.png" alt="jdk~8"></p><p>类加载器负载在类的加载过程中将字节码信息以流的方式获取并加载到内存中。JDK9 之后均由 Java 实现：</p><p><img src="/images/jvm-jdk9-classLoader.png" alt="jdk9"></p><h3 id="5-2、有哪些常见的类加载器？"><a href="#5-2、有哪些常见的类加载器？" class="headerlink" title="5.2、有哪些常见的类加载器？"></a>5.2、有哪些常见的类加载器？</h3><ol><li>启动类加载器（Bootstrap ClassLoader）<ul><li>由 Hotspot 虚拟机提供的类加载器，JDK9 前使用 C++编写的、JDK9 后使用 Java 编写。</li><li>默认加载 Java 安装目录&#x2F;jre&#x2F;lib 下的类文件，比如 rt.jar，tools.jar，resources.jar 等。</li></ul></li><li>扩展类加载器（Extension Class Loader）<ul><li>由 JDK 中提供的、使用 Java 编写的类加载器。JDK9 之后由于采用模块化， 改名为 Platform 平台类加载器。</li><li>默认加载 Java 安装目录&#x2F;jre&#x2F;lib&#x2F;ext 下的类文件。</li></ul></li><li>应用程序类加载器（Application Class Loader）<ul><li>由 JDK 中提供的、使用 Java 编写的类加载器。默认加载为应用程序 classpath 下的类。</li></ul></li><li>自定义类加载器<ul><li>允许用户自行实现类加载的逻辑，可以从网络、数据库等来源加载类信息。</li><li>自定义类加载器需要继承自 ClassLoader 抽象类，重写 findClass 方法。</li></ul></li></ol><p><strong>总结</strong></p><ol><li>启动类加载器（Bootstrap ClassLoader）加载核心类</li><li>扩展类加载器（Extension ClassLoader）加载扩展类</li><li>应用程序类加载器（Application ClassLoader）加载应用 classpath 中的类</li><li>自定义类加载器，重写 findClass 方法。</li></ol><blockquote><p>JDK9 及之后扩展类加载器（Extension ClassLoader）变成平台类加载器（Platform ClassLoader）</p></blockquote><h2 id="6、什么是双亲委派机制"><a href="#6、什么是双亲委派机制" class="headerlink" title="6、什么是双亲委派机制"></a>6、什么是双亲委派机制</h2><p>双亲委派机制：指的是当一个类加载器接收到加载类的任务时，会向上查找是否加载过，再由顶向下进行加载。</p><p><img src="/images/jvm-classLoaderMachanism.png" alt="双亲委派机制"></p><p>每个类加载器都有一个父类加载器，在类加载的过程中，每个类加载器都会先检查是否已经加载了该类，如果已经加载则直接返回，否则会将加载请求委派给父类加载器</p><h3 id="6-1、双亲委派机制有什么用？"><a href="#6-1、双亲委派机制有什么用？" class="headerlink" title="6.1、双亲委派机制有什么用？"></a>6.1、双亲委派机制有什么用？</h3><ol><li>保证类加载的安全性：通过该机制避免恶意代码替换 JDK 中的核心类库。比如 <code>java.lang.String</code> 确保核心类库的完整性和安全性。</li><li>避免重复加载：可以避免同一个类被 多次加载。</li></ol><h3 id="6-2、打破双亲委派机制？"><a href="#6-2、打破双亲委派机制？" class="headerlink" title="6.2、打破双亲委派机制？"></a>6.2、打破双亲委派机制？</h3><p>ClassLoader 中包含 4 个核心方法：</p><ul><li>public Class loadClass(String name) ：类加载的入口，提供双亲委派机制。内部会调用 findClass。</li><li>protected Class findClass(String name)：由类加载器子类实现，获取二进制数据调用 defineClass ，比如 URLClassLoader 会根据文件路径去获取类文件中的二进制数据。</li><li>protected final Class defineClass(String name, byte[] b, int off, int len)：做一些类名的校验，然后调用虚拟机底层的方法将字节码信息加载到虚拟机内存中。</li><li>protected final void resolveClass(Class c)：执行类生命周期中的连接阶段。</li></ul><p>调用关系如下：</p><pre><code class=" mermaid">graph LR;loadClass:类加载入口/双亲委派机制--&gt;findClass:加载类--&gt;defineClass:调用虚拟机底层方法将字节码信息加载到虚拟机内存中loadClass:类加载入口/双亲委派机制--&gt;resolveClass:类的连接阶段</code></pre><p>对程序员来而言，打破双亲委派机制的唯一方法就是实现自定义类加载器重写 loadClass 方法，将其中的双亲委派机制代码去掉。</p><h3 id="6-3、总结"><a href="#6-3、总结" class="headerlink" title="6.3、总结"></a>6.3、总结</h3><ul><li>双亲委派机制：指的是当一个类加载器接收到加载类的任务时，会向上交给父类加载 器查找是否加载过，再由顶向下进行加载。</li><li>双亲委派机制的作用：保证类加载的安全性，避免重复加载。</li><li>打破双亲委派机制的方法：实现自定义类加载器，重写 defineClass 方法，将双亲委派机制的代码去除。</li></ul><blockquote><h2 id="Tomcat-的自定义类加载器"><a href="#Tomcat-的自定义类加载器" class="headerlink" title="Tomcat 的自定义类加载器"></a>Tomcat 的自定义类加载器</h2><p><img src="/images/jvm-tomcat-classLoader.png" alt="TomcatClassLoader"></p><ol><li>common 类加载：主要加载 tomcat 自身使用以及应用使用的 jar 包，默认配置在 catalina.properties 文件中。<ul><li>common.loader&#x3D;”${catalina.base}&#x2F;lib”,”${catalina.base}&#x2F;lib&#x2F;*.jar”</li></ul></li><li>catalina 类加载器主要加载 tomcat 自身使用的 jar 包，不让应用使用，默认配置在 catalina.properties 文件中。<ul><li>server.loader&#x3D; 默认配置为空，为空时 catalina 加载器和 common 加载器是同一个。</li></ul></li><li>shared 类加载器主要加载应用使用的 jar 包，不让 tomcat 使用，默认配置在 catalina.properties 文件中。<ul><li>shared.loader&#x3D; 默认配置为空，为空时 shared 加载器和 common 加载器是同一个。</li></ul></li><li>ParallelWebappClassLoader 类加载器可以多线程并行加载应用中使用到的类，每个应用都拥有一个自己的该类加载器。</li></ol><p>为什么每个应用会拥有一个独立的 ParallelWebappClassLoader 类加载器呢？</p><p>同一个类加载器，只能加载一个同名的类。两个应用中相同名称的类都必须要加载。</p><p>ParallelWebappClassLoader 的执行流程：</p><p><img src="/images/jvm-paralleWebappClassLoader.png" alt="ParallelWebappClassLoader"></p><p>默认打破双亲委派机制(不开启代理)，应用中的类如果没有加载过。先会从当前类加载器加载，然后再交给父类加载器通过双亲委派机制加载。</p><p>JasperLoader 类加载器负责加载 JSP 文件编译出来的 class 字节码文件，为了实现热部署（不重启让修改的 jsp 生效），每一个 jsp 文件都由一个独立的 JasperLoader 负责加载。</p></blockquote><h2 id="7、如何判断堆上的对象没有被引用？"><a href="#7、如何判断堆上的对象没有被引用？" class="headerlink" title="7、如何判断堆上的对象没有被引用？"></a>7、如何判断堆上的对象没有被引用？</h2><p>常见的有两种判断方法：引用计数法和可达性分析法。</p><ol><li><p>引用计数法会为每个对象维护一个引用计数器，当对象被引用时加 1，取消引用时减 1。</p><p>引用计数法的优点是实现简单，缺点有两点：</p><ul><li>每次引用和取消引用都需要维护计数器，对系统性能会有一定的影响</li><li>存在循环引用问题，所谓循环引用就是当 A 引用 B，B 同时引用 A 时会出现对象无法回收的问题。</li></ul></li><li><p>Java 使用的是可达性分析算法来判断对象是否可以被回收。</p><p>可达性分析将对象分为两类：垃圾回收的根对象（GC Root）和普通对象，对象与对象之间存在引用关系。</p><ul><li>可达性分析算法指的是如果从某个到 GC Root 对象是可达的，对象就 不可被回收。</li></ul></li></ol><p>哪些对象被称之为 GC Root 对象呢？</p><ul><li>线程 Thread 对象，引用线程栈帧中的方法参数、局部变量等。</li><li>系统类加载器加载的 java.lang.Class 对象，引用类中的静态变量。</li><li>监视器对象，用来保存同步锁 synchronized 关键字持有的对象。</li><li>本地方法调用时使用的全局对象。</li></ul><p><strong>总结</strong></p><p>如何判断堆上的对象有没有被引用？</p><ol><li><p>引用计数法会为每个对象维护一个引用计数器，当对象被引用时加 1，取消引用时减 1。</p><p>由于存在循环引用问题，所以 Java 没有使用这种方法。</p></li><li><p>Java 使用的是可达性分析算法来判断对象是否可以被回收。</p><p>可达性分析将对象分为两类：垃圾回收的根对象（GC Root）和普通对象。</p><p>可达性分析算法指的是如果从某个到 GC Root 对象是可达的，对象就不可被回收。</p><p>最常见的是 GC Root 对象会引用栈上的局部变量和静态变量导致对象不可回收。</p></li></ol><h2 id="8、JVM-中都有哪些引用类型？"><a href="#8、JVM-中都有哪些引用类型？" class="headerlink" title="8、JVM 中都有哪些引用类型？"></a>8、JVM 中都有哪些引用类型？</h2><ul><li>强引用，JVM 中默认引用关系就是强引用，即是对象被局部变量、静态变量等 GC Root 关联的对象引用，只要 这层关系存在，普通对象就不会被回收。</li><li>软引用，软引用相对于强引用是一种比较弱的引用关系，如果一个对象只有软引用关联到它，当程序内存不足 时，就会将软引用中的数据进行回收。软引用主要在缓存框架中使用。</li><li>弱引用，弱引用的整体机制和软引用基本一致，区别在于弱引用包含的对象在垃圾回收时，不管内存够不够都 会直接被回收，弱引用主要在 ThreadLocal 中使用。</li><li>虚引用（幽灵引用&#x2F;幻影引用），不能通过虚引用对象获取到包含的对象。虚引用唯一的用途是当对象被垃圾回 收器回收时可以接收到对应的通知。直接内存中为了及时知道直接内存对象不再使用，从而回收内存，使用了 虚引用来实现。</li><li>终结器引用，终结器引用指的是在对象需要被回收时，终结器引用会关联对象并放置在 Finalizer 类中的引用队 列中，在稍后由一条由 FinalizerThread 线程从队列中获取对象，然后执行对象的 finalize 方法，在对象第二次 被回收时，该对象才真正的被回收。</li></ul><p><strong>ThreadLocal 中为什么要使用弱引用？</strong></p><p>ThreadLocal 可以在线程中存放线程的本地变量，保证数据的线程安全。</p><p>ThreadLocal 中保存对象的机制：</p><ol><li>在每个线程中存放一个 ThreadLocalMap 对象，本质上就是一个数组实现的哈希表，里边存放多个 Entry 对象。</li><li>每个 Entry 对象继承自弱引用，内部存放 ThreadLocal 对象。同时用强引用，引用保存的 ThreadLocal 对应的 value 值。</li></ol><pre><code class=" mermaid">graph TD;线程 -. 通过ThreadLocal对象的hash值找到线程中ThreadLocalMap对应的槽位 .-&gt; ThreadLocalMap -.创建一个Entry对象Key弱引用到threadlocal对象Value为set方法参数 .-&gt; Entry:弱引用对象/ThreadLocal对象 -.通过Entry中保存的value值进行预期操作 .-&gt; Value值</code></pre><p>不再使用 Threadlocal 对象时， threadlocal &#x3D; null；由于是弱引用，那么在垃圾回收之后，ThreadLocal 对象就可以被回收。</p><p>此时还有 Entry 对象和 value 对象没有能被回收，所以在 ThreadLocal 类的 set、get、remove 方法中，在某些特定条件满足的情况下，会主动删除这两个对象。</p><p>如果一直不调用 set、get、remove 方法或者调用没有满足条件，那么该部分对象就会出现内存泄漏。强烈建议在 ThreadLocal 不再使用时，调用 remove 方法回收将 Entry 对象的引用关系去掉，这样就可以回收这两个对象。</p><p><strong>总结</strong></p><p>ThreadLocal 中为什么要使用弱引用？</p><ul><li>当 threadlocal 对象不再使用时，使用弱引用可以让对象被回收；因为仅有弱引用没有强引用的情况下，对象是可以被回收的。</li><li>弱引用并没有完全解决掉对象回收的问题，Entry 对象和 value 值无法被回收，所以合理的做法是手动调用 remove 方法进行回收，然后再将 threadlocal 对象的强引用解除 。</li></ul><h2 id="9、有哪些常见的垃圾回收算法？"><a href="#9、有哪些常见的垃圾回收算法？" class="headerlink" title="9、有哪些常见的垃圾回收算法？"></a>9、有哪些常见的垃圾回收算法？</h2><ul><li>1960 年 John McCarthy 发布了第一个 GC 算法：标记-清除算法。</li><li>1963 年 Marvin L. Minsky 发布了复制算法。</li></ul><p>本质上后续所有的垃圾回收算法，都是在上述两种算法的基础上优化而来。</p><pre><code class=" mermaid">graph LR;标记-清除算法:Mark-Sweep-GC --&gt; 复制算法:Copying-GC --&gt; 标记-整理算法:Mark-Compact-GC --&gt; 分代GC:Generational-GC</code></pre><ol><li><p>标记清除算法</p><p>标记清除算法的核心思想分为两个阶段：</p><ol><li>标记阶段，将所有存活的对象进行标记。Java 中使用可达性分析算法，从 GC Root 开始通过引用链遍历出 所有存活对象。</li><li>清除阶段，从内存中删除没有被标记也就是非存活对象。</li></ol><p>标记清除算法的优缺点</p><ul><li>优点：实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。</li><li>缺点：<ol><li>碎片化问题:由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一 个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。</li><li>分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才 能获得合适的内存空间。</li></ol></li></ul></li><li><p>复制算法</p><p>复制算法的核心思想是：</p><ol><li>准备两块空间 From 空间和 To 空间，每次在对象分配阶段，只能使用其中一块空间（From 空间）。</li><li>在垃圾回收 GC 阶段，将 From 中存活对象复制到 To 空间。</li><li>将两块空间的 From 和 To 名字互换。</li></ol><p>复制算法的优缺点</p><ul><li>优点：<ol><li>吞吐量高：复制算法只需要遍历一次存活对象复制到 To 空间即可，比标记-整理算法少一次遍历的过程，因而性能较好，但是不如标记-清除算法， 因为标记清除算法不需要进行对象 的移动。</li><li>不会发生碎片化：复制算法在复制之后就会将对象按顺序放入 To 空间中，所以对象以外的区域都是可用空间，不存在碎片化内存空间。</li></ol></li><li>缺点：<ul><li>内存使用效率低：每次只能让一半的内存空间来为创 建对象使用。</li></ul></li></ul></li><li><p>标记整理算法</p><p>标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。</p><p>核心思想分为两个阶段：</p><ol><li>标记阶段，将所有存活的对象进行标记。Java 中使用可达性分析算法，从 GC Root 开始通过引用链遍历出所有存活对象。</li><li>整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。</li></ol><p>标记整理算法的优缺点</p><ul><li><p>优点：</p><ol><li>内存使用效率高：整个堆内存都可以使用，不会像复 制算法只能使用半个堆内存。</li><li>不会发生碎片化：在整理阶段可以将对象往内存的一侧进行移动，剩下的空间都是可以分配对象的有效空间。</li></ol></li><li><p>缺点：</p><ol><li><p>整理阶段的效率不高：整理算法有很多种，比如 Lisp2 整 理算法需要对整个堆中的对象搜索 3 次，整体性能不佳。</p><p>可以通过 TwoFinger、表格算法、ImmixGC 等高 效的整理算法优化此阶段的性能。</p></li></ol></li></ul></li><li><p>分代垃圾回收算法</p><p>回收步骤：</p><ol><li><p>分代垃圾回收将整个内存区域划分为年轻代和老年代，分代回收时，创建出来的对象，首先会被放入 Eden 伊甸园区。</p></li><li><p>随着对象在 Eden 区越来越多，如果 Eden 区满，新创建的对象已经无法放入，就会触发年轻代的 GC，称为 Minor GC 或者 Young GC。</p></li><li><p>Minor GC 会把需要 Eden 中和 From 需要回收的对象回收，把没有回收的对象放入 To 区。</p></li><li><p>接着，To 区和 From 区互换（From 区会变成 To 区，To 区变成 From 区）。</p></li><li><p>当 eden 区满时再往里放入对象，依然会发生 Minor GC。 此时依旧会回收 Eden 区和 From 中的对象，并把 Eden 和 From 区中剩余的对象放入 To 区。</p><blockquote><h4 id="注意：每次-Minor-GC-中都会为对象记录他的年龄，初始值为-0，每次-GC-完加-1。"><a href="#注意：每次-Minor-GC-中都会为对象记录他的年龄，初始值为-0，每次-GC-完加-1。" class="headerlink" title="注意：每次 Minor GC 中都会为对象记录他的年龄，初始值为 0，每次 GC 完加 1。"></a>注意：每次 Minor GC 中都会为对象记录他的年龄，初始值为 0，每次 GC 完加 1。</h4></blockquote></li><li><p>当 Minor GC 后对象的年龄达到阈值（最大 15，默认值和垃圾回收器有关），对象就会被晋升至老年代。</p></li><li><p>当老年代中空间不足，无法放入新的对象时，先尝试 minor gc 如果还是不足，就会触发 Full GC，Full GC 会对整个堆进行垃圾回收。</p></li><li><p>如果 Full GC 依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出 Out Of Memory 异常。</p></li></ol><p>分代垃圾回收算法的优缺点</p><ul><li>优点：<ol><li>可以通过调整年轻代和老年代的比例来适应不同类型的应用程序，提高内存的利用率和性能。</li><li>新生代和老年代使用不同的垃圾回收算法，新生代一般选择复制算法效率高、不会产生内存碎片，老年 代可以选择标记-清除和标记-整理算法，由程序员来选择灵活度较高。</li><li>分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收 (full gc),STW（Stop The World）由垃圾回收引起的停顿时间就会减少。</li></ol></li></ul></li></ol><p><strong>总结</strong></p><ol><li>标记-清除算法 Mark Sweep GC<ul><li>优点：实现简单</li><li>缺点：碎片化问题、分配速度慢</li></ul></li><li>复制算法 Copying GC<ul><li>优点：分配速度快，没有内存碎片</li><li>缺点：只能使用一半内存空间</li></ul></li><li>标记-整理算法 Mark Compact GC<ul><li>优点：没有内存碎片</li><li>缺点：整理阶段需要良好的算法， 否则效率不高</li></ul></li><li>分代 GC Generational GC<ul><li>年轻代 + 老年代使用不同的算法，更灵活。</li></ul></li></ol><h2 id="10、有哪些常用的垃圾回收器？"><a href="#10、有哪些常用的垃圾回收器？" class="headerlink" title="10、有哪些常用的垃圾回收器？"></a>10、有哪些常用的垃圾回收器？</h2><h3 id="10-1、常用的垃圾回收器"><a href="#10-1、常用的垃圾回收器" class="headerlink" title="10.1、常用的垃圾回收器"></a>10.1、常用的垃圾回收器</h3><ol><li><p>Serial 垃圾回收器 + SerialOld 垃圾回收器</p><p>Serial 是是一种单线程串行回收年轻代的垃圾回收器。</p><p>-XX:+UseSerialGC 新生代、老年代都使用串行回收器。</p><ul><li>回收年代和算法：年轻代复制算法、老年代标记-整理算法</li><li>优点：单 CPU 处理器下吞吐量非常出色</li><li>缺点：多 CPU 下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待</li><li>适用场景：Java 编写的客户端程序或者硬件配置有限的场景</li></ul><p><img src="/images/jvm-serialgc.png" alt="serial"></p></li><li><p>Parallel Scavenge 垃圾回收器 + Parallel Old 垃圾回收器</p><p>PS+PO 是 JDK8 默认的垃圾回收器，多线程并行回收， 关注的是系统的吞吐量。具备自动调整堆内存大小的特点。</p><ul><li>回收年代和算法：年轻代复制算法、老年代标记-整理算法</li><li>优点：吞吐量高，而且手动可控。 为了提高吞吐量，虚拟机会 动态调整堆的参数</li><li>缺点：不能保证单次的停顿时间</li><li>适用场景：后台任务，不需要与用户交互，并且容易产生大量的对象 比如：大数据的处理，大文件导出</li></ul><p><img src="/images/jvm-parallelScavenge.png" alt="parallel"></p></li><li><p>年轻代-ParNew 垃圾回收器</p><p>ParNew 垃圾回收器本质上是对 Serial 在多 CPU 下的优化，使用多线程进行垃圾回收</p><p>-XX:+UseParNewGC 新生代使用 ParNew 回收器，老年代使用串行回收器</p><ul><li>回收年代和算法：年轻代复制算法</li><li>优点：多 CPU 处理器下停顿时间较短</li><li>缺点：吞吐量和停顿时间不如 G1， 所以在 JDK9 之后不建议使用</li><li>适用场景：JDK8 及之前的版本中，与 CMS 老年代垃圾回收器搭配使用</li></ul><p><img src="/images/jvm-parnew.png" alt="parNew"></p></li><li><p>老年代- CMS(Concurrent Mark Sweep)垃圾回收器</p><p>CMS 垃圾回收器关注的是系统的暂停时间， 允许用户线程和垃圾回收线程在某些步骤中 同时执行，减少了用户线程的等待时间</p><p>参数：-XX:+UseConcMarkSweepGC</p><ul><li>回收年代和算法：老年代标记清除算法</li><li>优点：系统由于垃圾回收出现的停顿时间较短，用户体验好</li><li>缺点：内存碎片问题、退化问题、浮动垃圾问题</li><li>适用场景：大型的互联网系统中用户请求数 据量大、频率高的场景 比如订单接口、商品接口等</li></ul><p><img src="/images/jvm-cmsgc.png" alt="cms"></p><blockquote><p>CMS 垃圾回收器存在的问题</p><ol><li>CMS 使用标记-清除算法，在垃圾收集结束之后会出现大量的内存碎片，CMS 会在 Full GC 时进行碎片的整理。 如此会导致用户线程暂停，可以使用-XX:CMSFullGCsBeforeCompaction&#x3D;N 参数（默认 0）调整 N 次 Full GC 之 后再整理。</li><li>无法处理在并发清理过程中产生的“浮动垃圾”，不能做到完全的垃圾回收。</li><li>如果老年代内存不足无法分配对象，CMS 就会退化成 Serial Old 单线程回收老年代。</li><li>并发阶段会影响用户线程执行的性能</li></ol></blockquote></li><li><p>G1 – Garbage First 垃圾回收器</p><p>参数 1： -XX:+UseG1GC 打开 G1 的开关， JDK9 之后默认不需要打开</p><p>参数 2：-XX:MaxGCPauseMillis&#x3D;毫秒值 最大暂停的时间</p><ul><li>回收年代和算法：年轻代+老年代-&gt;复制算法</li><li>优点：对比较大的堆如超过 6G 的堆回收时延迟可控，不会产生内存碎片，并发标记的 SATB 算法效率高</li><li>缺点：JDK8 之前还不够成熟</li><li>适用场景：JDK8 最新版本、JDK9 之后建议默认使用</li></ul></li></ol><h3 id="10-2、什么是-Shenandoah？"><a href="#10-2、什么是-Shenandoah？" class="headerlink" title="10.2、什么是 Shenandoah？"></a>10.2、什么是 Shenandoah？</h3><p>Shenandoah 是由 Red Hat 开发的一款低延迟的垃圾收集器，Shenandoah 并发执行大部分 GC 工作，包括并 发的整理，堆大小对 STW 的时间基本没有影响。</p><h3 id="10-3、什么是-ZGC？"><a href="#10-3、什么是-ZGC？" class="headerlink" title="10.3、什么是 ZGC？"></a>10.3、什么是 ZGC？</h3><p>ZGC 是一种可扩展的低延迟垃圾回收器。ZGC 在垃圾回收过程中，STW 的时间不会超过一毫秒，适合需要低延迟的应用。支持几百兆到 16TB 的堆大小，堆大小对 STW 的时间基本没有影响。</p><p>10.4、总结</p><p>垃圾回收器的组合关系虽然很多，但是针对几个特定的版本，比较好的组合选择如下：</p><ul><li>JDK8 及之前： ParNew + CMS（关注暂停时间）、Parallel Scavenge + Parallel Old (关注 吞吐量)、 G1（JDK8 之前不建议，较大堆并且关注暂停时间）</li><li>JDK9 之后: G1（默认）</li><li>从 JDK9 之后，由于 G1 日趋成熟，JDK 默认的垃圾回收器已经修改为 G1，所以 强烈建议在生产环境上使用 G1。 如果对低延迟有较高的要求，可以使用 Shenandoah 或者 ZGC。</li></ul><h2 id="11、如何解决内存泄漏问题？"><a href="#11、如何解决内存泄漏问题？" class="headerlink" title="11、如何解决内存泄漏问题？"></a>11、如何解决内存泄漏问题？</h2><h3 id="11-1、什么是内存泄漏，如何解决内存泄漏问题？"><a href="#11-1、什么是内存泄漏，如何解决内存泄漏问题？" class="headerlink" title="11.1、什么是内存泄漏，如何解决内存泄漏问题？"></a>11.1、什么是内存泄漏，如何解决内存泄漏问题？</h3><ul><li>内存泄漏（memory leak）：在 Java 中如果不再使用一个对象，但是该对象依然在 GC ROOT 的引用链上，这 个对象就不会被垃圾回收器回收，这种情况就称之为内存泄漏。、</li><li>少量的内存泄漏可以容忍，但是如果发生持续的内存泄漏，就像滚雪球雪球越滚越大，不管有多大的内存迟 早会被消耗完，最终导致的结果就是内存溢出。</li></ul><h3 id="11-2、解决内存泄漏问题的思路"><a href="#11-2、解决内存泄漏问题的思路" class="headerlink" title="11.2、解决内存泄漏问题的思路"></a>11.2、解决内存泄漏问题的思路</h3><p>解决内存泄漏问题总共分为四个步骤，其中前两个步骤是最核心的：</p><ol><li>发现问题：通过监控工具尽可能早地发 现内存慢慢变大的现象</li><li>诊断原因：</li><li>修复问题：</li><li>测试验证：</li></ol><p><strong>发现问题 – 堆内存状况的对比</strong></p><ul><li><p>正常情况</p><ul><li>处理业务时会出现上下起伏， 业务对象频繁创建内存会升高， 触发 MinorGC 之后内存会降下 来。</li><li>手动执行 FULL GC 之后，内存大小会骤降，而且每次降完之后的大小是接近的。</li><li>长时间观察内存曲线应该是在一个范围内。</li></ul><p><img src="/images/jvm-normalMemory.png" alt="normalMemory"></p></li><li><p>出现内存泄漏</p><ul><li>处于持续增长的情况，即使 Minor GC 也不能把大部分对象回收</li><li>手动 FULL GC 之后的内存量每一 次都在增长</li><li>长时间观察内存曲线持续增长</li></ul><p><img src="/images/jvm-abnormalMemory.png" alt="abnormal"></p></li></ul><blockquote><p>生产环境通过运维提供的 Prometheus + Grafana 等监控平台查看</p><p>开发、测试环境通过 visualvm 查看</p></blockquote><p><strong>诊断 – 生成内存快照</strong></p><p>当堆内存溢出时，需要在堆内存溢出时将整个堆内存保存下来，生成内存快照(Heap Profile )文件。 生成方式有两种</p><ol><li>内存溢出时自动生成，添加生成内存快照的 Java 虚拟机参数：<ul><li>-XX:+HeapDumpOnOutOfMemoryError：发生 OutOfMemoryError 错误时，自动生成 hprof 内存快照文件。</li><li>-XX:HeapDumpPath&#x3D;：指定 hprof 文件的输出路径。</li></ul></li><li>导出运行中系统的内存快照，比较简单的方式有两种，注意只需要导出标记为存活的对象：<ol><li>通过 JDK 自带的 jmap 命令导出<ul><li>格式为： jmap -dump:live,format&#x3D;b,file&#x3D;文件路径和文件名 进程 ID</li></ul></li><li>通过 arthas 的 heapdump 命令导出<ul><li>格式为： heapdump –live 文件路径和文件名</li></ul></li></ol></li></ol><p><strong>诊断 – MAT 定位问题</strong></p><p>使用 MAT 打开 hprof 文件，并选择内存泄漏检测功能，MAT 会自行根据内存快照中保存的数据分析内存泄漏 的根源。</p><p><strong>修复问题</strong></p><p>修复内存溢出问题的要具体问题具体分析，问题总共可以分成三类：</p><ol><li><p>代码中的内存泄漏：由于代码的不合理写法存在隐患， 导致内存泄漏</p></li><li><p>并发引起内存溢出 - 参数不当：由于参数设置不当，比如堆内存设置 过小，导致并发量增加之后超过堆内 存的上限。</p><blockquote><p>解决方案：设置合理参数</p></blockquote></li><li><p>并发引起内存溢出 – 设计不当</p><p>系统的方案设计不当，比如：</p><ul><li>从数据库获取超大数据量的数据</li><li>线程池设计不当</li><li>生产者-消费者模型，消费者消费性能问题</li></ul><blockquote><p>解决方案：优化设计方案</p></blockquote></li></ol><blockquote><p>常用的 JVM 工具</p><p>JDK 自带的命令行工具：</p><ol><li>Jps：查看 java 进程，打印 main 方法所在类名和进程 id</li><li>Jmap：生成堆内存快照、打印类的直方图</li><li>第三方工具：<ul><li>VisualVM 监控</li><li>Arthas 综合性工具</li><li>MAT 堆内存分析工具</li></ul></li><li>监控工具： Prometheus + grafana</li></ol></blockquote><h2 id="12、常见的-JVM-参数"><a href="#12、常见的-JVM-参数" class="headerlink" title="12、常见的 JVM 参数"></a>12、常见的 JVM 参数</h2><ol><li>参数 1 ： -Xmx 和 –Xms<ul><li>-Xmx 参数设置的是最大堆内存，但是由于程序是运行在服务器或者容器上，计算可用内存时，要将元空间、操作系统、 其它软件占用的内存排除掉。</li><li>案例： 服务器内存 4G，操作系统+元空间最大值+其它软件占用 1.5G，-Xmx 可以设置为 2g。</li><li>最合理的设置方式应该是根据最大并发量估算服务器的配置，然后再根据服务器配置计算最大堆内存的值。</li><li>建议将-Xms 设置的和-Xmx 一样大,运行过程中不再产生扩容的开销。</li></ul></li><li>参数 2 ： -XX:MaxMetaspaceSize 和 -Xss<ul><li>-XX:MaxMetaspaceSize&#x3D;值 参数指的是最大元空间大小，默认值比较大，如果出现元空间内存泄漏会让操作系 统可用内存不可控，建议根据测试情况设置最大值，一般设置为 256m。</li><li>-Xss256k 栈内存大小，如果我们不指定栈的大小，JVM 将创建一个具有默认大小的栈。大小取决于操作系统和计 算机的体系结构。<ul><li>比如 Linux x86 64 位 ： 1MB，如果不需要用到这么大的栈内存，完全可以将此值调小节省内存 空间，合理值为 256k – 1m 之间。</li></ul></li></ul></li><li>参数 3：-Xmn<ul><li>-Xmn 年轻代的大小，默认值为整个堆的 1&#x2F;3，可以根据峰值流量计算最大的年轻代大小，尽量让对象只存放在年轻代，不进入老年代。</li><li>实际的场景中，接口的响应时间、创建对象的大小、程序内部还会有一些定时任务等不确定因素都会导致这个值的大小并不能仅凭计算得出，如果设置该值要进行大量的测试。</li><li>G1 垃圾回收器尽量不要设 置该值，G1 会动态调整年轻代的大小。</li></ul></li><li>打印 GC 日志<ul><li>JDK8 及之前 ： -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:文件路径</li><li>JDK9 及之后 ： -Xlog:gc*:file&#x3D;文件路径</li></ul></li><li>-XX:+DisableExplicitGC<ul><li>禁止在代码中使用 System.gc()， System.gc()可能会引起 FULLGC，在代码中尽量不要使用</li><li>使用 DisableExplicitGC 参数可以禁止使用 System.gc()方法调用。</li></ul></li><li>-XX:+HeapDumpOnOutOfMemoryError：发生 OutOfMemoryError 错误时，自动生成 hprof 内存快照文件。</li><li>-XX:HeapDumpPath&#x3D;：指定 hprof 文件的输出路径。</li></ol><p>解决问题 - 优化基础 JVM 参数</p><blockquote><p>JVM 参数模板：</p><ul><li>-Xms1g : 初始堆内存 1g</li><li>-Xmx1g : 最大堆内存 1g</li><li>-Xss256k : 每个线程的栈内存最大 256k</li><li>-XX:MaxMetaspaceSize&#x3D;512m : 最大元空间大小 512m</li><li>-XX:+DisableExplicitGC : 代码中 System.gc()无效</li><li>-XX:+HeapDumpOnOutOfMemoryError : OutOfMemory 错误时生成堆内存快照</li><li>-XX:HeapDumpPath&#x3D;&#x2F;opt&#x2F;dumps&#x2F;my-service.hprof : 堆内存快照生成位置</li><li>-XX:+PrintGCDetails : 打印详细垃圾回收日志</li><li>-XX:+PrintGCDateStamps : 打印垃圾回收时间</li><li>-Xloggc:文件路径 : 日志文件输出位置</li></ul></blockquote><p>注意：</p><ul><li>JDK9 及之后 gc 日志输出修改为 -Xlog:gc*:file&#x3D;文件名</li><li>堆内存大小和栈内存大小根据实际情况灵活调整。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>designModel</title>
    <link href="/2024/04/25/designModel/"/>
    <url>/2024/04/25/designModel/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><h3 id="1、开放封闭原则"><a href="#1、开放封闭原则" class="headerlink" title="1、开放封闭原则"></a>1、开放封闭原则</h3><blockquote><p><strong>Open Close Principle</strong></p></blockquote><p>OCP：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</p><p>OCP 原则要求设计者在需要修改现有代码时，不应该直接修改已有的代码，而是应该通过扩展现有代码来实现新的功能或修改。</p><p>代码实例：</p><p>实现计算机：<code>Operation</code> 是策略接口，定义一个 <code>calculate</code> 方法用于执行数学运算。<code>Addition</code> 和 <code>Subtraction</code> 是具体策略类，分别实现了加法和减法运算。<code>Calculator</code> 是上下文类，持有一个 <code>Operation</code> 对象，可以通过设置不同的策略对象来改变其行为。当需要添加新的数学运算时，只需要创建新的具体策略类，并在上下文中设置新的策略对象，而不需要修改现有的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Operation</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体策略类：加法操作</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Addition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Operation</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-keyword">return</span> num1 + num2;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略类：减法操作</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subtraction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Operation</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-keyword">return</span> num1 - num2;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-keyword">private</span> Operation operation;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOperation</span><span class="hljs-params">(Operation operation)</span> &#123;<br>        <span class="hljs-built_in">this</span>.operation = operation;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">performOperation</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (operation == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Operation not set&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> operation.calculate(num1, num2);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br><br>        <span class="hljs-comment">// 使用加法操作</span><br>        calculator.setOperation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Addition</span>());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> calculator.performOperation(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;5 + 3 = &quot;</span> + result1);<br><br>        <span class="hljs-comment">// 使用减法操作</span><br>        calculator.setOperation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Subtraction</span>());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> calculator.performOperation(<span class="hljs-number">8</span>, <span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;8 - 4 = &quot;</span> + result2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、里氏代换原则"><a href="#2、里氏代换原则" class="headerlink" title="2、里氏代换原则"></a>2、里氏代换原则</h3><blockquote><p><strong>Liskov Substitution Principle</strong></p></blockquote><p>LSP：在使用基类的任何地方都可以替换为使用其继承的子类，即完美的替换基类。</p><p>LSP 原则要求子类型（派生类或子类）必须能够替换其基类型（基类或父类）的任何地方，而不破坏程序的正确性。</p><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog barks&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat meows&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br>        <span class="hljs-comment">// 里氏代换原则：可以在任何需要 Animal 类型的地方使用 Dog 或 Cat 类的对象</span><br>        dog.makeSound();<br>        cat.makeSound();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、依赖倒转原则"><a href="#3、依赖倒转原则" class="headerlink" title="3、依赖倒转原则"></a>3、依赖倒转原则</h3><blockquote><p><strong>Dependence Inversion Principle</strong></p></blockquote><p>DIP 原则：</p><ol><li>高层模块不应该依赖于低层模块，二者都应该依赖于抽象。</li><li>抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</li></ol><p>DIP 原则指导着建立松耦合的软件架构，使得高层模块不依赖于低层模块的具体实现细节，而是依赖于抽象。</p><p>该原则的核心思想是通过抽象来实现模块之间的松耦合，从而提高代码的灵活性和可维护性。当系统需要进行变更时，可以通过替换具体实现而不影响高层模块的代码。</p><p>代码实例：</p><p>考虑一个简单的电灯类和电灯开关类的依赖关系，根据依赖倒转原则，我们应该抽象出一个开关接口，电灯类依赖于这个开关接口，而不是具体的开关实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开关接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Switch</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOn</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOff</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 电灯类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br>    <span class="hljs-keyword">private</span> Switch switcher;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Light</span><span class="hljs-params">(Switch switcher)</span> &#123;<br>        <span class="hljs-built_in">this</span>.switcher = switcher;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toggle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (switcher != <span class="hljs-literal">null</span>) &#123;<br>            switcher.turnOn();<br>            switcher.turnOff();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 电灯开关类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightSwitch</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Switch</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is on&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOff</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is off&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Switch</span> <span class="hljs-variable">lightSwitch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightSwitch</span>();<br>        <span class="hljs-type">Light</span> <span class="hljs-variable">light</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>(lightSwitch);<br><br>        light.toggle();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、接口隔离原则"><a href="#4、接口隔离原则" class="headerlink" title="4、接口隔离原则"></a>4、接口隔离原则</h3><blockquote><p><strong>Interface Segregation Principle</strong></p></blockquote><p>ISP 原则强调接口的独立性和单一性，即客户端不应该强制依赖于其不需要的接口。</p><p>ISP 原则要求将大接口拆分为多个小接口，客户端只依赖于它们需要的接口，而不需要依赖于不需要的接口。如此可避免不必要的依赖，降低耦合度，提高代码的灵活性和可维护性。</p><p>代码实例：</p><p>考虑一个简单的打印机应用程序，它有一个打印机类 <code>Printer</code>，可以打印文本和图像。按照接口隔离原则，我们应该将打印文本和打印图像的功能分别定义在两个接口中，而不是定义在同一个接口中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打印文本接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">TextPrinter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printText</span><span class="hljs-params">(String text)</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印图像接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImagePrinter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printImage</span><span class="hljs-params">(String imageUrl)</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印机类实现打印文本接口和打印图像接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Printer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TextPrinter</span>, ImagePrinter &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printText</span><span class="hljs-params">(String text)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Printing text: &quot;</span> + text);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printImage</span><span class="hljs-params">(String imageUrl)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Printing image: &quot;</span> + imageUrl);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Printer</span> <span class="hljs-variable">printer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>();<br><br>        <span class="hljs-comment">// 打印文本</span><br>        printer.printText(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br><br>        <span class="hljs-comment">// 打印图像</span><br>        printer.printImage(<span class="hljs-string">&quot;https://example.com/image.png&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、迪米特法则"><a href="#5、迪米特法则" class="headerlink" title="5、迪米特法则"></a>5、迪米特法则</h3><blockquote><p><strong>Demeter Principle</strong></p><p><strong>迪米特法则，又称为最少知道原则（Law of Demeter，LoD）</strong></p></blockquote><p>该原则的核心思想是一个对象应当对其他对象有尽可能少的了解，即对象之间应该保持松散的耦合关系。</p><p>迪米特法则可以概括为以下几点：</p><ol><li>每个单元（类、模块、函数等）只应该与其密切相关的对象进行交互，而不是与一大堆不相关的对象进行交互。</li><li>类之间的通信应该通过最直接的方式进行，避免通过中间多层的对象进行传递消息。</li><li>不要让一个单元了解整个系统的结构，而应该只关注与之直接交互的对象。</li></ol><p>迪米特法则的目的是降低系统的耦合度，提高系统的灵活性和可维护性。通过减少对象之间的直接联系，可以使得系统的各个模块更容易被独立开发、测试、维护和重用。</p><p>代码实例：</p><p>考虑一个购物车系统，其中包含商品、购物车和订单三个类。按照迪米特法则，购物车类应该尽可能少地了解商品类和订单类的内部结构，而是通过商品类和订单类提供的接口进行交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 商品类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Product</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法...</span><br>&#125;<br><br><span class="hljs-comment">// 订单类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Product&gt; products;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Order</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.products = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">(Product product)</span> &#123;<br>        products.add(product);<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法...</span><br>&#125;<br><br><span class="hljs-comment">// 购物车类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCart</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Product&gt; products;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShoppingCart</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.products = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">(Product product)</span> &#123;<br>        products.add(product);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Order order)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Product product : products) &#123;<br>            order.addProduct(product);<br>        &#125;<br>        products.clear();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-string">&quot;iPhone&quot;</span>, <span class="hljs-number">999.99</span>);<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-number">699.99</span>);<br><br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>        cart.addProduct(product1);<br>        cart.addProduct(product2);<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        cart.checkout(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、单一职责原则"><a href="#6、单一职责原则" class="headerlink" title="6、单一职责原则"></a>6、单一职责原则</h3><blockquote><p><strong>Principle of single responsibility</strong></p></blockquote><p>SRP 原则指出一个类或模块应该有且只有一个引起它变化的原因，或者说一个类或模块应该只负责一种职责。</p><p>SRP 原则要求一个类或模块只做一件事情，并且做好这件事情。如果一个类或模块负责了多个不同的职责，那么它的设计就不够清晰，也不够灵活。</p><p>遵循 SRP 原则有助于提高代码的内聚性，即相关功能应该放在一起，不相关功能应该分开。</p><p>代码实例：</p><p>考虑一个简单的日志记录器类 <code>Logger</code>，它负责将日志信息记录到文件和控制台。按照单一职责原则，我们应该将文件日志记录和控制台日志记录分别放在两个类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 日志记录器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logToFile</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到文件</span><br>        System.out.println(<span class="hljs-string">&quot;Log to file: &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logToConsole</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到控制台</span><br>        System.out.println(<span class="hljs-string">&quot;Log to console: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 文件日志记录器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLogger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到文件</span><br>        System.out.println(<span class="hljs-string">&quot;Log to file: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 控制台日志记录器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsoleLogger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 将日志信息记录到控制台</span><br>        System.out.println(<span class="hljs-string">&quot;Log to console: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileLogger</span> <span class="hljs-variable">fileLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileLogger</span>();<br>        fileLogger.log(<span class="hljs-string">&quot;Error: File not found&quot;</span>);<br><br>        <span class="hljs-type">ConsoleLogger</span> <span class="hljs-variable">consoleLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleLogger</span>();<br>        consoleLogger.log(<span class="hljs-string">&quot;Warning: Memory is running low&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="GRASP-模式"><a href="#GRASP-模式" class="headerlink" title="GRASP 模式"></a>GRASP 模式</h2><blockquote><p>General Responsibility Assignment Software Patterns ，即”通用责任分配软件模式”</p><p>面向对象设计中常用的设计原则</p></blockquote><p>GRASP 模式旨在帮助设计者更好地分配类（对象）的职责，使得系统更加易于理解、扩展和维护</p><h3 id="专家模式"><a href="#专家模式" class="headerlink" title="专家模式"></a>专家模式</h3><p>任务应该分配给具有最多所需信息的类。即一个对象应该包含或掌握与其任务相关的信息。</p><h3 id="创造者原则"><a href="#创造者原则" class="headerlink" title="创造者原则"></a>创造者原则</h3><p>当一个类 A 需要创建另一个类 B 的实例时，类 A 应该是类 B 的聚合体，组合体，或者类 A 持有类 B 的引用。避免在类 A 中直接实例化类 B。</p><h3 id="低耦合原则"><a href="#低耦合原则" class="headerlink" title="低耦合原则"></a>低耦合原则</h3><blockquote><p><strong>耦合（Coupling）</strong>：耦合描述模块之间的依赖关系。</p><p>高耦合意味着模块之间的依赖性很强，一个模块的修改可能会导致其他模块的修改。</p><p>低耦合意味着模块之间的依赖性很弱，一个模块的修改不太可能影响其他模块。</p></blockquote><p>在软件设计中，耦合指的是模块间的依赖关系。低耦合意味着模块间的依赖关系越少越好，这样修改一个模块不会影响其他模块。</p><h3 id="高内聚原则"><a href="#高内聚原则" class="headerlink" title="高内聚原则"></a>高内聚原则</h3><blockquote><p><strong>内聚（Cohesion）</strong>：内聚描述模块内部元素之间的关联程度，即一个模块内部各个元素（如方法、属性等）彼此之间的联系。</p><p>高内聚意味着模块内的元素彼此之间关联紧密，每个模块只负责一项清晰的任务。</p><p>低内聚意味着模块内的元素关联性较弱，模块可能会包含多种不相关的功能。</p></blockquote><p>一个模块内的各个元素彼此关联紧密，只负责一个清晰的任务。高内聚的模块更容易理解、维护和重用。</p><h3 id="控制器原则"><a href="#控制器原则" class="headerlink" title="控制器原则"></a>控制器原则</h3><p>确定哪个类或对象负责接收用户输入、协调系统操作，并作出相应的响应。控制器将用户请求转发给适当的对象来处理。</p><h3 id="多态原则"><a href="#多态原则" class="headerlink" title="多态原则"></a>多态原则</h3><p>通过继承和接口实现多态性，允许不同的对象对同一消息作出不同的响应。</p><h3 id="纯虚构"><a href="#纯虚构" class="headerlink" title="纯虚构"></a>纯虚构</h3><p>为了降低耦合度，创建一个新的类或对象来处理系统中的特定任务，而不受现有领域对象的限制。</p><h3 id="中介原则"><a href="#中介原则" class="headerlink" title="中介原则"></a>中介原则</h3><p>引入一个中介者来管理对象之间的通信，减少对象之间的直接依赖关系。</p><h3 id="受保护变量原则"><a href="#受保护变量原则" class="headerlink" title="受保护变量原则"></a>受保护变量原则</h3><p>通过封装和抽象，保护系统中易变的部分，使得系统对变化的影响最小化。</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ol><li>工厂方法模式：将对象的创建和使用分离开来，客户端只需要知道工厂方法，而不需要知道具体的产品类。</li><li>抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体的类。</li><li>建造者模式：将一个复杂对象的构建过程与其表示分离开来，使得同样的构建过程可以创建不同的表示。</li><li>单例模式：确保某个类只有一个实例，并提供一个全局访问点来访问该实例。</li><li>原型模式：通过复制现有对象来创建新对象，而不是通过实例化类来创建对象。</li></ol><h4 id="1、工厂方法模式"><a href="#1、工厂方法模式" class="headerlink" title="1、工厂方法模式"></a>1、工厂方法模式</h4><p>将对象的创建和使用分离开来，客户端只需要知道工厂方法，而不需要知道具体的产品类。</p><p>工厂方法模式包括以下几个角色：</p><ol><li><strong>抽象产品（Product）</strong>：定义了产品的接口，是工厂方法所创建的对象的父类。</li><li><strong>具体产品（Concrete Product）</strong>：实现了抽象产品接口的具体类。</li><li><strong>抽象工厂（Creator）</strong>：定义了一个抽象的工厂方法，用于创建产品对象。通常是一个抽象类，其中可能包含一些通用的逻辑代码。</li><li><strong>具体工厂（Concrete Creator）</strong>：继承自抽象工厂，实现了工厂方法，用于创建具体的产品对象。</li></ol><p>以下是一个简单的工厂方法模式的示例（以创建不同类型的日志记录器为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象产品</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品 - 文件日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to file: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品 - 数据库日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to database: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerFactory</span> &#123;<br>    <span class="hljs-keyword">abstract</span> Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂 - 文件日志记录器工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLoggerFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LoggerFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileLogger</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂 - 数据库日志记录器工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLoggerFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LoggerFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    Logger <span class="hljs-title function_">createLogger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseLogger</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、抽象工厂模式"><a href="#2、抽象工厂模式" class="headerlink" title="2、抽象工厂模式"></a>2、抽象工厂模式</h4><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体的类。</p><p>抽象工厂模式包含以下几个角色：</p><ol><li><strong>抽象工厂（Abstract Factory）</strong>：定义了创建产品对象的方法接口，它是工厂方法模式的升级版，用于创建一系列相关或依赖对象的家族。</li><li><strong>具体工厂（Concrete Factory）</strong>：实现了抽象工厂接口，用于创建具体的产品对象。</li><li><strong>抽象产品（Abstract Product）</strong>：定义了产品对象的接口，是具体产品对象的父类。</li><li><strong>具体产品（Concrete Product）</strong>：实现了抽象产品接口，是被具体工厂创建的对象。</li></ol><p>抽象工厂模式将每个具体工厂与一组具体产品相关联，这样客户端就可以通过选择不同的具体工厂来创建不同类型的产品对象，从而实现了一种产品族的配置。</p><p>以下是一个简单的抽象工厂模式的示例（以创建不同类型的手机和配件为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象产品A - 手机</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品A - 苹果手机</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplePhone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Make Apple Phone&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品A - 华为手机</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiPhone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Make Huawei Phone&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象产品B - 手机配件</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PhoneAccessory</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">produce</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体产品B - 苹果手机配件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleAccessory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneAccessory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Produce Apple Accessory&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体产品B - 华为手机配件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiAccessory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneAccessory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Produce Huawei Accessory&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工厂</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PhoneFactory</span> &#123;<br>    Phone <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span>;<br>    PhoneAccessory <span class="hljs-title function_">createPhoneAccessory</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂A - 苹果手机工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplePhone</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PhoneAccessory <span class="hljs-title function_">createPhoneAccessory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppleAccessory</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂B - 华为手机工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaweiFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PhoneFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Phone <span class="hljs-title function_">createPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaweiPhone</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PhoneAccessory <span class="hljs-title function_">createPhoneAccessory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaweiAccessory</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、建造者模式"><a href="#3、建造者模式" class="headerlink" title="3、建造者模式"></a>3、建造者模式</h4><p>将一个复杂对象的构建过程与其表示分离开来，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式包含以下几个角色：</p><ol><li><strong>产品（Product）</strong>：表示被构建的复杂对象。在建造过程完成后，通常会返回一个包含所有属性的最终产品对象。</li><li><strong>抽象建造者（Builder）</strong>：定义了构建产品对象的抽象方法，包括设置各个属性的方法。</li><li><strong>具体建造者（Concrete Builder）</strong>：实现了抽象建造者接口，负责构建和装配产品的各个部件，并定义了具体的构建步骤。</li><li><strong>指挥者（Director）</strong>：负责调用具体建造者来构建产品对象。它不直接创建产品对象，而是通过调用具体建造者的方法来构建产品。</li></ol><p>建造者模式通常适用于以下情况：</p><ul><li>创建对象的构建过程比较复杂，需要很多步骤或者涉及到很多部件。</li><li>希望将对象的构建过程和表示分离开来，以便能够灵活地组合不同的部件和构建步骤。</li></ul><p>以下是一个简单的建造者模式的示例（以创建一个电脑对象为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 产品类 - 电脑</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-keyword">private</span> String cpu;<br>    <span class="hljs-keyword">private</span> String memory;<br>    <span class="hljs-keyword">private</span> String hardDisk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCpu</span><span class="hljs-params">(String cpu)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cpu = cpu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemory</span><span class="hljs-params">(String memory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.memory = memory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHardDisk</span><span class="hljs-params">(String hardDisk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hardDisk = hardDisk;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法...</span><br>&#125;<br><br><span class="hljs-comment">// 抽象建造者</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ComputerBuilder</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCpu</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMemory</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHardDisk</span><span class="hljs-params">()</span>;<br>    Computer <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体建造者 - 高配版电脑建造者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HighConfigComputerBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ComputerBuilder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCpu</span><span class="hljs-params">()</span> &#123;<br>        computer.setCpu(<span class="hljs-string">&quot;Intel i9&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMemory</span><span class="hljs-params">()</span> &#123;<br>        computer.setMemory(<span class="hljs-string">&quot;32GB&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHardDisk</span><span class="hljs-params">()</span> &#123;<br>        computer.setHardDisk(<span class="hljs-string">&quot;1TB SSD&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> computer;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 指挥者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span> &#123;<br>    <span class="hljs-keyword">private</span> ComputerBuilder builder;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuilder</span><span class="hljs-params">(ComputerBuilder builder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.builder = builder;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Computer <span class="hljs-title function_">construct</span><span class="hljs-params">()</span> &#123;<br>        builder.buildCpu();<br>        builder.buildMemory();<br>        builder.buildHardDisk();<br>        <span class="hljs-keyword">return</span> builder.getResult();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、单例模式"><a href="#4、单例模式" class="headerlink" title="4、单例模式"></a>4、单例模式</h4><p>确保某个类只有一个实例，并提供一个全局访问点来访问该实例。</p><p>实现单例模式的一般步骤包括：</p><ol><li><strong>私有构造函数</strong>：确保外部不能通过构造函数来创建该类的实例。</li><li><strong>静态成员变量</strong>：在类中定义一个静态成员变量来保存该类的唯一实例。</li><li><strong>静态方法</strong>：提供一个静态方法来访问该唯一实例，并确保在需要时进行实例化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-comment">// 私有构造函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">// 静态方法获取唯一实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、原型模式"><a href="#5、原型模式" class="headerlink" title="5、原型模式"></a>5、原型模式</h4><p>通过复制现有对象来创建新对象，而不是通过实例化类来创建对象。</p><p>原型模式包含以下几个角色：</p><ol><li><strong>原型接口（Prototype）</strong>：声明了一个克隆自身的方法，用于复制自身来创建新对象。</li><li><strong>具体原型类（Concrete Prototype）</strong>：实现了原型接口，负责实现克隆自身的方法。</li><li><strong>客户端（Client）</strong>：负责使用原型对象来创建新对象的客户端代码。</li></ol><p>原型模式通常适用于以下情况：</p><ul><li>当创建对象的成本比较高昂，或者对象的创建过程比较复杂，但新对象与现有对象相似度很高时。</li><li>当需要避免通过子类进行复杂的初始化配置时，而是希望通过复制一个已有的实例来创建新实例时。</li></ul><p>以下是一个简单的原型模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 原型接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Prototype</span> &#123;<br>    Prototype <span class="hljs-title function_">clone</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体原型类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcretePrototype</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Prototype</span> &#123;<br>    <span class="hljs-keyword">private</span> String field;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcretePrototype</span><span class="hljs-params">(String field)</span> &#123;<br>        <span class="hljs-built_in">this</span>.field = field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getField</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Prototype <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建一个新对象，并将当前对象的属性复制给新对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(<span class="hljs-built_in">this</span>.field);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcretePrototype</span> <span class="hljs-variable">prototype</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(<span class="hljs-string">&quot;data&quot;</span>);<br>        <span class="hljs-type">ConcretePrototype</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> (ConcretePrototype) prototype.clone();<br><br>        System.out.println(<span class="hljs-string">&quot;Original Object: &quot;</span> + prototype.getField());<br>        System.out.println(<span class="hljs-string">&quot;Cloned Object: &quot;</span> + clone.getField());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ol><li>适配器模式：将一个类的接口转换成客户端所期待的另一个接口，使得原本由于接口不兼容而不能一起工作的类能够协同工作。</li><li>装饰器模式：允许向一个对象动态地添加新的功能，而无需修改其源代码。</li><li>代理模式：通过代理对象控制对原始对象的访问。</li><li>外观模式：提供一个统一的接口，用于访问子系统中的一组接口。</li><li>桥接模式：将抽象部分与实现部分分离，使它们可以独立变化，从而可以动态地组合不同的抽象和实现。</li><li>组合模式：允许将对象组合成树形结构以表示“部分-整体”的层次结构。</li><li>享元模式：通过共享对象来减少内存使用和提高性能。在享元模式中，对象被分为内部状态（Intrinsic State）和外部状态（Extrinsic State），其中内部状态可以被多个对象共享，而外部状态需要在对象之间单独维护。</li></ol><h4 id="1、适配器模式"><a href="#1、适配器模式" class="headerlink" title="1、适配器模式"></a>1、适配器模式</h4><p>将一个类的接口转换成客户端所期待的另一个接口，使得原本由于接口不兼容而不能一起工作的类能够协同工作。</p><p>适配器模式包含以下几个角色：</p><ol><li><strong>目标接口（Target）</strong>：定义客户端使用的接口，客户端期待的接口。</li><li><strong>适配器（Adapter）</strong>：实现了目标接口，并包装了一个需要适配的类的对象，在目标接口中调用被包装对象的方法。</li><li><strong>被适配者（Adaptee）</strong>：需要被适配的类，其接口与目标接口不兼容。</li><li><strong>客户端（Client）</strong>：通过目标接口与适配器交互，调用适配器的方法来实现需要的功能。</li></ol><p>适配器模式通常适用于以下情况：</p><ul><li>当需要使用一个已经存在的类，而它的接口不符合需求时。</li><li>当需要创建一个可复用的类，与一些不相关或不可预见的类协作时。</li></ul><p>以下是一个简单的适配器模式的示例（以一个日志记录器适配器为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 目标接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体目标 - 文件日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to file: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 适配器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-keyword">private</span> DatabaseLogger databaseLogger;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoggerAdapter</span><span class="hljs-params">(DatabaseLogger databaseLogger)</span> &#123;<br>        <span class="hljs-built_in">this</span>.databaseLogger = databaseLogger;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span> &#123;<br>        databaseLogger.writeLog(message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 被适配者 - 数据库日志记录器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseLogger</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeLog</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Log message to database: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">fileLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileLogger</span>();<br>        fileLogger.log(<span class="hljs-string">&quot;This is a log message to file.&quot;</span>);<br><br>        <span class="hljs-comment">// 使用适配器将数据库日志记录器适配成目标接口</span><br>        <span class="hljs-type">DatabaseLogger</span> <span class="hljs-variable">databaseLogger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseLogger</span>();<br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">dbLoggerAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggerAdapter</span>(databaseLogger);<br>        dbLoggerAdapter.log(<span class="hljs-string">&quot;This is a log message to database.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、装饰器模式"><a href="#2、装饰器模式" class="headerlink" title="2、装饰器模式"></a>2、装饰器模式</h4><p>允许向一个对象动态地添加新的功能，而无需修改其源代码。</p><p>装饰器模式包含以下几个角色：</p><ol><li><strong>抽象构件（Component）</strong>：定义了一个对象接口，可以给这些对象动态地添加新的职责。</li><li><strong>具体构件（Concrete Component）</strong>：实现了抽象构件接口，是被装饰的对象，可以给这个对象添加新的职责。</li><li><strong>装饰器（Decorator）</strong>：持有一个抽象构件的引用，并实现了抽象构件的接口，可以动态地给具体构件对象添加新的职责。</li><li><strong>具体装饰器（Concrete Decorator）</strong>：具体的装饰器类，实现了装饰器接口，并且通过构造函数接收一个抽象构件对象，在原有对象的基础上添加新的功能。</li></ol><p>装饰器模式通常适用于以下情况：</p><ul><li>需要向一个对象添加额外的功能，而不想影响到其他对象。</li><li>需要动态地给对象添加功能，而且添加的功能可以动态撤销。</li></ul><p>以下是一个简单的装饰器模式的示例（以咖啡和配料为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象构件 - 咖啡</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体构件 - 普通咖啡</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleCoffee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Simple Coffee&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 装饰器 - 抽象装饰器</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeeDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    <span class="hljs-keyword">protected</span> Coffee decoratedCoffee;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CoffeeDecorator</span><span class="hljs-params">(Coffee decoratedCoffee)</span> &#123;<br>        <span class="hljs-built_in">this</span>.decoratedCoffee = decoratedCoffee;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> decoratedCoffee.getDescription();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> decoratedCoffee.cost();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体装饰器 - 奶油</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreamDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CoffeeDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CreamDecorator</span><span class="hljs-params">(Coffee decoratedCoffee)</span> &#123;<br>        <span class="hljs-built_in">super</span>(decoratedCoffee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDescription() + <span class="hljs-string">&quot;, Cream&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.cost() + <span class="hljs-number">0.5</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体装饰器 - 糖</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SugarDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CoffeeDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SugarDecorator</span><span class="hljs-params">(Coffee decoratedCoffee)</span> &#123;<br>        <span class="hljs-built_in">super</span>(decoratedCoffee);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getDescription() + <span class="hljs-string">&quot;, Sugar&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.cost() + <span class="hljs-number">0.2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">simpleCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCoffee</span>();<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + simpleCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + simpleCoffee.cost());<br><br>        <span class="hljs-comment">// 添加奶油装饰器</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">creamCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreamDecorator</span>(simpleCoffee);<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + creamCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + creamCoffee.cost());<br><br>        <span class="hljs-comment">// 添加糖装饰器</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">sugarCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SugarDecorator</span>(simpleCoffee);<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + sugarCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + sugarCoffee.cost());<br><br>        <span class="hljs-comment">// 添加奶油和糖装饰器</span><br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">creamAndSugarCoffee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreamDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SugarDecorator</span>(simpleCoffee));<br>        System.out.println(<span class="hljs-string">&quot;Description: &quot;</span> + creamAndSugarCoffee.getDescription() + <span class="hljs-string">&quot;, Cost: $&quot;</span> + creamAndSugarCoffee.cost());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、代理模式"><a href="#3、代理模式" class="headerlink" title="3、代理模式"></a>3、代理模式</h4><p>通过代理对象控制对原始对象的访问。</p><p>代理模式包含以下几个角色：</p><ol><li><strong>抽象主题（Subject）</strong>：定义了真实主题和代理主题的共同接口，这样就在任何使用真实主题的地方都可以使用代理主题。</li><li><strong>真实主题（Real Subject）</strong>：定义了代理所代表的真实对象，是最终要引用的对象。</li><li><strong>代理（Proxy）</strong>：保存了对真实主题的引用，并提供与真实主题相同的接口，客户端通过代理类来访问真实主题。</li><li><strong>客户端（Client）</strong>：通过代理来访问真实主题。</li></ol><p>代理模式通常适用于以下情况：</p><ul><li>需要在访问一个对象时添加额外的功能，但又不想修改该对象的代码。</li><li>需要对访问某个对象的方式进行控制，例如权限控制、延迟加载等。</li></ul><p>以下是一个简单的代理模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象主题</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 真实主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> String filename;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RealImage</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>        loadFromDisk();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadFromDisk</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Loading image from disk: &quot;</span> + filename);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Displaying image: &quot;</span> + filename);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">private</span> RealImage realImage;<br>    <span class="hljs-keyword">private</span> String filename;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyImage</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (realImage == <span class="hljs-literal">null</span>) &#123;<br>            realImage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealImage</span>(filename);<br>        &#125;<br>        realImage.display();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Image</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyImage</span>(<span class="hljs-string">&quot;test.jpg&quot;</span>);<br><br>        <span class="hljs-comment">// 图片加载过程是延迟的，只有在真正调用 display() 方法时才会加载</span><br>        image.display();<br><br>        <span class="hljs-comment">// 再次调用 display() 方法，不需要重新加载图片</span><br>        image.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、外观模式"><a href="#4、外观模式" class="headerlink" title="4、外观模式"></a>4、外观模式</h4><p>提供一个统一的接口，用于访问子系统中的一组接口。</p><p>外观模式包含以下几个角色：</p><ol><li><strong>外观（Facade）</strong>：提供了一个简单的接口，隐藏了子系统的复杂性，使得客户端可以更容易地与子系统进行交互。</li><li><strong>子系统（Subsystem）</strong>：包含一组相关的类，实现了子系统的功能，但这些类对客户端来说是透明的，即客户端不需要直接与它们进行交互。</li></ol><p>外观模式通常适用于以下情况：</p><ul><li>当一个复杂系统的子系统之间存在复杂的依赖关系，需要一个统一的接口来简化客户端与子系统之间的交互。</li><li>当客户端需要使用一个复杂的子系统，但只需要与该子系统的一部分进行交互时。</li></ul><p>以下是一个简单的外观模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 子系统A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubsystemA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SubsystemA operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子系统B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubsystemB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationB</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SubsystemB operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子系统C</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubsystemC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationC</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SubsystemC operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 外观</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Facade</span> &#123;<br>    <span class="hljs-keyword">private</span> SubsystemA subsystemA;<br>    <span class="hljs-keyword">private</span> SubsystemB subsystemB;<br>    <span class="hljs-keyword">private</span> SubsystemC subsystemC;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Facade</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.subsystemA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubsystemA</span>();<br>        <span class="hljs-built_in">this</span>.subsystemB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubsystemB</span>();<br>        <span class="hljs-built_in">this</span>.subsystemC = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubsystemC</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 提供一个简单的接口，隐藏了子系统的复杂性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        subsystemA.operationA();<br>        subsystemB.operationB();<br>        subsystemC.operationC();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 客户端通过外观来访问子系统，而不需要直接与子系统进行交互</span><br>        <span class="hljs-type">Facade</span> <span class="hljs-variable">facade</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Facade</span>();<br>        facade.operation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、桥接模式"><a href="#5、桥接模式" class="headerlink" title="5、桥接模式"></a>5、桥接模式</h4><p>将抽象部分与实现部分分离，使它们可以独立变化，从而可以动态地组合不同的抽象和实现。</p><p>桥接模式包含以下几个角色：</p><ol><li><strong>抽象部分（Abstraction）</strong>：定义了抽象部分的接口，并维护一个指向实现部分的引用。</li><li><strong>扩充抽象类（Refined Abstraction）</strong>：拓展了抽象部分的接口，通常为抽象类，在抽象部分的基础上添加了更多的方法或行为。</li><li><strong>实现部分（Implementor）</strong>：定义了实现部分的接口，该接口不一定与抽象部分完全相同，但它们之间必须是相互独立的。</li><li><strong>具体实现类（Concrete Implementor）</strong>：实现了实现部分的接口，提供具体的实现。</li></ol><p>桥接模式通常适用于以下情况：</p><ul><li>当需要避免在抽象部分和实现部分之间形成静态的绑定关系时。</li><li>当一个类存在两个（或多个）变化的维度，且需要在这些维度上独立扩展时。</li></ul><p>以下是一个简单的桥接模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现部分接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Implementor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationImpl</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体实现类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteImplementorA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Implementor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Concrete Implementor A operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体实现类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteImplementorB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Implementor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Concrete Implementor B operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象部分</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstraction</span> &#123;<br>    <span class="hljs-keyword">protected</span> Implementor implementor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Abstraction</span><span class="hljs-params">(Implementor implementor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.implementor = implementor;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 扩充抽象类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefinedAbstraction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstraction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RefinedAbstraction</span><span class="hljs-params">(Implementor implementor)</span> &#123;<br>        <span class="hljs-built_in">super</span>(implementor);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        implementor.operationImpl();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Implementor</span> <span class="hljs-variable">implementorA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteImplementorA</span>();<br>        <span class="hljs-type">Implementor</span> <span class="hljs-variable">implementorB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteImplementorB</span>();<br><br>        <span class="hljs-type">Abstraction</span> <span class="hljs-variable">abstractionA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefinedAbstraction</span>(implementorA);<br>        abstractionA.operation();<br><br>        <span class="hljs-type">Abstraction</span> <span class="hljs-variable">abstractionB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefinedAbstraction</span>(implementorB);<br>        abstractionB.operation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、组合模式"><a href="#6、组合模式" class="headerlink" title="6、组合模式"></a>6、组合模式</h4><p>允许将对象组合成树形结构以表示“部分-整体”的层次结构。</p><p>组合模式包含以下几个角色：</p><ol><li><strong>组件（Component）</strong>：声明了组合对象和叶子对象的公共接口，可以包含所有子类共有的行为和属性。</li><li><strong>叶子（Leaf）</strong>：表示树中的叶子节点对象，叶子节点没有子节点。</li><li><strong>组合（Composite）</strong>：表示树中的组合对象，组合对象可以包含叶子对象和其他组合对象作为其子节点。</li><li><strong>客户端（Client）</strong>：通过组合对象和叶子对象的共同接口来进行操作。</li></ol><p>组合模式通常适用于以下情况：</p><ul><li>当想要表示对象的“部分-整体”层次结构，并且希望用户统一地对待所有对象时。</li><li>当希望用户忽略组合对象与叶子对象之间的差异，并一致地使用它们时。</li></ul><p>以下是一个简单的组合模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 抽象组件</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 叶子组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Leaf</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Leaf &quot;</span> + name + <span class="hljs-string">&quot; operation&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 组合组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Component&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span> &#123;<br>        children.add(component);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span> &#123;<br>        children.remove(component);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Composite operation&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Component component : children) &#123;<br>            component.operation();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建组合对象</span><br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">composite</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>();<br><br>        <span class="hljs-comment">// 添加叶子对象</span><br>        composite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf A&quot;</span>));<br>        composite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf B&quot;</span>));<br><br>        <span class="hljs-comment">// 创建子组合对象</span><br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">subComposite</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>();<br>        subComposite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf C&quot;</span>));<br>        subComposite.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;Leaf D&quot;</span>));<br><br>        <span class="hljs-comment">// 将子组合对象添加到父组合对象</span><br>        composite.add(subComposite);<br><br>        <span class="hljs-comment">// 执行组合对象的操作</span><br>        composite.operation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、享元模式"><a href="#7、享元模式" class="headerlink" title="7、享元模式"></a>7、享元模式</h4><p>通过共享对象来减少内存使用和提高性能。在享元模式中，对象被分为内部状态（Intrinsic State）和外部状态（Extrinsic State），其中内部状态可以被多个对象共享，而外部状态需要在对象之间单独维护。</p><p>享元模式（Flyweight Pattern）是一种结构型设计模式，其目的是通过共享对象来减少内存使用和提高性能。在享元模式中，对象被分为内部状态（Intrinsic State）和外部状态（Extrinsic State），其中内部状态可以被多个对象共享，而外部状态需要在对象之间单独维护。</p><p>享元模式包含以下几个角色：</p><ol><li><strong>享元工厂（Flyweight Factory）</strong>：负责创建和管理享元对象，确保对象被正确地共享和重复使用。</li><li><strong>抽象享元（Flyweight）</strong>：声明了共享对象的接口，通过这个接口可以接收和操作外部状态。</li><li><strong>具体享元（Concrete Flyweight）</strong>：实现了抽象享元接口，并实现了内部状态的共享。</li><li><strong>客户端（Client）</strong>：通过享元工厂获取享元对象，并设置或获取外部状态，然后使用享元对象。</li></ol><p>享元模式通常适用于以下情况：</p><ul><li>当系统中存在大量相似对象，这些对象具有一些共同的属性，可以抽取出来作为内部状态进行共享。</li><li>当需要缓存对象以提高性能时，可以使用享元模式来重复使用相似对象。</li></ul><p>以下是一个简单的享元模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// 抽象享元</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(String color)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体享元</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> String color;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(String color)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Drawing circle with color: &quot;</span> + color);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 享元工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Shape&gt; circleMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shape <span class="hljs-title function_">getCircle</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> (Circle) circleMap.get(color);<br><br>        <span class="hljs-keyword">if</span> (circle == <span class="hljs-literal">null</span>) &#123;<br>            circle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>            circleMap.put(color, circle);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> circle;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] colors = &#123;<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>&#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>            <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> (Circle) ShapeFactory.getCircle(getRandomColor());<br>            circle.draw(getRandomColor());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRandomColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> colors[(<span class="hljs-type">int</span>) (Math.random() * colors.length)];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ol><li>策略模式：策略模式定义一系列算法，并将每个算法封装起来，使它们可以相互替换。</li><li>模板方法模式：模板方法模式定义一个操作中的算法的框架，将某些步骤延迟到子类中实现。</li><li>观察者模式：观察者模式定义一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。</li><li>迭代子模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</li><li>责任链模式：责任链模式允许你将请求沿着处理者链进行传递，直到有一个处理者能够处理它。责任链模式将请求发送者和接收者解耦，使得多个对象都有机会处理请求，同时避免了请求发送者需要知道处理请求的具体处理者的情况。</li><li>命令模式：将请求封装成一个对象，从而允许使用不同的请求、队列或者日志来参数化其他对象，并支持可撤销的操作。</li><li>备忘录模式：允许在不暴露对象实现细节的情况下保存和恢复对象的内部状态。备忘录模式通常用于需要记录对象状态历史、撤销操作或者提供快照功能的场景。</li><li>状态模式：允许对象在内部状态改变时改变它的行为，看起来好像改变了它的类。状态模式将每个状态封装成一个类，并将对象的行为委托给当前状态对象。</li><li>访问者模式：访问者模式能够将算法与对象结构分离开来，使得可以在不改变对象结构的情况下定义新的操作。访问者模式的核心思想是在不改变元素的类的前提下，通过定义访问者类来对元素进行操作。</li><li>中介者模式：中介者模式通过封装一系列对象之间的交互方式，来减少对象之间的直接依赖关系，从而降低系统的耦合性。中介者模式将系统中各个对象之间的交互行为集中到中介者对象中进行处理，而不是让对象之间相互引用。</li><li>解释器模式：解释器模式定义一种语言的文法，并且构建一个解释器来解释这个语言中的句子。解释器模式通常用于处理复杂的语法或规则，它将一个表达式解析成一个抽象语法树，并提供一种灵活的方式来进行解释、执行或操作。</li></ol><h4 id="1、策略模式"><a href="#1、策略模式" class="headerlink" title="1、策略模式"></a>1、策略模式</h4><p>策略模式定义一系列算法，并将每个算法封装起来，使它们可以相互替换。</p><p>策略模式包含以下几个角色：</p><ol><li><strong>策略接口（Strategy）</strong>：定义了所有支持的算法的通用接口。</li><li><strong>具体策略（Concrete Strategy）</strong>：实现了策略接口，提供了具体的算法实现。</li><li><strong>上下文（Context）</strong>：维护一个对策略对象的引用，同时提供了一个接口，供客户端调用。</li></ol><p>策略模式通常适用于以下情况：</p><ul><li>当需要在运行时选择算法时，可以使用策略模式来动态地切换算法。</li><li>当一个类有多种行为，而这些行为在不同的场景下可能发生变化时。</li></ul><p>以下是一个简单的策略模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体策略 - 支付宝支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AliPayStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Paid &quot;</span> + amount + <span class="hljs-string">&quot; via AliPay&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体策略 - 微信支付</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatPayStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Paid &quot;</span> + amount + <span class="hljs-string">&quot; via WeChatPay&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentContext</span> &#123;<br>    <span class="hljs-keyword">private</span> PaymentStrategy paymentStrategy;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPaymentStrategy</span><span class="hljs-params">(PaymentStrategy paymentStrategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.paymentStrategy = paymentStrategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">(<span class="hljs-type">int</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (paymentStrategy != <span class="hljs-literal">null</span>) &#123;<br>            paymentStrategy.pay(amount);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;No payment method selected&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PaymentContext</span> <span class="hljs-variable">paymentContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentContext</span>();<br><br>        <span class="hljs-comment">// 使用支付宝支付</span><br>        paymentContext.setPaymentStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AliPayStrategy</span>());<br>        paymentContext.pay(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// 使用微信支付</span><br>        paymentContext.setPaymentStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeChatPayStrategy</span>());<br>        paymentContext.pay(<span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、模板方法模式"><a href="#2、模板方法模式" class="headerlink" title="2、模板方法模式"></a>2、模板方法模式</h4><p>模板方法模式定义一个操作中的算法的框架，将某些步骤延迟到子类中实现。</p><p>模板方法模式包含以下几个角色：</p><ol><li><strong>抽象模板类（Abstract Template）</strong>：定义了一个模板方法，其中包含了算法的骨架，具体步骤可以由子类实现。</li><li><strong>具体模板类（Concrete Template）</strong>：实现了抽象模板类中的具体步骤，完成算法的各个步骤。</li><li><strong>钩子方法（Hook Method）</strong>：在抽象模板类中定义的可选步骤，子类可以选择性地实现。</li><li><strong>具体子类（Concrete Subclass）</strong>：实现了抽象模板类中的抽象方法，以完成具体的算法。</li></ol><p>模板方法模式通常适用于以下情况：</p><ul><li>当有一些通用的步骤，但各个子类又有不同的实现时，可以将这些通用步骤放在抽象模板类中实现。</li><li>当不想让子类改变算法的整体结构，但又允许子类改变算法中的某些特定步骤时。</li></ul><p>以下是一个简单的模板方法模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象模板类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlay</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endPlay</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 模板方法，定义了算法的骨架</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        initialize();<br>        startPlay();<br>        endPlay();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体模板类 - 篮球游戏</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasketballGame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Game</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Basketball game initialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Basketball game started&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">endPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Basketball game ended&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体模板类 - 足球游戏</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FootballGame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Game</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Football game initialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Football game started&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">endPlay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Football game ended&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Game</span> <span class="hljs-variable">basketballGame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasketballGame</span>();<br>        basketballGame.play();<br><br>        System.out.println();<br><br>        <span class="hljs-type">Game</span> <span class="hljs-variable">footballGame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FootballGame</span>();<br>        footballGame.play();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、观察者模式"><a href="#3、观察者模式" class="headerlink" title="3、观察者模式"></a>3、观察者模式</h4><blockquote><p>观察者模式也被称为发布-订阅（Publish-Subscribe）模式。</p></blockquote><p>观察者模式定义一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。</p><p>观察者模式包含以下几个角色：</p><ol><li><strong>主题（Subject）</strong>：也称为被观察者或可观察者，它维护一系列观察者对象，并提供添加、删除和通知观察者的方法。</li><li><strong>观察者（Observer）</strong>：定义了一个更新接口，使得在主题状态改变时能够接收到通知并进行相应的处理。</li><li><strong>具体主题（Concrete Subject）</strong>：实现了主题接口，负责维护具体的观察者列表，并在状态改变时发送通知给观察者。</li><li><strong>具体观察者（Concrete Observer）</strong>：实现了观察者接口，定义了在接收到主题通知时所采取的具体行动。</li></ol><p>观察者模式通常适用于以下情况：</p><ul><li>当一个对象的改变需要通知其他对象，并且不知道这些对象是谁时，可以使用观察者模式。</li><li>当一个对象的改变需要同时改变其他对象，而且它不知道具体有多少个对象需要改变时，也可以使用观察者模式。</li></ul><p>以下是一个简单的观察者模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 主题</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>        notifyObservers();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.add(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.remove(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;<br>            observer.update(state);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 观察者</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserverA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteObserverA: State changed to &quot;</span> + state);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体观察者B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserverB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteObserverB: State changed to &quot;</span> + state);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteSubject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject</span>();<br>        <span class="hljs-type">Observer</span> <span class="hljs-variable">observerA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserverA</span>();<br>        <span class="hljs-type">Observer</span> <span class="hljs-variable">observerB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserverB</span>();<br><br>        subject.attach(observerA);<br>        subject.attach(observerB);<br><br>        subject.setState(<span class="hljs-number">10</span>);<br>        subject.setState(<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、迭代子模式"><a href="#4、迭代子模式" class="headerlink" title="4、迭代子模式"></a>4、迭代子模式</h4><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p><p>迭代子模式包含以下几个角色：</p><ol><li><strong>迭代器接口（Iterator）</strong>：定义了访问和遍历聚合对象元素的接口。</li><li><strong>具体迭代器（Concrete Iterator）</strong>：实现了迭代器接口，负责对聚合对象进行遍历并记录当前位置。</li><li><strong>聚合接口（Aggregate）</strong>：定义了创建迭代器对象的接口。</li><li><strong>具体聚合（Concrete Aggregate）</strong>：实现了聚合接口，负责创建对应的具体迭代器对象。</li></ol><p>迭代子模式通常适用于以下情况：</p><ul><li>当需要对聚合对象进行遍历并且不想暴露其内部结构时，可以使用迭代子模式。</li><li>当需要提供一种统一的方法来访问不同类型的聚合对象时，也可以使用迭代子模式。</li></ul><p>以下是一个简单的迭代子模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 迭代器接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>    Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; elements;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteIterator</span><span class="hljs-params">(List&lt;Object&gt; elements)</span> &#123;<br>        <span class="hljs-built_in">this</span>.elements = elements;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> position &lt; elements.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (hasNext()) &#123;<br>            <span class="hljs-keyword">return</span> elements.get(position++);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 聚合接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体聚合</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteAggregate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>        elements.add(element);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteIterator</span>(elements);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteAggregate</span> <span class="hljs-variable">aggregate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteAggregate</span>();<br>        aggregate.add(<span class="hljs-string">&quot;Element 1&quot;</span>);<br>        aggregate.add(<span class="hljs-string">&quot;Element 2&quot;</span>);<br>        aggregate.add(<span class="hljs-string">&quot;Element 3&quot;</span>);<br><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> aggregate.createIterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、责任链模式"><a href="#5、责任链模式" class="headerlink" title="5、责任链模式"></a>5、责任链模式</h4><p>责任链模式允许你将请求沿着处理者链进行传递，直到有一个处理者能够处理它。责任链模式将请求发送者和接收者解耦，使得多个对象都有机会处理请求，同时避免了请求发送者需要知道处理请求的具体处理者的情况。</p><p>责任链模式包含以下几个角色：</p><ol><li><strong>处理者接口（Handler）</strong>：定义了处理请求的接口，通常包含一个指向下一个处理者的引用。</li><li><strong>具体处理者（Concrete Handler）</strong>：实现了处理者接口，负责处理请求，如果自己无法处理，则将请求传递给下一个处理者。</li><li><strong>客户端（Client）</strong>：创建并且发送请求到处理者链中的第一个处理者。</li></ol><p>责任链模式通常适用于以下情况：</p><ul><li>当有多个对象可以处理同一个请求，并且客户端不知道哪个对象能够处理时，可以使用责任链模式。</li><li>当需要在不明确指定接收者的情况下，通过一组对象之一来处理请求时，也可以使用责任链模式。</li></ul><p>以下是一个简单的责任链模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 处理者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体处理者A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandlerA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">private</span> Handler nextHandler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextHandler</span><span class="hljs-params">(Handler handler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nextHandler = handler;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request &lt; <span class="hljs-number">10</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ConcreteHandlerA handles request: &quot;</span> + request);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nextHandler != <span class="hljs-literal">null</span>) &#123;<br>            nextHandler.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体处理者B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandlerB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Handler</span> &#123;<br>    <span class="hljs-keyword">private</span> Handler nextHandler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextHandler</span><span class="hljs-params">(Handler handler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nextHandler = handler;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request &gt;= <span class="hljs-number">10</span> &amp;&amp; request &lt; <span class="hljs-number">20</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ConcreteHandlerB handles request: &quot;</span> + request);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nextHandler != <span class="hljs-literal">null</span>) &#123;<br>            nextHandler.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建处理者对象</span><br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handlerA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandlerA</span>();<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handlerB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandlerB</span>();<br><br>        <span class="hljs-comment">// 设置处理者之间的关系</span><br>        handlerA.setNextHandler(handlerB);<br><br>        <span class="hljs-comment">// 发送请求</span><br>        handlerA.handleRequest(<span class="hljs-number">5</span>);<br>        handlerA.handleRequest(<span class="hljs-number">15</span>);<br>        handlerA.handleRequest(<span class="hljs-number">25</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、命令模式"><a href="#6、命令模式" class="headerlink" title="6、命令模式"></a>6、命令模式</h4><p>将请求封装成一个对象，从而允许使用不同的请求、队列或者日志来参数化其他对象，并支持可撤销的操作。</p><p>命令模式包含以下几个角色：</p><ol><li><strong>命令接口（Command）</strong>：声明了执行请求的方法。</li><li><strong>具体命令（Concrete Command）</strong>：实现了命令接口，负责执行具体的请求。</li><li><strong>调用者（Invoker）</strong>：负责调用命令对象执行请求。</li><li><strong>接收者（Receiver）</strong>：知道如何执行一个请求，任何类都可能成为一个接收者。</li></ol><p>命令模式通常适用于以下情况：</p><ul><li>当需要将请求发送者与请求接收者解耦时，可以使用命令模式。</li><li>当需要支持撤销操作时，可以使用命令模式。</li></ul><p>以下是一个简单的命令模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 命令接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体命令</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">private</span> Receiver receiver;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteCommand</span><span class="hljs-params">(Receiver receiver)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver = receiver;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        receiver.action();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 接收者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Receiver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Receiver executes action&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br>    <span class="hljs-keyword">private</span> Command command;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommand</span><span class="hljs-params">(Command command)</span> &#123;<br>        <span class="hljs-built_in">this</span>.command = command;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeCommand</span><span class="hljs-params">()</span> &#123;<br>        command.execute();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Receiver</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Receiver</span>();<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteCommand</span>(receiver);<br>        <span class="hljs-type">Invoker</span> <span class="hljs-variable">invoker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>();<br><br>        invoker.setCommand(command);<br>        invoker.executeCommand();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、备忘录模式"><a href="#7、备忘录模式" class="headerlink" title="7、备忘录模式"></a>7、备忘录模式</h4><p>允许在不暴露对象实现细节的情况下保存和恢复对象的内部状态。备忘录模式通常用于需要记录对象状态历史、撤销操作或者提供快照功能的场景。</p><p>备忘录模式包含以下几个角色：</p><ol><li><strong>发起人（Originator）</strong>：负责创建备忘录对象，以保存当前内部状态，并可以使用备忘录对象恢复内部状态。</li><li><strong>备忘录（Memento）</strong>：负责存储发起人对象的内部状态。</li><li><strong>管理者（Caretaker）</strong>：负责管理备忘录对象，可以保存和获取备忘录对象，并通知发起人对象。</li></ol><p>备忘录模式通常适用于以下情况：</p><ul><li>当需要保存和恢复对象的内部状态，同时又不希望暴露对象的实现细节时，可以使用备忘录模式。</li><li>当需要提供撤销操作或者历史记录功能时，也可以使用备忘录模式。</li></ul><p>以下是一个简单的备忘录模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 备忘录类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br>    <span class="hljs-keyword">private</span> String state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memento</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 发起人类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span> &#123;<br>    <span class="hljs-keyword">private</span> String state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">saveStateToMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(state);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getStateFromMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>        state = memento.getState();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 管理者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br>    <span class="hljs-keyword">private</span> Memento memento;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br>        <span class="hljs-built_in">this</span>.memento = memento;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">getMemento</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> memento;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Originator</span> <span class="hljs-variable">originator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Originator</span>();<br>        <span class="hljs-type">Caretaker</span> <span class="hljs-variable">caretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Caretaker</span>();<br><br>        <span class="hljs-comment">// 修改发起人状态并保存备忘录</span><br>        originator.setState(<span class="hljs-string">&quot;State 1&quot;</span>);<br>        <span class="hljs-type">Memento</span> <span class="hljs-variable">memento</span> <span class="hljs-operator">=</span> originator.saveStateToMemento();<br>        caretaker.saveMemento(memento);<br><br>        <span class="hljs-comment">// 修改发起人状态</span><br>        originator.setState(<span class="hljs-string">&quot;State 2&quot;</span>);<br><br>        <span class="hljs-comment">// 恢复发起人状态</span><br>        <span class="hljs-type">Memento</span> <span class="hljs-variable">savedMemento</span> <span class="hljs-operator">=</span> caretaker.getMemento();<br>        originator.getStateFromMemento(savedMemento);<br>        System.out.println(<span class="hljs-string">&quot;Restored State: &quot;</span> + originator.getState());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8、状态模式"><a href="#8、状态模式" class="headerlink" title="8、状态模式"></a>8、状态模式</h4><p>允许对象在内部状态改变时改变它的行为，看起来好像改变了它的类。状态模式将每个状态封装成一个类，并将对象的行为委托给当前状态对象。</p><p>状态模式包含以下几个角色：</p><ol><li><strong>上下文（Context）</strong>：定义客户端感兴趣的接口，维护一个对状态对象的引用，并将请求委托给当前状态对象处理。</li><li><strong>抽象状态（State）</strong>：定义一个接口以封装与上下文的一个特定状态相关的行为。</li><li><strong>具体状态（Concrete State）</strong>：实现抽象状态定义的接口，并且负责处理状态相关的行为。</li></ol><p>状态模式通常适用于以下情况：</p><ul><li>当对象的行为取决于它的状态，并且在运行时可以根据状态改变行为时，可以使用状态模式。</li><li>当有大量的条件语句来控制一个对象的行为时，可以使用状态模式来提高代码的可维护性。</li></ul><p>以下是一个简单的状态模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> State state;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        state.handleRequest(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象状态</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Context context)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体状态A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Context context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Handling request in State A&quot;</span>);<br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateB</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体状态B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Context context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Handling request in State B&quot;</span>);<br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateA</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateA</span>());<br><br>        context.request();<br>        context.request();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9、访问者模式"><a href="#9、访问者模式" class="headerlink" title="9、访问者模式"></a>9、访问者模式</h4><p>访问者模式能够将算法与对象结构分离开来，使得可以在不改变对象结构的情况下定义新的操作。访问者模式的核心思想是在不改变元素的类的前提下，通过定义访问者类来对元素进行操作。</p><p>访问者模式包含以下几个角色：</p><ol><li><strong>访问者接口（Visitor）</strong>：定义了对每个元素访问的操作，可以在不修改具体元素类的情况下定义新的操作。</li><li><strong>具体访问者（Concrete Visitor）</strong>：实现了访问者接口中定义的操作，对元素进行具体的处理。</li><li><strong>元素接口（Element）</strong>：定义了一个 <code>accept</code> 方法，该方法接受一个访问者对象作为参数，以便让访问者访问自身。</li><li><strong>具体元素（Concrete Element）</strong>：实现了元素接口中的 <code>accept</code> 方法，接受访问者对象的访问，并调用访问者的方法进行处理。</li><li><strong>对象结构（Object Structure）</strong>：存储了具体元素对象，提供了接受访问者对象的方法，以便访问者能够遍历访问其中的元素。</li></ol><p>访问者模式通常适用于以下情况：</p><ul><li>当一个对象结构包含许多具体类对象，而且需要对这些对象进行不同的操作时，可以使用访问者模式。</li><li>当对象的操作需要多次变更，但是对象本身不希望发生变化时，可以使用访问者模式。</li></ul><p>以下是一个简单的访问者模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 访问者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementA element)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementB element)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体访问者A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteVisitorA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementA element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorA visits ElementA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementB element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorA visits ElementB&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体访问者B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteVisitorB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementA element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorB visits ElementA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ElementB element)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteVisitorB visits ElementB&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 元素接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体元素A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElementA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体元素B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElementB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 对象结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectStructure</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Element&gt; elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Element element)</span> &#123;<br>        elements.add(element);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detach</span><span class="hljs-params">(Element element)</span> &#123;<br>        elements.remove(element);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>            element.accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ObjectStructure</span> <span class="hljs-variable">objectStructure</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStructure</span>();<br>        objectStructure.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ElementA</span>());<br>        objectStructure.attach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ElementB</span>());<br><br>        <span class="hljs-type">Visitor</span> <span class="hljs-variable">visitorA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteVisitorA</span>();<br>        objectStructure.accept(visitorA);<br><br>        <span class="hljs-type">Visitor</span> <span class="hljs-variable">visitorB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteVisitorB</span>();<br>        objectStructure.accept(visitorB);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10、中介者模式"><a href="#10、中介者模式" class="headerlink" title="10、中介者模式"></a>10、中介者模式</h4><p>中介者模式通过封装一系列对象之间的交互方式，来减少对象之间的直接依赖关系，从而降低系统的耦合性。中介者模式将系统中各个对象之间的交互行为集中到中介者对象中进行处理，而不是让对象之间相互引用。</p><p>中介者模式包含以下几个角色：</p><ol><li><strong>中介者（Mediator）</strong>：定义了一个接口用于与各个同事对象进行通信，可以通过该接口将具体同事对象的通知传递给其他同事对象。</li><li><strong>具体中介者（Concrete Mediator）</strong>：实现了中介者接口，负责协调各个同事对象的交互行为。</li><li><strong>同事类（Colleague）</strong>：定义了一个接口用于与中介者进行通信，每个同事对象都知道中介者对象，并可以通过中介者来通知其他同事对象。</li><li><strong>具体同事类（Concrete Colleague）</strong>：实现了同事接口，每个具体同事类都知道自己的中介者对象，并通过中介者对象来与其他同事对象进行通信。</li></ol><p>中介者模式通常适用于以下情况：</p><ul><li>当对象之间存在复杂的交互关系，并且导致对象之间紧密耦合时，可以使用中介者模式来解耦对象之间的关系。</li><li>当一个对象行为发生改变可能会影响到其他对象，但又不希望对象之间直接耦合时，可以使用中介者模式。</li></ul><p>以下是一个简单的中介者模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中介者接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message, Colleague colleague)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体中介者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">private</span> Colleague colleague1;<br>    <span class="hljs-keyword">private</span> Colleague colleague2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColleague1</span><span class="hljs-params">(Colleague colleague)</span> &#123;<br>        <span class="hljs-built_in">this</span>.colleague1 = colleague;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColleague2</span><span class="hljs-params">(Colleague colleague)</span> &#123;<br>        <span class="hljs-built_in">this</span>.colleague2 = colleague;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message, Colleague colleague)</span> &#123;<br>        <span class="hljs-keyword">if</span> (colleague == colleague1) &#123;<br>            colleague2.receive(message);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            colleague1.receive(message);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 同事接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体同事类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">private</span> Mediator mediator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteColleagueA</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        mediator.send(message, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteColleagueA received: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体同事类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">private</span> Mediator mediator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteColleagueB</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        mediator.send(message, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteColleagueB received: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteMediator</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteMediator</span>();<br><br>        <span class="hljs-type">ConcreteColleagueA</span> <span class="hljs-variable">colleagueA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteColleagueA</span>(mediator);<br>        <span class="hljs-type">ConcreteColleagueB</span> <span class="hljs-variable">colleagueB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteColleagueB</span>(mediator);<br><br>        mediator.setColleague1(colleagueA);<br>        mediator.setColleague2(colleagueB);<br><br>        colleagueA.send(<span class="hljs-string">&quot;Hello from ColleagueA&quot;</span>);<br>        colleagueB.send(<span class="hljs-string">&quot;Hi from ColleagueB&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11、解释器模式"><a href="#11、解释器模式" class="headerlink" title="11、解释器模式"></a>11、解释器模式</h4><p>解释器模式定义一种语言的文法，并且构建一个解释器来解释这个语言中的句子。解释器模式通常用于处理复杂的语法或规则，它将一个表达式解析成一个抽象语法树，并提供一种灵活的方式来进行解释、执行或操作。</p><p>解释器模式包含以下几个角色：</p><ol><li><strong>抽象表达式（Abstract Expression）</strong>：定义了一个抽象的解释操作，通常包含一个 <code>interpret()</code> 方法，用于解释表达式。</li><li><strong>终结符表达式（Terminal Expression）</strong>：实现了抽象表达式接口，表示语法中的终结符，不再包含子表达式。</li><li><strong>非终结符表达式（Nonterminal Expression）</strong>：实现了抽象表达式接口，表示语法中的非终结符，通常包含多个子表达式。</li><li><strong>上下文（Context）</strong>：包含解释器之外的一些全局信息，通常被解释器用来保存解释器中间结果或者共享信息。</li></ol><p>解释器模式通常适用于以下情况：</p><ul><li>当有一个语言需要解释执行，并且可以将该语言的语法表示为一个表达式文法树时，可以使用解释器模式。</li><li>当需要按照特定的规则进行解析语言或表达式时，可以使用解释器模式。</li></ul><p>以下是一个简单的解释器模式的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象表达式</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 终结符表达式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumberExpression</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 非终结符表达式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> Expression left;<br>    <span class="hljs-keyword">private</span> Expression right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddExpression</span><span class="hljs-params">(Expression left, Expression right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left.interpret() + right.interpret();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> String input;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> output;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-built_in">this</span>.input = input;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInput</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> input;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInput</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-built_in">this</span>.input = input;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOutput</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOutput</span><span class="hljs-params">(<span class="hljs-type">int</span> output)</span> &#123;<br>        <span class="hljs-built_in">this</span>.output = output;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构建解释器上下文</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-string">&quot;1+2+3&quot;</span>);<br><br>        <span class="hljs-comment">// 解析表达式</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parseExpression(context.getInput());<br><br>        <span class="hljs-comment">// 执行解释器</span><br>        context.setOutput(expression.interpret());<br><br>        <span class="hljs-comment">// 输出结果</span><br>        System.out.println(context.getOutput());<br>    &#125;<br><br>    <span class="hljs-comment">// 解析表达式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Expression <span class="hljs-title function_">parseExpression</span><span class="hljs-params">(String input)</span> &#123;<br>        String[] tokens = input.split(<span class="hljs-string">&quot;\\+&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tokens.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (expression == <span class="hljs-literal">null</span>) &#123;<br>                expression = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(Integer.parseInt(tokens[i]));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                expression = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddExpression</span>(expression, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberExpression</span>(Integer.parseInt(tokens[i])));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> expression;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
